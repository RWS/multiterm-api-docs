{
  "api/Sdl.MultiTerm.TMO.Interop.__MIDL___MIDL_itf_MTTMO2_0000_0000_0002.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.__MIDL___MIDL_itf_MTTMO2_0000_0000_0002.html",
    "title": "Enum __MIDL___MIDL_itf_MTTMO2_0000_0000_0002",
    "keywords": "Enum __MIDL___MIDL_itf_MTTMO2_0000_0000_0002 Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax public enum __MIDL___MIDL_itf_MTTMO2_0000_0000_0002 Fields Name Description mtObjectEditable mtObjectUnusable mtObjectUsable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.Application.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.Application.html",
    "title": "Interface Application",
    "keywords": "Interface Application Inherited Members IApplication.LocalRepository IApplication.ServerRepository IApplication.MultiSearch Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"CACFF5D6-C449-464A-88A0-2F2D849A0AE3\")] public interface Application : IApplication"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ApplicationClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ApplicationClass.html",
    "title": "Class ApplicationClass",
    "keywords": "Class ApplicationClass Inheritance System.Object ApplicationClass Implements Application IApplication Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"DE9C39C5-7957-46C5-9DC9-B1B68CA55577\")] [ClassInterface(ClassInterfaceType.None)] public class ApplicationClass : Application, IApplication Constructors ApplicationClass() Declaration public ApplicationClass() Explicit Interface Implementations IApplication.LocalRepository Declaration public virtual TermbaseRepository IApplication.LocalRepository { get; } Returns Type Description TermbaseRepository IApplication.MultiSearch Declaration public virtual MultiSearch IApplication.MultiSearch { get; } Returns Type Description MultiSearch IApplication.ServerRepository Declaration public virtual TermbaseRepository IApplication.ServerRepository { get; } Returns Type Description TermbaseRepository Implements Application IApplication"
  },
  "api/Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption.html",
    "title": "Enum CredentialsPersistOption",
    "keywords": "Enum CredentialsPersistOption Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"469F32E5-6312-481F-AB2E-AF00AF0D1D9B\")] public enum CredentialsPersistOption Fields Name Description None ServerAndUserCredentials ServerOnly"
  },
  "api/Sdl.MultiTerm.TMO.Interop.DescriptiveField.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.DescriptiveField.html",
    "title": "Interface DescriptiveField",
    "keywords": "Interface DescriptiveField Inherited Members IDescriptiveField.Label IDescriptiveField.Type IDescriptiveField.Level IDescriptiveField.Mandatory IDescriptiveField.Multiple IDescriptiveField.PicklistValues Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"EB597BE7-1BD7-4984-B9FB-6E0308DE4D22\")] public interface DescriptiveField : IDescriptiveField"
  },
  "api/Sdl.MultiTerm.TMO.Interop.DescriptiveFieldClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.DescriptiveFieldClass.html",
    "title": "Class DescriptiveFieldClass",
    "keywords": "Class DescriptiveFieldClass Inheritance System.Object DescriptiveFieldClass Implements DescriptiveField IDescriptiveField Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"5D1CA5E9-EA26-4397-A57E-CC20BB4D36F4\")] [ClassInterface(ClassInterfaceType.None)] public class DescriptiveFieldClass : DescriptiveField, IDescriptiveField Explicit Interface Implementations IDescriptiveField.Label Declaration public virtual string IDescriptiveField.Label { get; } Returns Type Description System.String IDescriptiveField.Level Declaration public virtual MtFieldLevel IDescriptiveField.Level { get; } Returns Type Description MtFieldLevel IDescriptiveField.Mandatory Declaration public virtual bool IDescriptiveField.Mandatory { get; } Returns Type Description System.Boolean IDescriptiveField.Multiple Declaration public virtual bool IDescriptiveField.Multiple { get; } Returns Type Description System.Boolean IDescriptiveField.PicklistValues Declaration public virtual PicklistValues IDescriptiveField.PicklistValues { get; } Returns Type Description PicklistValues IDescriptiveField.Type Declaration public virtual MtFieldType IDescriptiveField.Type { get; } Returns Type Description MtFieldType Implements DescriptiveField IDescriptiveField"
  },
  "api/Sdl.MultiTerm.TMO.Interop.DescriptiveFields.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.DescriptiveFields.html",
    "title": "Interface DescriptiveFields",
    "keywords": "Interface DescriptiveFields Inherited Members IDescriptiveFields.GetEnumerator() IDescriptiveFields.Item[Object] IDescriptiveFields.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"D086110E-03EE-4E5E-9516-C3F4402B7DE7\")] public interface DescriptiveFields : IDescriptiveFields, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.DescriptiveFieldsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.DescriptiveFieldsClass.html",
    "title": "Class DescriptiveFieldsClass",
    "keywords": "Class DescriptiveFieldsClass Inheritance System.Object DescriptiveFieldsClass Implements DescriptiveFields IDescriptiveFields System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"34A5DC84-7713-4FC0-9B73-8440FE3C8388\")] [ClassInterface(ClassInterfaceType.None)] public class DescriptiveFieldsClass : DescriptiveFields, IDescriptiveFields, IEnumerable Explicit Interface Implementations IDescriptiveFields.Count Declaration public virtual int IDescriptiveFields.Count { get; } Returns Type Description System.Int32 IDescriptiveFields.GetEnumerator() Declaration public virtual IEnumerator IDescriptiveFields.GetEnumerator() Returns Type Description System.Collections.IEnumerator IDescriptiveFields.Item[Object] Declaration public virtual DescriptiveField IDescriptiveFields.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description DescriptiveField Implements DescriptiveFields IDescriptiveFields System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.Entries.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.Entries.html",
    "title": "Interface Entries",
    "keywords": "Interface Entries Inherited Members IEntries.Item(Int32) IEntries.New(String, Boolean) IEntries.GetEntryIDs() IEntries.GetCrossLinkedEntry(Object, String, Int32) IEntries.ActiveFilterHasChanged() IEntries.ReloadLayout() IEntries.ReloadTermbaseDefinition() IEntries.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"2C2B904C-3E14-4C3D-BD80-D9CF5E50070D\")] public interface Entries : IEntries"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntriesClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntriesClass.html",
    "title": "Class EntriesClass",
    "keywords": "Class EntriesClass Inheritance System.Object EntriesClass Implements Entries IEntries Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"C35D390F-659E-4101-AFD1-CC57029B834F\")] public class EntriesClass : Entries, IEntries Explicit Interface Implementations IEntries.ActiveFilterHasChanged() Declaration public virtual void IEntries.ActiveFilterHasChanged() IEntries.Count Declaration public virtual int IEntries.Count { get; } Returns Type Description System.Int32 IEntries.GetCrossLinkedEntry(Object, String, Int32) Declaration public virtual string IEntries.GetCrossLinkedEntry(object Index, string Term, int CurrentEntryId) Parameters Type Name Description System.Object Index System.String Term System.Int32 CurrentEntryId Returns Type Description System.String IEntries.GetEntryIDs() Declaration public virtual EntryIDs IEntries.GetEntryIDs() Returns Type Description EntryIDs IEntries.Item(Int32) Declaration public virtual Entry IEntries.Item(int EntryID) Parameters Type Name Description System.Int32 EntryID Returns Type Description Entry IEntries.New(String, Boolean) Declaration public virtual Entry IEntries.New(string EntryXML, bool Incomplete) Parameters Type Name Description System.String EntryXML System.Boolean Incomplete Returns Type Description Entry IEntries.ReloadLayout() Declaration public virtual void IEntries.ReloadLayout() IEntries.ReloadTermbaseDefinition() Declaration public virtual void IEntries.ReloadTermbaseDefinition() Implements Entries IEntries"
  },
  "api/Sdl.MultiTerm.TMO.Interop.Entry.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.Entry.html",
    "title": "Interface Entry",
    "keywords": "Interface Entry Inherited Members IEntry.ApplyLayout(String, String, String, LayoutDefinition) IEntry.LockEntry(MtLockingState) IEntry.ApplyExport(ExportDefinition, String, String) IEntry.ApplyExportWithMultimedia(ExportDefinition, String, String, String, String) IEntry.ApplyFilter(FilterDefinition, String, String) IEntry.Save() IEntry.Delete() IEntry.Merge(Entry) IEntry.MergeEx(String) IEntry.ApplyFilterForSingleTerm(FilterDefinition, String, String, String) IEntry.CanDelete() IEntry.CanCopy() IEntry.CanMerge() IEntry.ExtractMultimediaToTemp() IEntry.ID IEntry.Content IEntry.IsComplete IEntry.LockedBy IEntry.IsRtf IEntry._FirstDisplayedTerm IEntry.LockedDate Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"7C71928D-1851-49CE-8A1C-47A15840E4D2\")] public interface Entry : IEntry"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryClass.html",
    "title": "Class EntryClass",
    "keywords": "Class EntryClass Inheritance System.Object EntryClass Implements Entry IEntry Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"434639DD-B8A9-480B-9961-E2770275F7B6\")] public class EntryClass : Entry, IEntry Explicit Interface Implementations IEntry._FirstDisplayedTerm Declaration public virtual string IEntry._FirstDisplayedTerm { set; } Returns Type Description System.String IEntry.ApplyExport(ExportDefinition, String, String) Declaration public virtual string IEntry.ApplyExport(ExportDefinition ExportDefinition, string SourceIndex = \"\", string TargetIndex = \"\") Parameters Type Name Description ExportDefinition ExportDefinition System.String SourceIndex System.String TargetIndex Returns Type Description System.String IEntry.ApplyExportWithMultimedia(ExportDefinition, String, String, String, String) Declaration public virtual string IEntry.ApplyExportWithMultimedia(ExportDefinition ExportDefinition, string SourceIndex, string TargetIndex, string DestFolderPath, string ExportFileName) Parameters Type Name Description ExportDefinition ExportDefinition System.String SourceIndex System.String TargetIndex System.String DestFolderPath System.String ExportFileName Returns Type Description System.String IEntry.ApplyFilter(FilterDefinition, String, String) Declaration public virtual bool IEntry.ApplyFilter(FilterDefinition FilterObject, string SourceIndex = \"\", string TargetIndex = \"\") Parameters Type Name Description FilterDefinition FilterObject System.String SourceIndex System.String TargetIndex Returns Type Description System.Boolean IEntry.ApplyFilterForSingleTerm(FilterDefinition, String, String, String) Declaration public virtual bool IEntry.ApplyFilterForSingleTerm(FilterDefinition FilterObject, string SourceIndex, string TargetIndex, string Term) Parameters Type Name Description FilterDefinition FilterObject System.String SourceIndex System.String TargetIndex System.String Term Returns Type Description System.Boolean IEntry.ApplyLayout(String, String, String, LayoutDefinition) Declaration public virtual string IEntry.ApplyLayout(string SourceIndex, string TargetIndex, string HighlightText, LayoutDefinition LayoutDefinitionObject) Parameters Type Name Description System.String SourceIndex System.String TargetIndex System.String HighlightText LayoutDefinition LayoutDefinitionObject Returns Type Description System.String IEntry.CanCopy() Declaration public virtual bool IEntry.CanCopy() Returns Type Description System.Boolean IEntry.CanDelete() Declaration public virtual bool IEntry.CanDelete() Returns Type Description System.Boolean IEntry.CanMerge() Declaration public virtual bool IEntry.CanMerge() Returns Type Description System.Boolean IEntry.Content Declaration public virtual EntryContent IEntry.Content { get; } Returns Type Description EntryContent IEntry.Delete() Declaration public virtual void IEntry.Delete() IEntry.ExtractMultimediaToTemp() Declaration public virtual void IEntry.ExtractMultimediaToTemp() IEntry.ID Declaration public virtual int IEntry.ID { get; } Returns Type Description System.Int32 IEntry.IsComplete Declaration public virtual bool IEntry.IsComplete { get; } Returns Type Description System.Boolean IEntry.IsRtf Declaration public virtual int IEntry.IsRtf { get; } Returns Type Description System.Int32 IEntry.LockedBy Declaration public virtual string IEntry.LockedBy { get; } Returns Type Description System.String IEntry.LockedDate Declaration public virtual DateTime IEntry.LockedDate { get; } Returns Type Description System.DateTime IEntry.LockEntry(MtLockingState) Declaration public virtual void IEntry.LockEntry(MtLockingState LockState) Parameters Type Name Description MtLockingState LockState IEntry.Merge(Entry) Declaration public virtual void IEntry.Merge(Entry MergeWithEntry) Parameters Type Name Description Entry MergeWithEntry IEntry.MergeEx(String) Declaration public virtual void IEntry.MergeEx(string MergeWithEntry) Parameters Type Name Description System.String MergeWithEntry IEntry.Save() Declaration public virtual void IEntry.Save() Implements Entry IEntry"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions.html",
    "title": "Interface EntryClassesPermissions",
    "keywords": "Interface EntryClassesPermissions Inherited Members IEntryClassesPermissions.GetEnumerator() IEntryClassesPermissions.Item[Object] IEntryClassesPermissions.Count IEntryClassesPermissions.XML Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"4D2B71BC-EBBB-4F39-B4F7-4004529D7716\")] public interface EntryClassesPermissions : IEntryClassesPermissions, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryClassesPermissionsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryClassesPermissionsClass.html",
    "title": "Class EntryClassesPermissionsClass",
    "keywords": "Class EntryClassesPermissionsClass Inheritance System.Object EntryClassesPermissionsClass Implements EntryClassesPermissions IEntryClassesPermissions System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"3CF405E9-48CB-4C03-A707-1BF97A5EFB29\")] [ClassInterface(ClassInterfaceType.None)] public class EntryClassesPermissionsClass : EntryClassesPermissions, IEntryClassesPermissions, IEnumerable Explicit Interface Implementations IEntryClassesPermissions.Count Declaration public virtual int IEntryClassesPermissions.Count { get; } Returns Type Description System.Int32 IEntryClassesPermissions.GetEnumerator() Declaration public virtual IEnumerator IEntryClassesPermissions.GetEnumerator() Returns Type Description System.Collections.IEnumerator IEntryClassesPermissions.Item[Object] Declaration public virtual EntryClassPermissions IEntryClassesPermissions.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description EntryClassPermissions IEntryClassesPermissions.XML Declaration public virtual string IEntryClassesPermissions.XML { get; } Returns Type Description System.String Implements EntryClassesPermissions IEntryClassesPermissions System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryClassPermissions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryClassPermissions.html",
    "title": "Interface EntryClassPermissions",
    "keywords": "Interface EntryClassPermissions Inherited Members IEntryClassPermissions.Read IEntryClassPermissions.Write IEntryClassPermissions.Name IEntryClassPermissions._id IEntryClassPermissions.IsDefault Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"D5E5C9CF-A81D-407D-AFAD-BFF44C38D2A3\")] public interface EntryClassPermissions : IEntryClassPermissions"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryClassPermissionsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryClassPermissionsClass.html",
    "title": "Class EntryClassPermissionsClass",
    "keywords": "Class EntryClassPermissionsClass Inheritance System.Object EntryClassPermissionsClass Implements EntryClassPermissions IEntryClassPermissions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"F3E2C329-F422-421D-A84D-964E235FF88B\")] [ClassInterface(ClassInterfaceType.None)] public class EntryClassPermissionsClass : EntryClassPermissions, IEntryClassPermissions Explicit Interface Implementations IEntryClassPermissions._id Declaration public virtual int IEntryClassPermissions._id { get; } Returns Type Description System.Int32 IEntryClassPermissions.IsDefault Declaration public virtual bool IEntryClassPermissions.IsDefault { get; } Returns Type Description System.Boolean IEntryClassPermissions.Name Declaration public virtual string IEntryClassPermissions.Name { get; } Returns Type Description System.String IEntryClassPermissions.Read Declaration public virtual bool IEntryClassPermissions.Read { get; } Returns Type Description System.Boolean IEntryClassPermissions.Write Declaration public virtual bool IEntryClassPermissions.Write { get; } Returns Type Description System.Boolean Implements EntryClassPermissions IEntryClassPermissions"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryContent.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryContent.html",
    "title": "Interface EntryContent",
    "keywords": "Interface EntryContent Inherited Members IEntryContent.Update() IEntryContent.Refresh() IEntryContent.GetContentForOneSourceTerm(String, String) IEntryContent.Fields IEntryContent.EntryIndexes IEntryContent.Content IEntryContent.EntryClass IEntryContent.AutoRefresh Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"80CC23D4-00D7-4CE6-B97A-AB4C9EBAC776\")] public interface EntryContent : IEntryContent"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryContentClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryContentClass.html",
    "title": "Class EntryContentClass",
    "keywords": "Class EntryContentClass Inheritance System.Object EntryContentClass Implements EntryContent IEntryContent Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"96C699C1-D55F-480D-89A9-46F65E06F4C8\")] public class EntryContentClass : EntryContent, IEntryContent Explicit Interface Implementations IEntryContent.AutoRefresh Declaration public virtual bool IEntryContent.AutoRefresh { get; set; } Returns Type Description System.Boolean IEntryContent.Content Declaration public virtual string IEntryContent.Content { get; set; } Returns Type Description System.String IEntryContent.EntryClass Declaration public virtual string IEntryContent.EntryClass { get; } Returns Type Description System.String IEntryContent.EntryIndexes Declaration public virtual EntryIndexes IEntryContent.EntryIndexes { get; } Returns Type Description EntryIndexes IEntryContent.Fields Declaration public virtual EntryFields IEntryContent.Fields { get; } Returns Type Description EntryFields IEntryContent.GetContentForOneSourceTerm(String, String) Declaration public virtual string IEntryContent.GetContentForOneSourceTerm(string SourceIndex, string Term) Parameters Type Name Description System.String SourceIndex System.String Term Returns Type Description System.String IEntryContent.Refresh() Declaration public virtual void IEntryContent.Refresh() IEntryContent.Update() Declaration public virtual void IEntryContent.Update() Implements EntryContent IEntryContent"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryField.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryField.html",
    "title": "Interface EntryField",
    "keywords": "Interface EntryField Inherited Members IEntryField.Name IEntryField.Value IEntryField.ReadOnly Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"CCC1C515-B9F8-41CF-B21D-BFC48674D339\")] public interface EntryField : IEntryField"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryFieldClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryFieldClass.html",
    "title": "Class EntryFieldClass",
    "keywords": "Class EntryFieldClass Inheritance System.Object EntryFieldClass Implements EntryField IEntryField Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"228AF537-4740-44DE-8969-09C71E0CF897\")] [ClassInterface(ClassInterfaceType.None)] public class EntryFieldClass : EntryField, IEntryField Explicit Interface Implementations IEntryField.Name Declaration public virtual string IEntryField.Name { get; } Returns Type Description System.String IEntryField.ReadOnly Declaration public virtual bool IEntryField.ReadOnly { get; } Returns Type Description System.Boolean IEntryField.Value Declaration public virtual string IEntryField.Value { get; set; } Returns Type Description System.String Implements EntryField IEntryField"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryFields.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryFields.html",
    "title": "Interface EntryFields",
    "keywords": "Interface EntryFields Inherited Members IEntryFields.GetEnumerator() IEntryFields.Add(String, Object) IEntryFields.Item[Object] IEntryFields.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"BCE64559-7892-4368-B3C2-6923D2B40BD2\")] public interface EntryFields : IEntryFields, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryFieldsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryFieldsClass.html",
    "title": "Class EntryFieldsClass",
    "keywords": "Class EntryFieldsClass Inheritance System.Object EntryFieldsClass Implements EntryFields IEntryFields System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"E64B9878-7E71-421B-97E4-69EBAE473D49\")] public class EntryFieldsClass : EntryFields, IEntryFields, IEnumerable Explicit Interface Implementations IEntryFields.Add(String, Object) Declaration public virtual EntryField IEntryFields.Add(string FieldName, object Value) Parameters Type Name Description System.String FieldName System.Object Value Returns Type Description EntryField IEntryFields.Count Declaration public virtual int IEntryFields.Count { get; } Returns Type Description System.Int32 IEntryFields.GetEnumerator() Declaration public virtual IEnumerator IEntryFields.GetEnumerator() Returns Type Description System.Collections.IEnumerator IEntryFields.Item[Object] Declaration public virtual EntryField IEntryFields.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description EntryField Implements EntryFields IEntryFields System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryIDs.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryIDs.html",
    "title": "Interface EntryIDs",
    "keywords": "Interface EntryIDs Inherited Members IEntryIDs.GetEnumerator() IEntryIDs.Item[Int32] IEntryIDs.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"428EB7AC-6A77-461E-9F9D-96A8A3B03BF5\")] public interface EntryIDs : IEntryIDs, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryIDsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryIDsClass.html",
    "title": "Class EntryIDsClass",
    "keywords": "Class EntryIDsClass Inheritance System.Object EntryIDsClass Implements EntryIDs IEntryIDs System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"66A1975B-EAEE-41D1-8C3B-B3F4571ABF96\")] [ClassInterface(ClassInterfaceType.None)] public class EntryIDsClass : EntryIDs, IEntryIDs, IEnumerable Explicit Interface Implementations IEntryIDs.Count Declaration public virtual int IEntryIDs.Count { get; } Returns Type Description System.Int32 IEntryIDs.GetEnumerator() Declaration public virtual IEnumerator IEntryIDs.GetEnumerator() Returns Type Description System.Collections.IEnumerator IEntryIDs.Item[Int32] Declaration public virtual string IEntryIDs.this[int Index] { get; } Parameters Type Name Description System.Int32 Index Returns Type Description System.String Implements EntryIDs IEntryIDs System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryIndex.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryIndex.html",
    "title": "Interface EntryIndex",
    "keywords": "Interface EntryIndex Inherited Members IEntryIndex.Term IEntryIndex.IndexFields IEntryIndex.TermFields IEntryIndex.ReadOnly IEntryIndex.IndexName Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"2FF47005-1588-4099-95B5-B957B513A4E3\")] public interface EntryIndex : IEntryIndex"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryIndexClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryIndexClass.html",
    "title": "Class EntryIndexClass",
    "keywords": "Class EntryIndexClass Inheritance System.Object EntryIndexClass Implements EntryIndex IEntryIndex Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"EFFA5864-1DDE-497B-9A51-7416483A15E1\")] [ClassInterface(ClassInterfaceType.None)] public class EntryIndexClass : EntryIndex, IEntryIndex Explicit Interface Implementations IEntryIndex.IndexFields Declaration public virtual EntryFields IEntryIndex.IndexFields { get; } Returns Type Description EntryFields IEntryIndex.IndexName Declaration public virtual string IEntryIndex.IndexName { get; } Returns Type Description System.String IEntryIndex.ReadOnly Declaration public virtual bool IEntryIndex.ReadOnly { get; } Returns Type Description System.Boolean IEntryIndex.Term Declaration public virtual string IEntryIndex.Term { get; set; } Returns Type Description System.String IEntryIndex.TermFields Declaration public virtual EntryFields IEntryIndex.TermFields { get; } Returns Type Description EntryFields Implements EntryIndex IEntryIndex"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryIndexes.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryIndexes.html",
    "title": "Interface EntryIndexes",
    "keywords": "Interface EntryIndexes Inherited Members IEntryIndexes.GetEnumerator() IEntryIndexes.Add(String, String) IEntryIndexes.Item[Object] IEntryIndexes.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"D3A93CA9-D179-432B-BDF3-07296CBD4C00\")] public interface EntryIndexes : IEntryIndexes, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.EntryIndexesClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.EntryIndexesClass.html",
    "title": "Class EntryIndexesClass",
    "keywords": "Class EntryIndexesClass Inheritance System.Object EntryIndexesClass Implements EntryIndexes IEntryIndexes System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"CEF5643C-ADC7-4905-9D6D-33AC250415DB\")] public class EntryIndexesClass : EntryIndexes, IEntryIndexes, IEnumerable Explicit Interface Implementations IEntryIndexes.Add(String, String) Declaration public virtual EntryIndex IEntryIndexes.Add(string IndexName, string Term) Parameters Type Name Description System.String IndexName System.String Term Returns Type Description EntryIndex IEntryIndexes.Count Declaration public virtual int IEntryIndexes.Count { get; } Returns Type Description System.Int32 IEntryIndexes.GetEnumerator() Declaration public virtual IEnumerator IEntryIndexes.GetEnumerator() Returns Type Description System.Collections.IEnumerator IEntryIndexes.Item[Object] Declaration public virtual EntryIndex IEntryIndexes.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description EntryIndex Implements EntryIndexes IEntryIndexes System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ExportDefinition.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ExportDefinition.html",
    "title": "Interface ExportDefinition",
    "keywords": "Interface ExportDefinition Inherited Members IExportDefinition.StartWizard(String, String, String) IExportDefinition.Delete() IExportDefinition.ProcessExport(MtTaskType, String, String) IExportDefinition.Save(String) IExportDefinition.Load(String) IExportDefinition.Name IExportDefinition.Description IExportDefinition.Content IExportDefinition.ReadOnly IExportDefinition.Owner IExportDefinition.IsSytemObject IExportDefinition.Usability Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"0E05344B-D4A4-4EB9-9762-49ADBC0AAB26\")] public interface ExportDefinition : IExportDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ExportDefinitionClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ExportDefinitionClass.html",
    "title": "Class ExportDefinitionClass",
    "keywords": "Class ExportDefinitionClass Inheritance System.Object ExportDefinitionClass Implements ExportDefinition IExportDefinition Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"7A023A22-8B6F-45F3-BFFA-7CB318759172\")] [ClassInterface(ClassInterfaceType.None)] public class ExportDefinitionClass : ExportDefinition, IExportDefinition Explicit Interface Implementations IExportDefinition.Content Declaration public virtual string IExportDefinition.Content { get; } Returns Type Description System.String IExportDefinition.Delete() Declaration public virtual void IExportDefinition.Delete() IExportDefinition.Description Declaration public virtual string IExportDefinition.Description { get; } Returns Type Description System.String IExportDefinition.IsSytemObject Declaration public virtual bool IExportDefinition.IsSytemObject { get; } Returns Type Description System.Boolean IExportDefinition.Load(String) Declaration public virtual void IExportDefinition.Load(string FileName) Parameters Type Name Description System.String FileName IExportDefinition.Name Declaration public virtual string IExportDefinition.Name { get; } Returns Type Description System.String IExportDefinition.Owner Declaration public virtual string IExportDefinition.Owner { get; } Returns Type Description System.String IExportDefinition.ProcessExport(MtTaskType, String, String) Declaration public virtual void IExportDefinition.ProcessExport(MtTaskType Value, string SourceIndex = \"\", string TargetIndex = \"\") Parameters Type Name Description MtTaskType Value System.String SourceIndex System.String TargetIndex IExportDefinition.ReadOnly Declaration public virtual bool IExportDefinition.ReadOnly { get; } Returns Type Description System.Boolean IExportDefinition.Save(String) Declaration public virtual void IExportDefinition.Save(string FileName) Parameters Type Name Description System.String FileName IExportDefinition.StartWizard(String, String, String) Declaration public virtual void IExportDefinition.StartWizard(string XMLFileName, string SourceIndex = \"\", string TargetIndex = \"\") Parameters Type Name Description System.String XMLFileName System.String SourceIndex System.String TargetIndex IExportDefinition.Usability Declaration public virtual mtObjectUsability IExportDefinition.Usability { get; } Returns Type Description mtObjectUsability Implements ExportDefinition IExportDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ExportDefinitions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ExportDefinitions.html",
    "title": "Interface ExportDefinitions",
    "keywords": "Interface ExportDefinitions Inherited Members IExportDefinitions.GetEnumerator() IExportDefinitions.Add(String, String, String) IExportDefinitions.StartWizard() IExportDefinitions.Refresh() IExportDefinitions.CheckObjectUsability(String) IExportDefinitions.StartWizardWithIndices(String, String) IExportDefinitions.CheckObjectUsabilityEx(String, Boolean) IExportDefinitions.Item[Object] IExportDefinitions.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"982CB5FB-A8D7-40F6-A90F-11BAF2212E29\")] public interface ExportDefinitions : IExportDefinitions, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ExportDefinitionsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ExportDefinitionsClass.html",
    "title": "Class ExportDefinitionsClass",
    "keywords": "Class ExportDefinitionsClass Inheritance System.Object ExportDefinitionsClass Implements ExportDefinitions IExportDefinitions System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"44EA8A4B-C5AA-42D2-8A14-0EBC15F38A9B\")] [ClassInterface(ClassInterfaceType.None)] public class ExportDefinitionsClass : ExportDefinitions, IExportDefinitions, IEnumerable Explicit Interface Implementations IExportDefinitions.Add(String, String, String) Declaration public virtual ExportDefinition IExportDefinitions.Add(string Name, string Description, string FileName) Parameters Type Name Description System.String Name System.String Description System.String FileName Returns Type Description ExportDefinition IExportDefinitions.CheckObjectUsability(String) Declaration public virtual mtObjectUsability IExportDefinitions.CheckObjectUsability(string FileName) Parameters Type Name Description System.String FileName Returns Type Description mtObjectUsability IExportDefinitions.CheckObjectUsabilityEx(String, out Boolean) Declaration public virtual mtObjectUsability IExportDefinitions.CheckObjectUsabilityEx(string FileName, out bool newerVersion) Parameters Type Name Description System.String FileName System.Boolean newerVersion Returns Type Description mtObjectUsability IExportDefinitions.Count Declaration public virtual int IExportDefinitions.Count { get; } Returns Type Description System.Int32 IExportDefinitions.GetEnumerator() Declaration public virtual IEnumerator IExportDefinitions.GetEnumerator() Returns Type Description System.Collections.IEnumerator IExportDefinitions.Item[Object] Declaration public virtual ExportDefinition IExportDefinitions.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description ExportDefinition IExportDefinitions.Refresh() Declaration public virtual void IExportDefinitions.Refresh() IExportDefinitions.StartWizard() Declaration public virtual ExportDefinition IExportDefinitions.StartWizard() Returns Type Description ExportDefinition IExportDefinitions.StartWizardWithIndices(String, String) Declaration public virtual ExportDefinition IExportDefinitions.StartWizardWithIndices(string Source, string Target) Parameters Type Name Description System.String Source System.String Target Returns Type Description ExportDefinition Implements ExportDefinitions IExportDefinitions System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.FilterDefinition.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.FilterDefinition.html",
    "title": "Interface FilterDefinition",
    "keywords": "Interface FilterDefinition Inherited Members IFilterDefinition.StartWizard(String) IFilterDefinition.Delete() IFilterDefinition.Save(String) IFilterDefinition.Load(String) IFilterDefinition.Name IFilterDefinition.Active IFilterDefinition.Description IFilterDefinition.Content IFilterDefinition.ReadOnly IFilterDefinition.ID IFilterDefinition.Owner IFilterDefinition.IsSytemObject IFilterDefinition.Usability Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"C01F2685-E732-4823-BE9C-9BC91D749B11\")] public interface FilterDefinition : IFilterDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.FilterDefinitionClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.FilterDefinitionClass.html",
    "title": "Class FilterDefinitionClass",
    "keywords": "Class FilterDefinitionClass Inheritance System.Object FilterDefinitionClass Implements FilterDefinition IFilterDefinition Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"42260D08-9294-491C-BFFC-12CADFCE6F6D\")] public class FilterDefinitionClass : FilterDefinition, IFilterDefinition Explicit Interface Implementations IFilterDefinition.Active Declaration public virtual bool IFilterDefinition.Active { get; set; } Returns Type Description System.Boolean IFilterDefinition.Content Declaration public virtual string IFilterDefinition.Content { get; } Returns Type Description System.String IFilterDefinition.Delete() Declaration public virtual void IFilterDefinition.Delete() IFilterDefinition.Description Declaration public virtual string IFilterDefinition.Description { get; } Returns Type Description System.String IFilterDefinition.ID Declaration public virtual int IFilterDefinition.ID { get; } Returns Type Description System.Int32 IFilterDefinition.IsSytemObject Declaration public virtual bool IFilterDefinition.IsSytemObject { get; } Returns Type Description System.Boolean IFilterDefinition.Load(String) Declaration public virtual void IFilterDefinition.Load(string FileName) Parameters Type Name Description System.String FileName IFilterDefinition.Name Declaration public virtual string IFilterDefinition.Name { get; } Returns Type Description System.String IFilterDefinition.Owner Declaration public virtual string IFilterDefinition.Owner { get; } Returns Type Description System.String IFilterDefinition.ReadOnly Declaration public virtual bool IFilterDefinition.ReadOnly { get; } Returns Type Description System.Boolean IFilterDefinition.Save(String) Declaration public virtual void IFilterDefinition.Save(string FileName) Parameters Type Name Description System.String FileName IFilterDefinition.StartWizard(String) Declaration public virtual void IFilterDefinition.StartWizard(string XMLFileName) Parameters Type Name Description System.String XMLFileName IFilterDefinition.Usability Declaration public virtual mtObjectUsability IFilterDefinition.Usability { get; } Returns Type Description mtObjectUsability Implements FilterDefinition IFilterDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.FilterDefinitions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.FilterDefinitions.html",
    "title": "Interface FilterDefinitions",
    "keywords": "Interface FilterDefinitions Inherited Members IFilterDefinitions.GetEnumerator() IFilterDefinitions.Add(String, String, String) IFilterDefinitions.StartWizard() IFilterDefinitions.Refresh() IFilterDefinitions.CheckObjectUsability(String) IFilterDefinitions.CheckObjectUsabilityEx(String, Boolean) IFilterDefinitions.Item[Object] IFilterDefinitions.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"6397A935-6276-4CD8-A294-CE796A929A90\")] public interface FilterDefinitions : IFilterDefinitions, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.FilterDefinitionsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.FilterDefinitionsClass.html",
    "title": "Class FilterDefinitionsClass",
    "keywords": "Class FilterDefinitionsClass Inheritance System.Object FilterDefinitionsClass Implements FilterDefinitions IFilterDefinitions System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"CA1D07C1-3403-4675-8B4A-A68D9A01820E\")] public class FilterDefinitionsClass : FilterDefinitions, IFilterDefinitions, IEnumerable Explicit Interface Implementations IFilterDefinitions.Add(String, String, String) Declaration public virtual FilterDefinition IFilterDefinitions.Add(string Name, string Description, string FileName) Parameters Type Name Description System.String Name System.String Description System.String FileName Returns Type Description FilterDefinition IFilterDefinitions.CheckObjectUsability(String) Declaration public virtual mtObjectUsability IFilterDefinitions.CheckObjectUsability(string FileName) Parameters Type Name Description System.String FileName Returns Type Description mtObjectUsability IFilterDefinitions.CheckObjectUsabilityEx(String, out Boolean) Declaration public virtual mtObjectUsability IFilterDefinitions.CheckObjectUsabilityEx(string FileName, out bool newerVersion) Parameters Type Name Description System.String FileName System.Boolean newerVersion Returns Type Description mtObjectUsability IFilterDefinitions.Count Declaration public virtual int IFilterDefinitions.Count { get; } Returns Type Description System.Int32 IFilterDefinitions.GetEnumerator() Declaration public virtual IEnumerator IFilterDefinitions.GetEnumerator() Returns Type Description System.Collections.IEnumerator IFilterDefinitions.Item[Object] Declaration public virtual FilterDefinition IFilterDefinitions.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description FilterDefinition IFilterDefinitions.Refresh() Declaration public virtual void IFilterDefinitions.Refresh() IFilterDefinitions.StartWizard() Declaration public virtual FilterDefinition IFilterDefinitions.StartWizard() Returns Type Description FilterDefinition Implements FilterDefinitions IFilterDefinitions System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.HitTerm.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.HitTerm.html",
    "title": "Interface HitTerm",
    "keywords": "Interface HitTerm Inherited Members IHitTerm.Text IHitTerm.ParentEntryID IHitTerm.SearchScore IHitTerm.Index IHitTerm.Termbase Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"0DE38117-86FA-49CE-9242-B85C90568620\")] public interface HitTerm : IHitTerm"
  },
  "api/Sdl.MultiTerm.TMO.Interop.HitTermClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.HitTermClass.html",
    "title": "Class HitTermClass",
    "keywords": "Class HitTermClass Inheritance System.Object HitTermClass Implements HitTerm IHitTerm Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"A4F81D0C-9DE1-42C2-9984-852D04FAB29E\")] [ClassInterface(ClassInterfaceType.None)] public class HitTermClass : HitTerm, IHitTerm Explicit Interface Implementations IHitTerm.Index Declaration public virtual string IHitTerm.Index { get; } Returns Type Description System.String IHitTerm.ParentEntryID Declaration public virtual string IHitTerm.ParentEntryID { get; } Returns Type Description System.String IHitTerm.SearchScore Declaration public virtual int IHitTerm.SearchScore { get; } Returns Type Description System.Int32 IHitTerm.Termbase Declaration public virtual string IHitTerm.Termbase { get; } Returns Type Description System.String IHitTerm.Text Declaration public virtual string IHitTerm.Text { get; } Returns Type Description System.String Implements HitTerm IHitTerm"
  },
  "api/Sdl.MultiTerm.TMO.Interop.HitTerms.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.HitTerms.html",
    "title": "Interface HitTerms",
    "keywords": "Interface HitTerms Inherited Members IHitTerms.GetEnumerator() IHitTerms.Item[Object] IHitTerms.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"13E24CD4-3484-4B88-983C-32E061C0320A\")] public interface HitTerms : IHitTerms, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.HitTermsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.HitTermsClass.html",
    "title": "Class HitTermsClass",
    "keywords": "Class HitTermsClass Inheritance System.Object HitTermsClass Implements HitTerms IHitTerms System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"276BEB50-B2E0-407D-9879-B14FEB5E149C\")] public class HitTermsClass : HitTerms, IHitTerms, IEnumerable Explicit Interface Implementations IHitTerms.Count Declaration public virtual int IHitTerms.Count { get; } Returns Type Description System.Int32 IHitTerms.GetEnumerator() Declaration public virtual IEnumerator IHitTerms.GetEnumerator() Returns Type Description System.Collections.IEnumerator IHitTerms.Item[Object] Declaration public virtual HitTerm IHitTerms.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description HitTerm Implements HitTerms IHitTerms System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.Homonym.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.Homonym.html",
    "title": "Interface Homonym",
    "keywords": "Interface Homonym Inherited Members IHomonym.Term IHomonym.Index IHomonym.EntryID Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"47F0DBF4-ECE4-41AD-8F88-799B41E6D5D9\")] public interface Homonym : IHomonym"
  },
  "api/Sdl.MultiTerm.TMO.Interop.HomonymClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.HomonymClass.html",
    "title": "Class HomonymClass",
    "keywords": "Class HomonymClass Inheritance System.Object HomonymClass Implements Homonym IHomonym Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"E0EAAA49-38CA-429E-9D1C-5675270554C1\")] public class HomonymClass : Homonym, IHomonym Explicit Interface Implementations IHomonym.EntryID Declaration public virtual int IHomonym.EntryID { get; } Returns Type Description System.Int32 IHomonym.Index Declaration public virtual string IHomonym.Index { get; } Returns Type Description System.String IHomonym.Term Declaration public virtual string IHomonym.Term { get; } Returns Type Description System.String Implements Homonym IHomonym"
  },
  "api/Sdl.MultiTerm.TMO.Interop.Homonyms.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.Homonyms.html",
    "title": "Interface Homonyms",
    "keywords": "Interface Homonyms Inherited Members IHomonyms.GetEnumerator() IHomonyms.Item[Object] IHomonyms.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"C3197018-50AA-4F34-96F8-74EDF016628C\")] public interface Homonyms : IHomonyms, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.HomonymsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.HomonymsClass.html",
    "title": "Class HomonymsClass",
    "keywords": "Class HomonymsClass Inheritance System.Object HomonymsClass Implements Homonyms IHomonyms System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"F9B76AB2-E1EF-48EF-9ED2-5F05737B7EAD\")] public class HomonymsClass : Homonyms, IHomonyms, IEnumerable Explicit Interface Implementations IHomonyms.Count Declaration public virtual int IHomonyms.Count { get; } Returns Type Description System.Int32 IHomonyms.GetEnumerator() Declaration public virtual IEnumerator IHomonyms.GetEnumerator() Returns Type Description System.Collections.IEnumerator IHomonyms.Item[Object] Declaration public virtual Homonym IHomonyms.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description Homonym Implements Homonyms IHomonyms System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.html",
    "title": "Namespace Sdl.MultiTerm.TMO.Interop",
    "keywords": "Namespace Sdl.MultiTerm.TMO.Interop Classes ApplicationClass DescriptiveFieldClass DescriptiveFieldsClass EntriesClass EntryClass EntryClassesPermissionsClass EntryClassPermissionsClass EntryContentClass EntryFieldClass EntryFieldsClass EntryIDsClass EntryIndexClass EntryIndexesClass ExportDefinitionClass ExportDefinitionsClass FilterDefinitionClass FilterDefinitionsClass HitTermClass HitTermsClass HomonymClass HomonymsClass ImportDefinitionClass ImportDefinitionsClass IncompleteEntriesClass IndexClass IndexesClass IndexesPermissionsClass IndexPermissionsClass InputModelDefinitionClass InputModelDefinitionsClass LayoutDefinitionClass LayoutDefinitionsClass LockedEntriesClass LockedEntryInfoClass LockedEntryInfosClass MultiSearchClass PicklistValuesClass SearchInfoClass SearchInfosClass TermbaseAccessPermissionsClass TermbaseBrowserClass TermbaseClass TermbaseDefinitionClass TermbaseInformationClass TermbaseRepositoryClass TermbasesClass TermbaseSearchClass Interfaces Application DescriptiveField DescriptiveFields Entries Entry EntryClassesPermissions EntryClassPermissions EntryContent EntryField EntryFields EntryIDs EntryIndex EntryIndexes ExportDefinition ExportDefinitions FilterDefinition FilterDefinitions HitTerm HitTerms Homonym Homonyms IApplication IDescriptiveField IDescriptiveFields IEntries IEntry IEntryClassesPermissions IEntryClassPermissions IEntryContent IEntryField IEntryFields IEntryIDs IEntryIndex IEntryIndexes IExportDefinition IExportDefinitions IFilterDefinition IFilterDefinitions IHitTerm IHitTerms IHomonym IHomonyms IImportDefinition IImportDefinitions IIncompleteEntries IIndex IIndexes IIndexesPermissions IIndexPermissions IInputModelDefinition IInputModelDefinitions ILayoutDefinition ILayoutDefinitions ILockedEntries ILockedEntryInfo ILockedEntryInfos ImportDefinition ImportDefinitions IMultiSearch IncompleteEntries Index Indexes IndexesPermissions IndexPermissions InputModelDefinition InputModelDefinitions IPicklistValues ISearchInfo ISearchInfos ITermbase ITermbaseAccessPermissions ITermbaseBrowser ITermbaseDefinition ITermbaseInformation ITermbaseRepository ITermbases ITermbaseSearch LayoutDefinition LayoutDefinitions LockedEntries LockedEntryInfo LockedEntryInfos MultiSearch PicklistValues SearchInfo SearchInfos Termbase TermbaseAccessPermissions TermbaseBrowser TermbaseDefinition TermbaseInformation TermbaseRepository Termbases TermbaseSearch Enums __MIDL___MIDL_itf_MTTMO2_0000_0000_0002 CredentialsPersistOption MtBrowseDirection MtCommunicationType MtDatabaseType MtFieldLevel MtFieldType MtIndexGuessing MtLockingState mtObjectUsability MtSearchDirection MtSearchType MtTaskType MtUserType"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IApplication.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IApplication.html",
    "title": "Interface IApplication",
    "keywords": "Interface IApplication Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"CACFF5D6-C449-464A-88A0-2F2D849A0AE3\")] public interface IApplication Properties LocalRepository Declaration TermbaseRepository LocalRepository { get; } Property Value Type Description TermbaseRepository MultiSearch Declaration MultiSearch MultiSearch { get; } Property Value Type Description MultiSearch ServerRepository Declaration TermbaseRepository ServerRepository { get; } Property Value Type Description TermbaseRepository"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IDescriptiveField.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IDescriptiveField.html",
    "title": "Interface IDescriptiveField",
    "keywords": "Interface IDescriptiveField Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"EB597BE7-1BD7-4984-B9FB-6E0308DE4D22\")] public interface IDescriptiveField Properties Label Declaration string Label { get; } Property Value Type Description System.String Level Declaration MtFieldLevel Level { get; } Property Value Type Description MtFieldLevel Mandatory Declaration bool Mandatory { get; } Property Value Type Description System.Boolean Multiple Declaration bool Multiple { get; } Property Value Type Description System.Boolean PicklistValues Declaration PicklistValues PicklistValues { get; } Property Value Type Description PicklistValues Type Declaration MtFieldType Type { get; } Property Value Type Description MtFieldType"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IDescriptiveFields.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IDescriptiveFields.html",
    "title": "Interface IDescriptiveFields",
    "keywords": "Interface IDescriptiveFields Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"D086110E-03EE-4E5E-9516-C3F4402B7DE7\")] public interface IDescriptiveFields : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration DescriptiveField this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description DescriptiveField Methods GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IEntries.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IEntries.html",
    "title": "Interface IEntries",
    "keywords": "Interface IEntries Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"2C2B904C-3E14-4C3D-BD80-D9CF5E50070D\")] public interface IEntries Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Methods ActiveFilterHasChanged() Declaration void ActiveFilterHasChanged() GetCrossLinkedEntry(Object, String, Int32) Declaration string GetCrossLinkedEntry(object Index, string Term, int CurrentEntryId) Parameters Type Name Description System.Object Index System.String Term System.Int32 CurrentEntryId Returns Type Description System.String GetEntryIDs() Declaration EntryIDs GetEntryIDs() Returns Type Description EntryIDs Item(Int32) Declaration Entry Item(int EntryID) Parameters Type Name Description System.Int32 EntryID Returns Type Description Entry New(String, Boolean) Declaration Entry New(string EntryXML, bool Incomplete) Parameters Type Name Description System.String EntryXML System.Boolean Incomplete Returns Type Description Entry ReloadLayout() Declaration void ReloadLayout() ReloadTermbaseDefinition() Declaration void ReloadTermbaseDefinition()"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IEntry.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IEntry.html",
    "title": "Interface IEntry",
    "keywords": "Interface IEntry Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"7C71928D-1851-49CE-8A1C-47A15840E4D2\")] public interface IEntry Properties _FirstDisplayedTerm Declaration string _FirstDisplayedTerm { set; } Property Value Type Description System.String Content Declaration EntryContent Content { get; } Property Value Type Description EntryContent ID Declaration int ID { get; } Property Value Type Description System.Int32 IsComplete Declaration bool IsComplete { get; } Property Value Type Description System.Boolean IsRtf Declaration int IsRtf { get; } Property Value Type Description System.Int32 LockedBy Declaration string LockedBy { get; } Property Value Type Description System.String LockedDate Declaration DateTime LockedDate { get; } Property Value Type Description System.DateTime Methods ApplyExport(ExportDefinition, String, String) Declaration string ApplyExport(ExportDefinition ExportDefinition, string SourceIndex = \"\", string TargetIndex = \"\") Parameters Type Name Description ExportDefinition ExportDefinition System.String SourceIndex System.String TargetIndex Returns Type Description System.String ApplyExportWithMultimedia(ExportDefinition, String, String, String, String) Declaration string ApplyExportWithMultimedia(ExportDefinition ExportDefinition, string SourceIndex, string TargetIndex, string DestFolderPath, string ExportFileName) Parameters Type Name Description ExportDefinition ExportDefinition System.String SourceIndex System.String TargetIndex System.String DestFolderPath System.String ExportFileName Returns Type Description System.String ApplyFilter(FilterDefinition, String, String) Declaration bool ApplyFilter(FilterDefinition FilterObject, string SourceIndex = \"\", string TargetIndex = \"\") Parameters Type Name Description FilterDefinition FilterObject System.String SourceIndex System.String TargetIndex Returns Type Description System.Boolean ApplyFilterForSingleTerm(FilterDefinition, String, String, String) Declaration bool ApplyFilterForSingleTerm(FilterDefinition FilterObject, string SourceIndex, string TargetIndex, string Term) Parameters Type Name Description FilterDefinition FilterObject System.String SourceIndex System.String TargetIndex System.String Term Returns Type Description System.Boolean ApplyLayout(String, String, String, LayoutDefinition) Declaration string ApplyLayout(string SourceIndex, string TargetIndex, string HighlightText, LayoutDefinition LayoutDefinitionObject) Parameters Type Name Description System.String SourceIndex System.String TargetIndex System.String HighlightText LayoutDefinition LayoutDefinitionObject Returns Type Description System.String CanCopy() Declaration bool CanCopy() Returns Type Description System.Boolean CanDelete() Declaration bool CanDelete() Returns Type Description System.Boolean CanMerge() Declaration bool CanMerge() Returns Type Description System.Boolean Delete() Declaration void Delete() ExtractMultimediaToTemp() Declaration void ExtractMultimediaToTemp() LockEntry(MtLockingState) Declaration void LockEntry(MtLockingState LockState) Parameters Type Name Description MtLockingState LockState Merge(Entry) Declaration void Merge(Entry MergeWithEntry) Parameters Type Name Description Entry MergeWithEntry MergeEx(String) Declaration void MergeEx(string MergeWithEntry) Parameters Type Name Description System.String MergeWithEntry Save() Declaration void Save()"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IEntryClassesPermissions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IEntryClassesPermissions.html",
    "title": "Interface IEntryClassesPermissions",
    "keywords": "Interface IEntryClassesPermissions Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"4D2B71BC-EBBB-4F39-B4F7-4004529D7716\")] public interface IEntryClassesPermissions : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration EntryClassPermissions this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description EntryClassPermissions XML Declaration string XML { get; } Property Value Type Description System.String Methods GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IEntryClassPermissions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IEntryClassPermissions.html",
    "title": "Interface IEntryClassPermissions",
    "keywords": "Interface IEntryClassPermissions Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"D5E5C9CF-A81D-407D-AFAD-BFF44C38D2A3\")] public interface IEntryClassPermissions Properties _id Declaration int _id { get; } Property Value Type Description System.Int32 IsDefault Declaration bool IsDefault { get; } Property Value Type Description System.Boolean Name Declaration string Name { get; } Property Value Type Description System.String Read Declaration bool Read { get; } Property Value Type Description System.Boolean Write Declaration bool Write { get; } Property Value Type Description System.Boolean"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IEntryContent.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IEntryContent.html",
    "title": "Interface IEntryContent",
    "keywords": "Interface IEntryContent Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"80CC23D4-00D7-4CE6-B97A-AB4C9EBAC776\")] public interface IEntryContent Properties AutoRefresh Declaration bool AutoRefresh { get; set; } Property Value Type Description System.Boolean Content Declaration string Content { get; set; } Property Value Type Description System.String EntryClass Declaration string EntryClass { get; } Property Value Type Description System.String EntryIndexes Declaration EntryIndexes EntryIndexes { get; } Property Value Type Description EntryIndexes Fields Declaration EntryFields Fields { get; } Property Value Type Description EntryFields Methods GetContentForOneSourceTerm(String, String) Declaration string GetContentForOneSourceTerm(string SourceIndex, string Term) Parameters Type Name Description System.String SourceIndex System.String Term Returns Type Description System.String Refresh() Declaration void Refresh() Update() Declaration void Update()"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IEntryField.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IEntryField.html",
    "title": "Interface IEntryField",
    "keywords": "Interface IEntryField Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"CCC1C515-B9F8-41CF-B21D-BFC48674D339\")] public interface IEntryField Properties Name Declaration string Name { get; } Property Value Type Description System.String ReadOnly Declaration bool ReadOnly { get; } Property Value Type Description System.Boolean Value Declaration string Value { get; set; } Property Value Type Description System.String"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IEntryFields.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IEntryFields.html",
    "title": "Interface IEntryFields",
    "keywords": "Interface IEntryFields Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"BCE64559-7892-4368-B3C2-6923D2B40BD2\")] public interface IEntryFields : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration EntryField this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description EntryField Methods Add(String, Object) Declaration EntryField Add(string FieldName, object Value) Parameters Type Name Description System.String FieldName System.Object Value Returns Type Description EntryField GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IEntryIDs.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IEntryIDs.html",
    "title": "Interface IEntryIDs",
    "keywords": "Interface IEntryIDs Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"428EB7AC-6A77-461E-9F9D-96A8A3B03BF5\")] public interface IEntryIDs : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Int32] Declaration string this[int Index] { get; } Parameters Type Name Description System.Int32 Index Property Value Type Description System.String Methods GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IEntryIndex.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IEntryIndex.html",
    "title": "Interface IEntryIndex",
    "keywords": "Interface IEntryIndex Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"2FF47005-1588-4099-95B5-B957B513A4E3\")] public interface IEntryIndex Properties IndexFields Declaration EntryFields IndexFields { get; } Property Value Type Description EntryFields IndexName Declaration string IndexName { get; } Property Value Type Description System.String ReadOnly Declaration bool ReadOnly { get; } Property Value Type Description System.Boolean Term Declaration string Term { get; set; } Property Value Type Description System.String TermFields Declaration EntryFields TermFields { get; } Property Value Type Description EntryFields"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IEntryIndexes.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IEntryIndexes.html",
    "title": "Interface IEntryIndexes",
    "keywords": "Interface IEntryIndexes Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"D3A93CA9-D179-432B-BDF3-07296CBD4C00\")] public interface IEntryIndexes : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration EntryIndex this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description EntryIndex Methods Add(String, String) Declaration EntryIndex Add(string IndexName, string Term) Parameters Type Name Description System.String IndexName System.String Term Returns Type Description EntryIndex GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IExportDefinition.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IExportDefinition.html",
    "title": "Interface IExportDefinition",
    "keywords": "Interface IExportDefinition Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"0E05344B-D4A4-4EB9-9762-49ADBC0AAB26\")] public interface IExportDefinition Properties Content Declaration string Content { get; } Property Value Type Description System.String Description Declaration string Description { get; } Property Value Type Description System.String IsSytemObject Declaration bool IsSytemObject { get; } Property Value Type Description System.Boolean Name Declaration string Name { get; } Property Value Type Description System.String Owner Declaration string Owner { get; } Property Value Type Description System.String ReadOnly Declaration bool ReadOnly { get; } Property Value Type Description System.Boolean Usability Declaration mtObjectUsability Usability { get; } Property Value Type Description mtObjectUsability Methods Delete() Declaration void Delete() Load(String) Declaration void Load(string FileName) Parameters Type Name Description System.String FileName ProcessExport(MtTaskType, String, String) Declaration void ProcessExport(MtTaskType Value, string SourceIndex = \"\", string TargetIndex = \"\") Parameters Type Name Description MtTaskType Value System.String SourceIndex System.String TargetIndex Save(String) Declaration void Save(string FileName) Parameters Type Name Description System.String FileName StartWizard(String, String, String) Declaration void StartWizard(string XMLFileName, string SourceIndex = \"\", string TargetIndex = \"\") Parameters Type Name Description System.String XMLFileName System.String SourceIndex System.String TargetIndex"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IExportDefinitions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IExportDefinitions.html",
    "title": "Interface IExportDefinitions",
    "keywords": "Interface IExportDefinitions Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"982CB5FB-A8D7-40F6-A90F-11BAF2212E29\")] public interface IExportDefinitions : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration ExportDefinition this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description ExportDefinition Methods Add(String, String, String) Declaration ExportDefinition Add(string Name, string Description, string FileName) Parameters Type Name Description System.String Name System.String Description System.String FileName Returns Type Description ExportDefinition CheckObjectUsability(String) Declaration mtObjectUsability CheckObjectUsability(string FileName) Parameters Type Name Description System.String FileName Returns Type Description mtObjectUsability CheckObjectUsabilityEx(String, out Boolean) Declaration mtObjectUsability CheckObjectUsabilityEx(string FileName, out bool newerVersion) Parameters Type Name Description System.String FileName System.Boolean newerVersion Returns Type Description mtObjectUsability GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator Refresh() Declaration void Refresh() StartWizard() Declaration ExportDefinition StartWizard() Returns Type Description ExportDefinition StartWizardWithIndices(String, String) Declaration ExportDefinition StartWizardWithIndices(string Source, string Target) Parameters Type Name Description System.String Source System.String Target Returns Type Description ExportDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IFilterDefinition.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IFilterDefinition.html",
    "title": "Interface IFilterDefinition",
    "keywords": "Interface IFilterDefinition Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"C01F2685-E732-4823-BE9C-9BC91D749B11\")] public interface IFilterDefinition Properties Active Declaration bool Active { get; set; } Property Value Type Description System.Boolean Content Declaration string Content { get; } Property Value Type Description System.String Description Declaration string Description { get; } Property Value Type Description System.String ID Declaration int ID { get; } Property Value Type Description System.Int32 IsSytemObject Declaration bool IsSytemObject { get; } Property Value Type Description System.Boolean Name Declaration string Name { get; } Property Value Type Description System.String Owner Declaration string Owner { get; } Property Value Type Description System.String ReadOnly Declaration bool ReadOnly { get; } Property Value Type Description System.Boolean Usability Declaration mtObjectUsability Usability { get; } Property Value Type Description mtObjectUsability Methods Delete() Declaration void Delete() Load(String) Declaration void Load(string FileName) Parameters Type Name Description System.String FileName Save(String) Declaration void Save(string FileName) Parameters Type Name Description System.String FileName StartWizard(String) Declaration void StartWizard(string XMLFileName) Parameters Type Name Description System.String XMLFileName"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IFilterDefinitions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IFilterDefinitions.html",
    "title": "Interface IFilterDefinitions",
    "keywords": "Interface IFilterDefinitions Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"6397A935-6276-4CD8-A294-CE796A929A90\")] public interface IFilterDefinitions : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration FilterDefinition this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description FilterDefinition Methods Add(String, String, String) Declaration FilterDefinition Add(string Name, string Description, string FileName) Parameters Type Name Description System.String Name System.String Description System.String FileName Returns Type Description FilterDefinition CheckObjectUsability(String) Declaration mtObjectUsability CheckObjectUsability(string FileName) Parameters Type Name Description System.String FileName Returns Type Description mtObjectUsability CheckObjectUsabilityEx(String, out Boolean) Declaration mtObjectUsability CheckObjectUsabilityEx(string FileName, out bool newerVersion) Parameters Type Name Description System.String FileName System.Boolean newerVersion Returns Type Description mtObjectUsability GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator Refresh() Declaration void Refresh() StartWizard() Declaration FilterDefinition StartWizard() Returns Type Description FilterDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IHitTerm.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IHitTerm.html",
    "title": "Interface IHitTerm",
    "keywords": "Interface IHitTerm Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"0DE38117-86FA-49CE-9242-B85C90568620\")] public interface IHitTerm Properties Index Declaration string Index { get; } Property Value Type Description System.String ParentEntryID Declaration string ParentEntryID { get; } Property Value Type Description System.String SearchScore Declaration int SearchScore { get; } Property Value Type Description System.Int32 Termbase Declaration string Termbase { get; } Property Value Type Description System.String Text Declaration string Text { get; } Property Value Type Description System.String"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IHitTerms.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IHitTerms.html",
    "title": "Interface IHitTerms",
    "keywords": "Interface IHitTerms Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"13E24CD4-3484-4B88-983C-32E061C0320A\")] public interface IHitTerms : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration HitTerm this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description HitTerm Methods GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IHomonym.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IHomonym.html",
    "title": "Interface IHomonym",
    "keywords": "Interface IHomonym Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"47F0DBF4-ECE4-41AD-8F88-799B41E6D5D9\")] public interface IHomonym Properties EntryID Declaration int EntryID { get; } Property Value Type Description System.Int32 Index Declaration string Index { get; } Property Value Type Description System.String Term Declaration string Term { get; } Property Value Type Description System.String"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IHomonyms.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IHomonyms.html",
    "title": "Interface IHomonyms",
    "keywords": "Interface IHomonyms Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"C3197018-50AA-4F34-96F8-74EDF016628C\")] public interface IHomonyms : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration Homonym this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description Homonym Methods GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IImportDefinition.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IImportDefinition.html",
    "title": "Interface IImportDefinition",
    "keywords": "Interface IImportDefinition Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"91E53329-70EE-402B-884C-E37434B09D34\")] public interface IImportDefinition Properties Content Declaration string Content { get; } Property Value Type Description System.String Description Declaration string Description { get; } Property Value Type Description System.String IsSytemObject Declaration bool IsSytemObject { get; } Property Value Type Description System.Boolean Name Declaration string Name { get; } Property Value Type Description System.String Owner Declaration string Owner { get; } Property Value Type Description System.String ReadOnly Declaration bool ReadOnly { get; } Property Value Type Description System.Boolean Usability Declaration mtObjectUsability Usability { get; } Property Value Type Description mtObjectUsability Methods Delete() Declaration void Delete() Load(String) Declaration void Load(string FileName) Parameters Type Name Description System.String FileName ProcessImport(MtTaskType, String, String) Declaration void ProcessImport(MtTaskType Value, string SourceIndex = \"\", string TargetIndex = \"\") Parameters Type Name Description MtTaskType Value System.String SourceIndex System.String TargetIndex Save(String) Declaration void Save(string FileName) Parameters Type Name Description System.String FileName StartWizard(String) Declaration void StartWizard(string XMLFileName) Parameters Type Name Description System.String XMLFileName"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IImportDefinitions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IImportDefinitions.html",
    "title": "Interface IImportDefinitions",
    "keywords": "Interface IImportDefinitions Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"C4CD9A64-7575-4F8C-9B04-D477E05C17CA\")] public interface IImportDefinitions : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration ImportDefinition this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description ImportDefinition Methods Add(String, String, String) Declaration ImportDefinition Add(string Name, string Description, string FileName) Parameters Type Name Description System.String Name System.String Description System.String FileName Returns Type Description ImportDefinition CheckObjectUsability(String) Declaration mtObjectUsability CheckObjectUsability(string FileName) Parameters Type Name Description System.String FileName Returns Type Description mtObjectUsability CheckObjectUsabilityEx(String, out Boolean) Declaration mtObjectUsability CheckObjectUsabilityEx(string FileName, out bool newerVersion) Parameters Type Name Description System.String FileName System.Boolean newerVersion Returns Type Description mtObjectUsability GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator Refresh() Declaration void Refresh() StartWizard(String, String) Declaration ImportDefinition StartWizard(string SourceIndex, string TargetIndex) Parameters Type Name Description System.String SourceIndex System.String TargetIndex Returns Type Description ImportDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IIncompleteEntries.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IIncompleteEntries.html",
    "title": "Interface IIncompleteEntries",
    "keywords": "Interface IIncompleteEntries Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"3179ED04-16DF-4092-A9AE-23E6CE9E98F6\")] public interface IIncompleteEntries : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Int32] Declaration string this[int Index] { get; } Parameters Type Name Description System.Int32 Index Property Value Type Description System.String Methods GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IIndex.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IIndex.html",
    "title": "Interface IIndex",
    "keywords": "Interface IIndex Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"4A3BC576-3C63-49BF-ACBE-B5EA97CDC53C\")] public interface IIndex Properties Fields Declaration DescriptiveFields Fields { get; } Property Value Type Description DescriptiveFields Label Declaration string Label { get; } Property Value Type Description System.String Language Declaration string Language { get; } Property Value Type Description System.String Locale Declaration string Locale { get; } Property Value Type Description System.String TargetOnly Declaration bool TargetOnly { get; } Property Value Type Description System.Boolean TermFields Declaration DescriptiveFields TermFields { get; } Property Value Type Description DescriptiveFields"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IIndexes.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IIndexes.html",
    "title": "Interface IIndexes",
    "keywords": "Interface IIndexes Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"4246B4AF-0092-4B4E-ADE5-C7DA750B2B8E\")] public interface IIndexes : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration Index this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description Index Methods GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IIndexesPermissions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IIndexesPermissions.html",
    "title": "Interface IIndexesPermissions",
    "keywords": "Interface IIndexesPermissions Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"3AB57A8E-2169-426D-92D7-05C1E80D8710\")] public interface IIndexesPermissions : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration IndexPermissions this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description IndexPermissions ReadIndexes Declaration string ReadIndexes { get; } Property Value Type Description System.String WriteIndexes Declaration string WriteIndexes { get; } Property Value Type Description System.String Methods GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IIndexPermissions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IIndexPermissions.html",
    "title": "Interface IIndexPermissions",
    "keywords": "Interface IIndexPermissions Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"B960E41C-1B46-4A58-BDBC-BA05F80AB96D\")] public interface IIndexPermissions Properties Label Declaration string Label { get; } Property Value Type Description System.String Read Declaration bool Read { get; } Property Value Type Description System.Boolean Remove Declaration bool Remove { get; } Property Value Type Description System.Boolean Write Declaration bool Write { get; } Property Value Type Description System.Boolean"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IInputModelDefinition.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IInputModelDefinition.html",
    "title": "Interface IInputModelDefinition",
    "keywords": "Interface IInputModelDefinition Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"6D2C1DA7-B5A3-4859-967A-F6DE4144A22B\")] public interface IInputModelDefinition Properties Content Declaration string Content { get; } Property Value Type Description System.String Description Declaration string Description { get; } Property Value Type Description System.String IsSytemObject Declaration bool IsSytemObject { get; } Property Value Type Description System.Boolean Name Declaration string Name { get; } Property Value Type Description System.String Owner Declaration string Owner { get; } Property Value Type Description System.String ReadOnly Declaration bool ReadOnly { get; } Property Value Type Description System.Boolean Usability Declaration mtObjectUsability Usability { get; } Property Value Type Description mtObjectUsability Methods _GetSchema() Declaration string _GetSchema() Returns Type Description System.String Delete() Declaration void Delete() GetDummyEntry() Declaration string GetDummyEntry() Returns Type Description System.String Load(String) Declaration void Load(string FileName) Parameters Type Name Description System.String FileName Save(String) Declaration void Save(string FileName) Parameters Type Name Description System.String FileName StartWizard(String) Declaration void StartWizard(string XMLFileName) Parameters Type Name Description System.String XMLFileName"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IInputModelDefinitions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IInputModelDefinitions.html",
    "title": "Interface IInputModelDefinitions",
    "keywords": "Interface IInputModelDefinitions Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"A338AFA8-DECA-4441-8B15-3A8DBA80A9BF\")] public interface IInputModelDefinitions : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration InputModelDefinition this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description InputModelDefinition Methods Add(String, String, String) Declaration InputModelDefinition Add(string Name, string Description, string FileName) Parameters Type Name Description System.String Name System.String Description System.String FileName Returns Type Description InputModelDefinition CheckObjectUsability(String) Declaration mtObjectUsability CheckObjectUsability(string FileName) Parameters Type Name Description System.String FileName Returns Type Description mtObjectUsability CheckObjectUsabilityEx(String, out Boolean) Declaration mtObjectUsability CheckObjectUsabilityEx(string FileName, out bool newerVersion) Parameters Type Name Description System.String FileName System.Boolean newerVersion Returns Type Description mtObjectUsability GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator Refresh() Declaration void Refresh() StartWizard() Declaration InputModelDefinition StartWizard() Returns Type Description InputModelDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ILayoutDefinition.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ILayoutDefinition.html",
    "title": "Interface ILayoutDefinition",
    "keywords": "Interface ILayoutDefinition Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"3D875F6B-68CF-49DB-9DAE-D953C6F1AE81\")] public interface ILayoutDefinition Properties Content Declaration string Content { get; } Property Value Type Description System.String Description Declaration string Description { get; } Property Value Type Description System.String ID Declaration int ID { get; } Property Value Type Description System.Int32 IsSytemObject Declaration bool IsSytemObject { get; } Property Value Type Description System.Boolean Name Declaration string Name { get; } Property Value Type Description System.String Owner Declaration string Owner { get; } Property Value Type Description System.String ReadOnly Declaration bool ReadOnly { get; } Property Value Type Description System.Boolean Usability Declaration mtObjectUsability Usability { get; } Property Value Type Description mtObjectUsability Methods Delete() Declaration void Delete() Load(String) Declaration void Load(string FileName) Parameters Type Name Description System.String FileName Save(String) Declaration void Save(string FileName) Parameters Type Name Description System.String FileName StartWizard(String) Declaration void StartWizard(string XMLFileName) Parameters Type Name Description System.String XMLFileName Update(String) Declaration void Update(string objectXml) Parameters Type Name Description System.String objectXml"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ILayoutDefinitions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ILayoutDefinitions.html",
    "title": "Interface ILayoutDefinitions",
    "keywords": "Interface ILayoutDefinitions Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"522E1B60-8D1F-46AF-974F-578D5F05B805\")] public interface ILayoutDefinitions : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration LayoutDefinition this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description LayoutDefinition Methods Add(String, String, String) Declaration LayoutDefinition Add(string Name, string Description, string FileName) Parameters Type Name Description System.String Name System.String Description System.String FileName Returns Type Description LayoutDefinition CheckObjectUsability(String) Declaration mtObjectUsability CheckObjectUsability(string FileName) Parameters Type Name Description System.String FileName Returns Type Description mtObjectUsability CheckObjectUsabilityEx(String, out Boolean) Declaration mtObjectUsability CheckObjectUsabilityEx(string FileName, out bool newerVersion) Parameters Type Name Description System.String FileName System.Boolean newerVersion Returns Type Description mtObjectUsability GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator Refresh() Declaration void Refresh() StartWizard() Declaration LayoutDefinition StartWizard() Returns Type Description LayoutDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ILockedEntries.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ILockedEntries.html",
    "title": "Interface ILockedEntries",
    "keywords": "Interface ILockedEntries Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"C04D9944-CE8E-478C-9A13-DAEA0CCD1F6C\")] public interface ILockedEntries : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Int32] Declaration string this[int Index] { get; } Parameters Type Name Description System.Int32 Index Property Value Type Description System.String Methods GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ILockedEntryInfo.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ILockedEntryInfo.html",
    "title": "Interface ILockedEntryInfo",
    "keywords": "Interface ILockedEntryInfo Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"FA079926-C4CE-4938-8B40-41DE1BD09861\")] public interface ILockedEntryInfo Properties ConceptId Declaration int ConceptId { get; } Property Value Type Description System.Int32 Date Declaration DateTime Date { get; } Property Value Type Description System.DateTime UserName Declaration string UserName { get; } Property Value Type Description System.String"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ILockedEntryInfos.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ILockedEntryInfos.html",
    "title": "Interface ILockedEntryInfos",
    "keywords": "Interface ILockedEntryInfos Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"946343CD-5A05-4697-B347-8287AC8E8A08\")] public interface ILockedEntryInfos : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration LockedEntryInfo this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description LockedEntryInfo Methods GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ImportDefinition.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ImportDefinition.html",
    "title": "Interface ImportDefinition",
    "keywords": "Interface ImportDefinition Inherited Members IImportDefinition.StartWizard(String) IImportDefinition.Delete() IImportDefinition.ProcessImport(MtTaskType, String, String) IImportDefinition.Save(String) IImportDefinition.Load(String) IImportDefinition.Name IImportDefinition.Description IImportDefinition.Content IImportDefinition.ReadOnly IImportDefinition.Owner IImportDefinition.IsSytemObject IImportDefinition.Usability Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"91E53329-70EE-402B-884C-E37434B09D34\")] public interface ImportDefinition : IImportDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ImportDefinitionClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ImportDefinitionClass.html",
    "title": "Class ImportDefinitionClass",
    "keywords": "Class ImportDefinitionClass Inheritance System.Object ImportDefinitionClass Implements ImportDefinition IImportDefinition Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"7EE60018-8654-44D2-ADD9-0C1122E090EB\")] public class ImportDefinitionClass : ImportDefinition, IImportDefinition Explicit Interface Implementations IImportDefinition.Content Declaration public virtual string IImportDefinition.Content { get; } Returns Type Description System.String IImportDefinition.Delete() Declaration public virtual void IImportDefinition.Delete() IImportDefinition.Description Declaration public virtual string IImportDefinition.Description { get; } Returns Type Description System.String IImportDefinition.IsSytemObject Declaration public virtual bool IImportDefinition.IsSytemObject { get; } Returns Type Description System.Boolean IImportDefinition.Load(String) Declaration public virtual void IImportDefinition.Load(string FileName) Parameters Type Name Description System.String FileName IImportDefinition.Name Declaration public virtual string IImportDefinition.Name { get; } Returns Type Description System.String IImportDefinition.Owner Declaration public virtual string IImportDefinition.Owner { get; } Returns Type Description System.String IImportDefinition.ProcessImport(MtTaskType, String, String) Declaration public virtual void IImportDefinition.ProcessImport(MtTaskType Value, string SourceIndex = \"\", string TargetIndex = \"\") Parameters Type Name Description MtTaskType Value System.String SourceIndex System.String TargetIndex IImportDefinition.ReadOnly Declaration public virtual bool IImportDefinition.ReadOnly { get; } Returns Type Description System.Boolean IImportDefinition.Save(String) Declaration public virtual void IImportDefinition.Save(string FileName) Parameters Type Name Description System.String FileName IImportDefinition.StartWizard(String) Declaration public virtual void IImportDefinition.StartWizard(string XMLFileName) Parameters Type Name Description System.String XMLFileName IImportDefinition.Usability Declaration public virtual mtObjectUsability IImportDefinition.Usability { get; } Returns Type Description mtObjectUsability Implements ImportDefinition IImportDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ImportDefinitions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ImportDefinitions.html",
    "title": "Interface ImportDefinitions",
    "keywords": "Interface ImportDefinitions Inherited Members IImportDefinitions.GetEnumerator() IImportDefinitions.Add(String, String, String) IImportDefinitions.StartWizard(String, String) IImportDefinitions.Refresh() IImportDefinitions.CheckObjectUsability(String) IImportDefinitions.CheckObjectUsabilityEx(String, Boolean) IImportDefinitions.Item[Object] IImportDefinitions.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"C4CD9A64-7575-4F8C-9B04-D477E05C17CA\")] public interface ImportDefinitions : IImportDefinitions, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ImportDefinitionsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ImportDefinitionsClass.html",
    "title": "Class ImportDefinitionsClass",
    "keywords": "Class ImportDefinitionsClass Inheritance System.Object ImportDefinitionsClass Implements ImportDefinitions IImportDefinitions System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"16F0E573-F8B8-4C35-B4D3-391FC66B06E6\")] public class ImportDefinitionsClass : ImportDefinitions, IImportDefinitions, IEnumerable Explicit Interface Implementations IImportDefinitions.Add(String, String, String) Declaration public virtual ImportDefinition IImportDefinitions.Add(string Name, string Description, string FileName) Parameters Type Name Description System.String Name System.String Description System.String FileName Returns Type Description ImportDefinition IImportDefinitions.CheckObjectUsability(String) Declaration public virtual mtObjectUsability IImportDefinitions.CheckObjectUsability(string FileName) Parameters Type Name Description System.String FileName Returns Type Description mtObjectUsability IImportDefinitions.CheckObjectUsabilityEx(String, out Boolean) Declaration public virtual mtObjectUsability IImportDefinitions.CheckObjectUsabilityEx(string FileName, out bool newerVersion) Parameters Type Name Description System.String FileName System.Boolean newerVersion Returns Type Description mtObjectUsability IImportDefinitions.Count Declaration public virtual int IImportDefinitions.Count { get; } Returns Type Description System.Int32 IImportDefinitions.GetEnumerator() Declaration public virtual IEnumerator IImportDefinitions.GetEnumerator() Returns Type Description System.Collections.IEnumerator IImportDefinitions.Item[Object] Declaration public virtual ImportDefinition IImportDefinitions.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description ImportDefinition IImportDefinitions.Refresh() Declaration public virtual void IImportDefinitions.Refresh() IImportDefinitions.StartWizard(String, String) Declaration public virtual ImportDefinition IImportDefinitions.StartWizard(string SourceIndex, string TargetIndex) Parameters Type Name Description System.String SourceIndex System.String TargetIndex Returns Type Description ImportDefinition Implements ImportDefinitions IImportDefinitions System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IMultiSearch.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IMultiSearch.html",
    "title": "Interface IMultiSearch",
    "keywords": "Interface IMultiSearch Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"EE0C2A2B-E349-42C1-B414-CAF2CD91224C\")] public interface IMultiSearch Properties Direction Declaration MtSearchDirection Direction { get; set; } Property Value Type Description MtSearchDirection FullTextSearch Declaration bool FullTextSearch { get; set; } Property Value Type Description System.Boolean FuzzySearch Declaration bool FuzzySearch { get; set; } Property Value Type Description System.Boolean GuessIndex Declaration MtIndexGuessing GuessIndex { get; set; } Property Value Type Description MtIndexGuessing IgnoreFilter Declaration bool IgnoreFilter { get; set; } Property Value Type Description System.Boolean MaximumHits Declaration int MaximumHits { get; set; } Property Value Type Description System.Int32 SearchExpression Declaration string SearchExpression { get; set; } Property Value Type Description System.String SearchInfo Declaration SearchInfos SearchInfo { get; } Property Value Type Description SearchInfos SearchTermbases Declaration string SearchTermbases { get; } Property Value Type Description System.String SearchType Declaration MtSearchType SearchType { get; set; } Property Value Type Description MtSearchType TargetRequired Declaration bool TargetRequired { get; set; } Property Value Type Description System.Boolean Methods AddSearchTermbase(Termbase, String, String) Declaration void AddSearchTermbase(Termbase pxo_termbase, string bstr_source, string bstr_target) Parameters Type Name Description Termbase pxo_termbase System.String bstr_source System.String bstr_target ClearSearchTermbases() Declaration void ClearSearchTermbases() Execute() Declaration HitTerms Execute() Returns Type Description HitTerms"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IncompleteEntries.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IncompleteEntries.html",
    "title": "Interface IncompleteEntries",
    "keywords": "Interface IncompleteEntries Inherited Members IIncompleteEntries.GetEnumerator() IIncompleteEntries.Item[Int32] IIncompleteEntries.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"3179ED04-16DF-4092-A9AE-23E6CE9E98F6\")] public interface IncompleteEntries : IIncompleteEntries, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IncompleteEntriesClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IncompleteEntriesClass.html",
    "title": "Class IncompleteEntriesClass",
    "keywords": "Class IncompleteEntriesClass Inheritance System.Object IncompleteEntriesClass Implements IncompleteEntries IIncompleteEntries System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"8F0C059E-8B4B-437F-9B75-AFF02067E7B8\")] public class IncompleteEntriesClass : IncompleteEntries, IIncompleteEntries, IEnumerable Explicit Interface Implementations IIncompleteEntries.Count Declaration public virtual int IIncompleteEntries.Count { get; } Returns Type Description System.Int32 IIncompleteEntries.GetEnumerator() Declaration public virtual IEnumerator IIncompleteEntries.GetEnumerator() Returns Type Description System.Collections.IEnumerator IIncompleteEntries.Item[Int32] Declaration public virtual string IIncompleteEntries.this[int Index] { get; } Parameters Type Name Description System.Int32 Index Returns Type Description System.String Implements IncompleteEntries IIncompleteEntries System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.Index.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.Index.html",
    "title": "Interface Index",
    "keywords": "Interface Index Inherited Members IIndex.Label IIndex.Language IIndex.Locale IIndex.Fields IIndex.TermFields IIndex.TargetOnly Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"4A3BC576-3C63-49BF-ACBE-B5EA97CDC53C\")] public interface Index : IIndex"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IndexClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IndexClass.html",
    "title": "Class IndexClass",
    "keywords": "Class IndexClass Inheritance System.Object IndexClass Implements Index IIndex Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"B50583D6-F883-4CC1-8A1D-6D89210CB84E\")] [ClassInterface(ClassInterfaceType.None)] public class IndexClass : Index, IIndex Explicit Interface Implementations IIndex.Fields Declaration public virtual DescriptiveFields IIndex.Fields { get; } Returns Type Description DescriptiveFields IIndex.Label Declaration public virtual string IIndex.Label { get; } Returns Type Description System.String IIndex.Language Declaration public virtual string IIndex.Language { get; } Returns Type Description System.String IIndex.Locale Declaration public virtual string IIndex.Locale { get; } Returns Type Description System.String IIndex.TargetOnly Declaration public virtual bool IIndex.TargetOnly { get; } Returns Type Description System.Boolean IIndex.TermFields Declaration public virtual DescriptiveFields IIndex.TermFields { get; } Returns Type Description DescriptiveFields Implements Index IIndex"
  },
  "api/Sdl.MultiTerm.TMO.Interop.Indexes.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.Indexes.html",
    "title": "Interface Indexes",
    "keywords": "Interface Indexes Inherited Members IIndexes.GetEnumerator() IIndexes.Item[Object] IIndexes.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"4246B4AF-0092-4B4E-ADE5-C7DA750B2B8E\")] public interface Indexes : IIndexes, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IndexesClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IndexesClass.html",
    "title": "Class IndexesClass",
    "keywords": "Class IndexesClass Inheritance System.Object IndexesClass Implements Indexes IIndexes System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"253C76A1-E5C4-4A3C-B99B-F0653221449F\")] public class IndexesClass : Indexes, IIndexes, IEnumerable Explicit Interface Implementations IIndexes.Count Declaration public virtual int IIndexes.Count { get; } Returns Type Description System.Int32 IIndexes.GetEnumerator() Declaration public virtual IEnumerator IIndexes.GetEnumerator() Returns Type Description System.Collections.IEnumerator IIndexes.Item[Object] Declaration public virtual Index IIndexes.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description Index Implements Indexes IIndexes System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IndexesPermissions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IndexesPermissions.html",
    "title": "Interface IndexesPermissions",
    "keywords": "Interface IndexesPermissions Inherited Members IIndexesPermissions.GetEnumerator() IIndexesPermissions.Item[Object] IIndexesPermissions.Count IIndexesPermissions.ReadIndexes IIndexesPermissions.WriteIndexes Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"3AB57A8E-2169-426D-92D7-05C1E80D8710\")] public interface IndexesPermissions : IIndexesPermissions, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IndexesPermissionsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IndexesPermissionsClass.html",
    "title": "Class IndexesPermissionsClass",
    "keywords": "Class IndexesPermissionsClass Inheritance System.Object IndexesPermissionsClass Implements IndexesPermissions IIndexesPermissions System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"1FE157BA-51C9-4033-A8C7-AAB1E6B01F35\")] public class IndexesPermissionsClass : IndexesPermissions, IIndexesPermissions, IEnumerable Explicit Interface Implementations IIndexesPermissions.Count Declaration public virtual int IIndexesPermissions.Count { get; } Returns Type Description System.Int32 IIndexesPermissions.GetEnumerator() Declaration public virtual IEnumerator IIndexesPermissions.GetEnumerator() Returns Type Description System.Collections.IEnumerator IIndexesPermissions.Item[Object] Declaration public virtual IndexPermissions IIndexesPermissions.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description IndexPermissions IIndexesPermissions.ReadIndexes Declaration public virtual string IIndexesPermissions.ReadIndexes { get; } Returns Type Description System.String IIndexesPermissions.WriteIndexes Declaration public virtual string IIndexesPermissions.WriteIndexes { get; } Returns Type Description System.String Implements IndexesPermissions IIndexesPermissions System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IndexPermissions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IndexPermissions.html",
    "title": "Interface IndexPermissions",
    "keywords": "Interface IndexPermissions Inherited Members IIndexPermissions.Read IIndexPermissions.Write IIndexPermissions.Label IIndexPermissions.Remove Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"B960E41C-1B46-4A58-BDBC-BA05F80AB96D\")] public interface IndexPermissions : IIndexPermissions"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IndexPermissionsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IndexPermissionsClass.html",
    "title": "Class IndexPermissionsClass",
    "keywords": "Class IndexPermissionsClass Inheritance System.Object IndexPermissionsClass Implements IndexPermissions IIndexPermissions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"CF7AC07F-C27E-4E1A-8B29-22568FDB079C\")] public class IndexPermissionsClass : IndexPermissions, IIndexPermissions Explicit Interface Implementations IIndexPermissions.Label Declaration public virtual string IIndexPermissions.Label { get; } Returns Type Description System.String IIndexPermissions.Read Declaration public virtual bool IIndexPermissions.Read { get; } Returns Type Description System.Boolean IIndexPermissions.Remove Declaration public virtual bool IIndexPermissions.Remove { get; } Returns Type Description System.Boolean IIndexPermissions.Write Declaration public virtual bool IIndexPermissions.Write { get; } Returns Type Description System.Boolean Implements IndexPermissions IIndexPermissions"
  },
  "api/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.html",
    "title": "Interface InputModelDefinition",
    "keywords": "Interface InputModelDefinition Inherited Members IInputModelDefinition.StartWizard(String) IInputModelDefinition.Delete() IInputModelDefinition.Save(String) IInputModelDefinition.Load(String) IInputModelDefinition.GetDummyEntry() IInputModelDefinition._GetSchema() IInputModelDefinition.Name IInputModelDefinition.Description IInputModelDefinition.Content IInputModelDefinition.ReadOnly IInputModelDefinition.Owner IInputModelDefinition.IsSytemObject IInputModelDefinition.Usability Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"6D2C1DA7-B5A3-4859-967A-F6DE4144A22B\")] public interface InputModelDefinition : IInputModelDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.InputModelDefinitionClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.InputModelDefinitionClass.html",
    "title": "Class InputModelDefinitionClass",
    "keywords": "Class InputModelDefinitionClass Inheritance System.Object InputModelDefinitionClass Implements InputModelDefinition IInputModelDefinition Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"D5D0CC70-6D55-403C-870E-22B8A54B569D\")] [ClassInterface(ClassInterfaceType.None)] public class InputModelDefinitionClass : InputModelDefinition, IInputModelDefinition Explicit Interface Implementations IInputModelDefinition._GetSchema() Declaration public virtual string IInputModelDefinition._GetSchema() Returns Type Description System.String IInputModelDefinition.Content Declaration public virtual string IInputModelDefinition.Content { get; } Returns Type Description System.String IInputModelDefinition.Delete() Declaration public virtual void IInputModelDefinition.Delete() IInputModelDefinition.Description Declaration public virtual string IInputModelDefinition.Description { get; } Returns Type Description System.String IInputModelDefinition.GetDummyEntry() Declaration public virtual string IInputModelDefinition.GetDummyEntry() Returns Type Description System.String IInputModelDefinition.IsSytemObject Declaration public virtual bool IInputModelDefinition.IsSytemObject { get; } Returns Type Description System.Boolean IInputModelDefinition.Load(String) Declaration public virtual void IInputModelDefinition.Load(string FileName) Parameters Type Name Description System.String FileName IInputModelDefinition.Name Declaration public virtual string IInputModelDefinition.Name { get; } Returns Type Description System.String IInputModelDefinition.Owner Declaration public virtual string IInputModelDefinition.Owner { get; } Returns Type Description System.String IInputModelDefinition.ReadOnly Declaration public virtual bool IInputModelDefinition.ReadOnly { get; } Returns Type Description System.Boolean IInputModelDefinition.Save(String) Declaration public virtual void IInputModelDefinition.Save(string FileName) Parameters Type Name Description System.String FileName IInputModelDefinition.StartWizard(String) Declaration public virtual void IInputModelDefinition.StartWizard(string XMLFileName) Parameters Type Name Description System.String XMLFileName IInputModelDefinition.Usability Declaration public virtual mtObjectUsability IInputModelDefinition.Usability { get; } Returns Type Description mtObjectUsability Implements InputModelDefinition IInputModelDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.html",
    "title": "Interface InputModelDefinitions",
    "keywords": "Interface InputModelDefinitions Inherited Members IInputModelDefinitions.GetEnumerator() IInputModelDefinitions.Add(String, String, String) IInputModelDefinitions.StartWizard() IInputModelDefinitions.Refresh() IInputModelDefinitions.CheckObjectUsability(String) IInputModelDefinitions.CheckObjectUsabilityEx(String, Boolean) IInputModelDefinitions.Item[Object] IInputModelDefinitions.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"A338AFA8-DECA-4441-8B15-3A8DBA80A9BF\")] public interface InputModelDefinitions : IInputModelDefinitions, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.InputModelDefinitionsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.InputModelDefinitionsClass.html",
    "title": "Class InputModelDefinitionsClass",
    "keywords": "Class InputModelDefinitionsClass Inheritance System.Object InputModelDefinitionsClass Implements InputModelDefinitions IInputModelDefinitions System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"95017217-3A89-4D3F-83B4-A38B68B39AC6\")] public class InputModelDefinitionsClass : InputModelDefinitions, IInputModelDefinitions, IEnumerable Explicit Interface Implementations IInputModelDefinitions.Add(String, String, String) Declaration public virtual InputModelDefinition IInputModelDefinitions.Add(string Name, string Description, string FileName) Parameters Type Name Description System.String Name System.String Description System.String FileName Returns Type Description InputModelDefinition IInputModelDefinitions.CheckObjectUsability(String) Declaration public virtual mtObjectUsability IInputModelDefinitions.CheckObjectUsability(string FileName) Parameters Type Name Description System.String FileName Returns Type Description mtObjectUsability IInputModelDefinitions.CheckObjectUsabilityEx(String, out Boolean) Declaration public virtual mtObjectUsability IInputModelDefinitions.CheckObjectUsabilityEx(string FileName, out bool newerVersion) Parameters Type Name Description System.String FileName System.Boolean newerVersion Returns Type Description mtObjectUsability IInputModelDefinitions.Count Declaration public virtual int IInputModelDefinitions.Count { get; } Returns Type Description System.Int32 IInputModelDefinitions.GetEnumerator() Declaration public virtual IEnumerator IInputModelDefinitions.GetEnumerator() Returns Type Description System.Collections.IEnumerator IInputModelDefinitions.Item[Object] Declaration public virtual InputModelDefinition IInputModelDefinitions.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description InputModelDefinition IInputModelDefinitions.Refresh() Declaration public virtual void IInputModelDefinitions.Refresh() IInputModelDefinitions.StartWizard() Declaration public virtual InputModelDefinition IInputModelDefinitions.StartWizard() Returns Type Description InputModelDefinition Implements InputModelDefinitions IInputModelDefinitions System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.IPicklistValues.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.IPicklistValues.html",
    "title": "Interface IPicklistValues",
    "keywords": "Interface IPicklistValues Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"F5EB04FB-C819-46DD-87CD-349FC8389176\")] public interface IPicklistValues : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Int32] Declaration string this[int Index] { get; } Parameters Type Name Description System.Int32 Index Property Value Type Description System.String Methods GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ISearchInfo.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ISearchInfo.html",
    "title": "Interface ISearchInfo",
    "keywords": "Interface ISearchInfo Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"34006FF0-484A-4293-8150-F84FD66CF306\")] public interface ISearchInfo Properties ErrorCode Declaration int ErrorCode { get; } Property Value Type Description System.Int32 ErrorMessage Declaration string ErrorMessage { get; } Property Value Type Description System.String HitsFound Declaration bool HitsFound { get; } Property Value Type Description System.Boolean SourceIndex Declaration string SourceIndex { get; } Property Value Type Description System.String SourceLocale Declaration string SourceLocale { get; } Property Value Type Description System.String TargetIndex Declaration string TargetIndex { get; } Property Value Type Description System.String TargetLocale Declaration string TargetLocale { get; } Property Value Type Description System.String TermbaseName Declaration string TermbaseName { get; } Property Value Type Description System.String"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ISearchInfos.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ISearchInfos.html",
    "title": "Interface ISearchInfos",
    "keywords": "Interface ISearchInfos Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"949405C9-EE75-4D50-9308-9A4FD3A7EFF7\")] public interface ISearchInfos : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration SearchInfo this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description SearchInfo Methods GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ITermbase.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ITermbase.html",
    "title": "Interface ITermbase",
    "keywords": "Interface ITermbase Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"198985A8-DB6D-4366-9314-7701FA401762\")] public interface ITermbase Properties _Cookie Declaration string _Cookie { get; } Property Value Type Description System.String _DefaultEntryClassID Declaration int _DefaultEntryClassID { get; } Property Value Type Description System.Int32 _IsLocal Declaration bool _IsLocal { get; } Property Value Type Description System.Boolean _Path Declaration string _Path { get; } Property Value Type Description System.String _TermbaseAPIName Declaration string _TermbaseAPIName { get; } Property Value Type Description System.String _TermbaseConnector Declaration object _TermbaseConnector { get; } Property Value Type Description System.Object AccessPermissions Declaration TermbaseAccessPermissions AccessPermissions { get; } Property Value Type Description TermbaseAccessPermissions ActiveFilter Declaration FilterDefinition ActiveFilter { get; } Property Value Type Description FilterDefinition Browse Declaration TermbaseBrowser Browse { get; } Property Value Type Description TermbaseBrowser ChangeDate Declaration DateTime ChangeDate { get; } Property Value Type Description System.DateTime CopyrightText Declaration string CopyrightText { get; } Property Value Type Description System.String DefaultEntryClass Declaration string DefaultEntryClass { get; } Property Value Type Description System.String Definition Declaration TermbaseDefinition Definition { get; } Property Value Type Description TermbaseDefinition DownloadedCopyrightIcoPath Declaration string DownloadedCopyrightIcoPath { get; } Property Value Type Description System.String DownloadedCopyrightInfoPath Declaration string DownloadedCopyrightInfoPath { get; } Property Value Type Description System.String DownloadedCopyrightSplashPath Declaration string DownloadedCopyrightSplashPath { get; } Property Value Type Description System.String Entries Declaration Entries Entries { get; } Property Value Type Description Entries ExpiryDate Declaration DateTime ExpiryDate { get; } Property Value Type Description System.DateTime ExportDefinitions Declaration ExportDefinitions ExportDefinitions { get; } Property Value Type Description ExportDefinitions FilterDefinitions Declaration FilterDefinitions FilterDefinitions { get; } Property Value Type Description FilterDefinitions ImportDefinitions Declaration ImportDefinitions ImportDefinitions { get; } Property Value Type Description ImportDefinitions IncompleteEntries Declaration IncompleteEntries IncompleteEntries { get; } Property Value Type Description IncompleteEntries Information Declaration TermbaseInformation Information { get; } Property Value Type Description TermbaseInformation InputModelDefinitions Declaration InputModelDefinitions InputModelDefinitions { get; } Property Value Type Description InputModelDefinitions IsPublished Declaration bool IsPublished { get; } Property Value Type Description System.Boolean IsReadOnly Declaration bool IsReadOnly { get; } Property Value Type Description System.Boolean LayoutDefinitions Declaration LayoutDefinitions LayoutDefinitions { get; } Property Value Type Description LayoutDefinitions LockedEntries Declaration LockedEntries LockedEntries { get; } Property Value Type Description LockedEntries LockedEntryInfos Declaration LockedEntryInfos LockedEntryInfos { get; } Property Value Type Description LockedEntryInfos Name Declaration string Name { get; } Property Value Type Description System.String Search Declaration TermbaseSearch Search { get; } Property Value Type Description TermbaseSearch Methods _Reorganise(Boolean, Boolean, Int32) Declaration void _Reorganise(bool vb_encrypt, bool vb_markReadOnly, int l_expiryDate) Parameters Type Name Description System.Boolean vb_encrypt System.Boolean vb_markReadOnly System.Int32 l_expiryDate AddBLOB(Int32, String, String) Declaration int AddBLOB(int EntryID, string tag, string blob) Parameters Type Name Description System.Int32 EntryID System.String tag System.String blob Returns Type Description System.Int32 Close() Declaration void Close() Delete() Declaration void Delete() ExtractToFile(String) Declaration void ExtractToFile(string bstr_localFile) Parameters Type Name Description System.String bstr_localFile GetHomonyms(String, String, String) Declaration Homonyms GetHomonyms(string Index, string Source, string Target) Parameters Type Name Description System.String Index System.String Source System.String Target Returns Type Description Homonyms Reorganise() Declaration void Reorganise()"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ITermbaseAccessPermissions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ITermbaseAccessPermissions.html",
    "title": "Interface ITermbaseAccessPermissions",
    "keywords": "Interface ITermbaseAccessPermissions Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"7CDBD469-5F26-4F3E-A6BB-6FAF05CAF8C5\")] public interface ITermbaseAccessPermissions Properties CanChangeEntryClass Declaration bool CanChangeEntryClass { get; } Property Value Type Description System.Boolean CanEditTermbaseDefinition Declaration bool CanEditTermbaseDefinition { get; } Property Value Type Description System.Boolean CanExport Declaration bool CanExport { get; } Property Value Type Description System.Boolean CanImport Declaration bool CanImport { get; } Property Value Type Description System.Boolean EntryClasses Declaration EntryClassesPermissions EntryClasses { get; } Property Value Type Description EntryClassesPermissions EntryLevelRead Declaration bool EntryLevelRead { get; } Property Value Type Description System.Boolean EntryLevelWrite Declaration bool EntryLevelWrite { get; } Property Value Type Description System.Boolean IndexesPermissions Declaration IndexesPermissions IndexesPermissions { get; } Property Value Type Description IndexesPermissions MustUseInputModel Declaration bool MustUseInputModel { get; } Property Value Type Description System.Boolean"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ITermbaseBrowser.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ITermbaseBrowser.html",
    "title": "Interface ITermbaseBrowser",
    "keywords": "Interface ITermbaseBrowser Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"34F4380A-AF30-4BF8-AEFA-C83632F588A3\")] public interface ITermbaseBrowser Properties Direction Declaration MtBrowseDirection Direction { get; set; } Property Value Type Description MtBrowseDirection EntryID Declaration int EntryID { get; set; } Property Value Type Description System.Int32 IgnoreFilter Declaration bool IgnoreFilter { get; set; } Property Value Type Description System.Boolean MaximumTermCount Declaration int MaximumTermCount { get; set; } Property Value Type Description System.Int32 SourceIndex Declaration string SourceIndex { get; set; } Property Value Type Description System.String StartTerm Declaration string StartTerm { get; set; } Property Value Type Description System.String TargetIndex Declaration string TargetIndex { get; set; } Property Value Type Description System.String Methods Execute() Declaration HitTerms Execute() Returns Type Description HitTerms"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ITermbaseDefinition.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ITermbaseDefinition.html",
    "title": "Interface ITermbaseDefinition",
    "keywords": "Interface ITermbaseDefinition Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"62031F81-32AF-4B0B-9458-DC2C182DC511\")] public interface ITermbaseDefinition Properties _Definition Declaration string _Definition { get; } Property Value Type Description System.String _Object Declaration string _Object { get; } Property Value Type Description System.String _Schema Declaration string _Schema { get; } Property Value Type Description System.String Fields Declaration DescriptiveFields Fields { get; } Property Value Type Description DescriptiveFields Indexes Declaration Indexes Indexes { get; } Property Value Type Description Indexes Methods Save(String) Declaration void Save(string FileName) Parameters Type Name Description System.String FileName StartWizard() Declaration void StartWizard()"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ITermbaseInformation.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ITermbaseInformation.html",
    "title": "Interface ITermbaseInformation",
    "keywords": "Interface ITermbaseInformation Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"4D4B4A86-41E2-4C74-BF37-A917D0FA1AA6\")] public interface ITermbaseInformation Properties CreationDate Declaration string CreationDate { get; } Property Value Type Description System.String Description Declaration string Description { get; } Property Value Type Description System.String Name Declaration string Name { get; } Property Value Type Description System.String NumberOfEntriesInIndex[String] Declaration int NumberOfEntriesInIndex { get; } Parameters Type Name Description System.String Index Property Value Type Description System.Int32 Path Declaration string Path { get; } Property Value Type Description System.String Size Declaration string Size { get; } Property Value Type Description System.String TotalNumberOfEntries Declaration int TotalNumberOfEntries { get; } Property Value Type Description System.Int32 Methods Refresh() Declaration void Refresh()"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.html",
    "title": "Interface ITermbaseRepository",
    "keywords": "Interface ITermbaseRepository Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"86D5591A-B497-41BB-ADFD-FAE3CF814D8B\")] public interface ITermbaseRepository Properties DatabaseType Declaration MtDatabaseType DatabaseType { get; set; } Property Value Type Description MtDatabaseType IsConnected Declaration bool IsConnected { get; } Property Value Type Description System.Boolean IsRemote Declaration bool IsRemote { get; } Property Value Type Description System.Boolean Location Declaration string Location { get; set; } Property Value Type Description System.String Protocol Declaration MtCommunicationType Protocol { get; set; } Property Value Type Description MtCommunicationType ServerVersion Declaration int ServerVersion { get; } Property Value Type Description System.Int32 Termbases Declaration Termbases Termbases { get; } Property Value Type Description Termbases TerminologyConnectorCOM Declaration object TerminologyConnectorCOM { get; } Property Value Type Description System.Object Methods ChangePassword(String, String) Declaration void ChangePassword(string NewPassword, string OldPassword) Parameters Type Name Description System.String NewPassword System.String OldPassword Connect(String, String) Declaration MtUserType Connect(string UserId, string Password) Parameters Type Name Description System.String UserId System.String Password Returns Type Description MtUserType ConnectEx(String, String, CredentialsPersistOption) Declaration MtUserType ConnectEx(string UserId, string Password, CredentialsPersistOption CredentialsPersistOption) Parameters Type Name Description System.String UserId System.String Password CredentialsPersistOption CredentialsPersistOption Returns Type Description MtUserType ConnectSso(String, String, CredentialsPersistOption) Declaration MtUserType ConnectSso(string UserId, string SamlToken, CredentialsPersistOption CredentialsPersistOption) Parameters Type Name Description System.String UserId System.String SamlToken CredentialsPersistOption CredentialsPersistOption Returns Type Description MtUserType ConnectWithAuthServerConnection(Object, String) Declaration MtUserType ConnectWithAuthServerConnection(object pxo_ServerConnection, string UserId) Parameters Type Name Description System.Object pxo_ServerConnection System.String UserId Returns Type Description MtUserType Disconnect() Declaration void Disconnect()"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ITermbases.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ITermbases.html",
    "title": "Interface ITermbases",
    "keywords": "Interface ITermbases Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"8FD1BFA9-CBDF-42E9-81C7-1A6065596D54\")] public interface ITermbases : IEnumerable Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 Item[Object] Declaration Termbase this[object Index] { get; } Parameters Type Name Description System.Object Index Property Value Type Description Termbase Methods Add(String, String, String) Declaration void Add(string Path, string Name, string Description) Parameters Type Name Description System.String Path System.String Name System.String Description CheckTermbaseFileVersion(String) Declaration bool CheckTermbaseFileVersion(string Path) Parameters Type Name Description System.String Path Returns Type Description System.Boolean CheckTermbaseFileVersionEx(String, out Boolean, out Boolean) Declaration bool CheckTermbaseFileVersionEx(string Path, out bool pvbUpdateable, out bool pvbNewerVersion) Parameters Type Name Description System.String Path System.Boolean pvbUpdateable System.Boolean pvbNewerVersion Returns Type Description System.Boolean GetEnumerator() Declaration IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator New(String, String, String, String) Declaration Termbase New(string TermbaseName, string Description, string TermbaseDefinitionFile, string TermbaseDestinationFilePath) Parameters Type Name Description System.String TermbaseName System.String Description System.String TermbaseDefinitionFile System.String TermbaseDestinationFilePath Returns Type Description Termbase Refresh() Declaration void Refresh() Remove(Termbase, String) Declaration void Remove(Termbase Termbase, string DestinationPath) Parameters Type Name Description Termbase Termbase System.String DestinationPath"
  },
  "api/Sdl.MultiTerm.TMO.Interop.ITermbaseSearch.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.ITermbaseSearch.html",
    "title": "Interface ITermbaseSearch",
    "keywords": "Interface ITermbaseSearch Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"0018F8A4-CF2E-4C49-BA8A-89EAAE25F02A\")] public interface ITermbaseSearch Properties Direction Declaration MtSearchDirection Direction { get; set; } Property Value Type Description MtSearchDirection FuzzySearch Declaration bool FuzzySearch { get; set; } Property Value Type Description System.Boolean LastTerm Declaration string LastTerm { set; } Property Value Type Description System.String MaximumHits Declaration int MaximumHits { get; set; } Property Value Type Description System.Int32 SearchExistTarget Declaration bool SearchExistTarget { get; set; } Property Value Type Description System.Boolean SearchExpression Declaration string SearchExpression { get; set; } Property Value Type Description System.String SourceIndex Declaration string SourceIndex { get; set; } Property Value Type Description System.String StartingEntryID Declaration int StartingEntryID { get; set; } Property Value Type Description System.Int32 TargetIndex Declaration string TargetIndex { get; set; } Property Value Type Description System.String Methods Advise(MultiSearch) Declaration void Advise(MultiSearch AdvancedSearchObject) Parameters Type Name Description MultiSearch AdvancedSearchObject CancelSearch() Declaration void CancelSearch() Execute() Declaration HitTerms Execute() Returns Type Description HitTerms Unadvise() Declaration void Unadvise()"
  },
  "api/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.html",
    "title": "Interface LayoutDefinition",
    "keywords": "Interface LayoutDefinition Inherited Members ILayoutDefinition.StartWizard(String) ILayoutDefinition.Delete() ILayoutDefinition.Save(String) ILayoutDefinition.Load(String) ILayoutDefinition.Update(String) ILayoutDefinition.Name ILayoutDefinition.Description ILayoutDefinition.Content ILayoutDefinition.ReadOnly ILayoutDefinition.ID ILayoutDefinition.Owner ILayoutDefinition.IsSytemObject ILayoutDefinition.Usability Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"3D875F6B-68CF-49DB-9DAE-D953C6F1AE81\")] public interface LayoutDefinition : ILayoutDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.LayoutDefinitionClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.LayoutDefinitionClass.html",
    "title": "Class LayoutDefinitionClass",
    "keywords": "Class LayoutDefinitionClass Inheritance System.Object LayoutDefinitionClass Implements LayoutDefinition ILayoutDefinition Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"F5D44792-A458-45B3-8049-6DF7D9A0B471\")] [ClassInterface(ClassInterfaceType.None)] public class LayoutDefinitionClass : LayoutDefinition, ILayoutDefinition Explicit Interface Implementations ILayoutDefinition.Content Declaration public virtual string ILayoutDefinition.Content { get; } Returns Type Description System.String ILayoutDefinition.Delete() Declaration public virtual void ILayoutDefinition.Delete() ILayoutDefinition.Description Declaration public virtual string ILayoutDefinition.Description { get; } Returns Type Description System.String ILayoutDefinition.ID Declaration public virtual int ILayoutDefinition.ID { get; } Returns Type Description System.Int32 ILayoutDefinition.IsSytemObject Declaration public virtual bool ILayoutDefinition.IsSytemObject { get; } Returns Type Description System.Boolean ILayoutDefinition.Load(String) Declaration public virtual void ILayoutDefinition.Load(string FileName) Parameters Type Name Description System.String FileName ILayoutDefinition.Name Declaration public virtual string ILayoutDefinition.Name { get; } Returns Type Description System.String ILayoutDefinition.Owner Declaration public virtual string ILayoutDefinition.Owner { get; } Returns Type Description System.String ILayoutDefinition.ReadOnly Declaration public virtual bool ILayoutDefinition.ReadOnly { get; } Returns Type Description System.Boolean ILayoutDefinition.Save(String) Declaration public virtual void ILayoutDefinition.Save(string FileName) Parameters Type Name Description System.String FileName ILayoutDefinition.StartWizard(String) Declaration public virtual void ILayoutDefinition.StartWizard(string XMLFileName) Parameters Type Name Description System.String XMLFileName ILayoutDefinition.Update(String) Declaration public virtual void ILayoutDefinition.Update(string objectXml) Parameters Type Name Description System.String objectXml ILayoutDefinition.Usability Declaration public virtual mtObjectUsability ILayoutDefinition.Usability { get; } Returns Type Description mtObjectUsability Implements LayoutDefinition ILayoutDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.html",
    "title": "Interface LayoutDefinitions",
    "keywords": "Interface LayoutDefinitions Inherited Members ILayoutDefinitions.GetEnumerator() ILayoutDefinitions.Add(String, String, String) ILayoutDefinitions.StartWizard() ILayoutDefinitions.Refresh() ILayoutDefinitions.CheckObjectUsability(String) ILayoutDefinitions.CheckObjectUsabilityEx(String, Boolean) ILayoutDefinitions.Item[Object] ILayoutDefinitions.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"522E1B60-8D1F-46AF-974F-578D5F05B805\")] public interface LayoutDefinitions : ILayoutDefinitions, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.LayoutDefinitionsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.LayoutDefinitionsClass.html",
    "title": "Class LayoutDefinitionsClass",
    "keywords": "Class LayoutDefinitionsClass Inheritance System.Object LayoutDefinitionsClass Implements LayoutDefinitions ILayoutDefinitions System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"A74B1C72-9F3D-48EE-ABCB-B8AD08357175\")] [ClassInterface(ClassInterfaceType.None)] public class LayoutDefinitionsClass : LayoutDefinitions, ILayoutDefinitions, IEnumerable Explicit Interface Implementations ILayoutDefinitions.Add(String, String, String) Declaration public virtual LayoutDefinition ILayoutDefinitions.Add(string Name, string Description, string FileName) Parameters Type Name Description System.String Name System.String Description System.String FileName Returns Type Description LayoutDefinition ILayoutDefinitions.CheckObjectUsability(String) Declaration public virtual mtObjectUsability ILayoutDefinitions.CheckObjectUsability(string FileName) Parameters Type Name Description System.String FileName Returns Type Description mtObjectUsability ILayoutDefinitions.CheckObjectUsabilityEx(String, out Boolean) Declaration public virtual mtObjectUsability ILayoutDefinitions.CheckObjectUsabilityEx(string FileName, out bool newerVersion) Parameters Type Name Description System.String FileName System.Boolean newerVersion Returns Type Description mtObjectUsability ILayoutDefinitions.Count Declaration public virtual int ILayoutDefinitions.Count { get; } Returns Type Description System.Int32 ILayoutDefinitions.GetEnumerator() Declaration public virtual IEnumerator ILayoutDefinitions.GetEnumerator() Returns Type Description System.Collections.IEnumerator ILayoutDefinitions.Item[Object] Declaration public virtual LayoutDefinition ILayoutDefinitions.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description LayoutDefinition ILayoutDefinitions.Refresh() Declaration public virtual void ILayoutDefinitions.Refresh() ILayoutDefinitions.StartWizard() Declaration public virtual LayoutDefinition ILayoutDefinitions.StartWizard() Returns Type Description LayoutDefinition Implements LayoutDefinitions ILayoutDefinitions System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.LockedEntries.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.LockedEntries.html",
    "title": "Interface LockedEntries",
    "keywords": "Interface LockedEntries Inherited Members ILockedEntries.GetEnumerator() ILockedEntries.Item[Int32] ILockedEntries.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"C04D9944-CE8E-478C-9A13-DAEA0CCD1F6C\")] public interface LockedEntries : ILockedEntries, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.LockedEntriesClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.LockedEntriesClass.html",
    "title": "Class LockedEntriesClass",
    "keywords": "Class LockedEntriesClass Inheritance System.Object LockedEntriesClass Implements LockedEntries ILockedEntries System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"7133BA36-98B3-4520-9EEB-22F5293ABE81\")] public class LockedEntriesClass : LockedEntries, ILockedEntries, IEnumerable Explicit Interface Implementations ILockedEntries.Count Declaration public virtual int ILockedEntries.Count { get; } Returns Type Description System.Int32 ILockedEntries.GetEnumerator() Declaration public virtual IEnumerator ILockedEntries.GetEnumerator() Returns Type Description System.Collections.IEnumerator ILockedEntries.Item[Int32] Declaration public virtual string ILockedEntries.this[int Index] { get; } Parameters Type Name Description System.Int32 Index Returns Type Description System.String Implements LockedEntries ILockedEntries System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.LockedEntryInfo.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.LockedEntryInfo.html",
    "title": "Interface LockedEntryInfo",
    "keywords": "Interface LockedEntryInfo Inherited Members ILockedEntryInfo.ConceptId ILockedEntryInfo.UserName ILockedEntryInfo.Date Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"FA079926-C4CE-4938-8B40-41DE1BD09861\")] public interface LockedEntryInfo : ILockedEntryInfo"
  },
  "api/Sdl.MultiTerm.TMO.Interop.LockedEntryInfoClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.LockedEntryInfoClass.html",
    "title": "Class LockedEntryInfoClass",
    "keywords": "Class LockedEntryInfoClass Inheritance System.Object LockedEntryInfoClass Implements LockedEntryInfo ILockedEntryInfo Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"D72077F1-36D9-4163-9477-459501F88432\")] public class LockedEntryInfoClass : LockedEntryInfo, ILockedEntryInfo Explicit Interface Implementations ILockedEntryInfo.ConceptId Declaration public virtual int ILockedEntryInfo.ConceptId { get; } Returns Type Description System.Int32 ILockedEntryInfo.Date Declaration public virtual DateTime ILockedEntryInfo.Date { get; } Returns Type Description System.DateTime ILockedEntryInfo.UserName Declaration public virtual string ILockedEntryInfo.UserName { get; } Returns Type Description System.String Implements LockedEntryInfo ILockedEntryInfo"
  },
  "api/Sdl.MultiTerm.TMO.Interop.LockedEntryInfos.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.LockedEntryInfos.html",
    "title": "Interface LockedEntryInfos",
    "keywords": "Interface LockedEntryInfos Inherited Members ILockedEntryInfos.GetEnumerator() ILockedEntryInfos.Item[Object] ILockedEntryInfos.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"946343CD-5A05-4697-B347-8287AC8E8A08\")] public interface LockedEntryInfos : ILockedEntryInfos, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.LockedEntryInfosClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.LockedEntryInfosClass.html",
    "title": "Class LockedEntryInfosClass",
    "keywords": "Class LockedEntryInfosClass Inheritance System.Object LockedEntryInfosClass Implements LockedEntryInfos ILockedEntryInfos System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"56CD6331-5534-4529-8D7D-D532C7E787DD\")] [ClassInterface(ClassInterfaceType.None)] public class LockedEntryInfosClass : LockedEntryInfos, ILockedEntryInfos, IEnumerable Explicit Interface Implementations ILockedEntryInfos.Count Declaration public virtual int ILockedEntryInfos.Count { get; } Returns Type Description System.Int32 ILockedEntryInfos.GetEnumerator() Declaration public virtual IEnumerator ILockedEntryInfos.GetEnumerator() Returns Type Description System.Collections.IEnumerator ILockedEntryInfos.Item[Object] Declaration public virtual LockedEntryInfo ILockedEntryInfos.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description LockedEntryInfo Implements LockedEntryInfos ILockedEntryInfos System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.MtBrowseDirection.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.MtBrowseDirection.html",
    "title": "Enum MtBrowseDirection",
    "keywords": "Enum MtBrowseDirection Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"AACA5A15-7751-4D18-B19E-38293D07A619\")] public enum MtBrowseDirection Fields Name Description mtBrowseDirDown mtBrowseDirUp"
  },
  "api/Sdl.MultiTerm.TMO.Interop.MtCommunicationType.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.MtCommunicationType.html",
    "title": "Enum MtCommunicationType",
    "keywords": "Enum MtCommunicationType Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"CEE7CDA9-7715-49FF-B74F-EA37644552F4\")] public enum MtCommunicationType Fields Name Description mtDCOM mtSOAP"
  },
  "api/Sdl.MultiTerm.TMO.Interop.MtDatabaseType.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.MtDatabaseType.html",
    "title": "Enum MtDatabaseType",
    "keywords": "Enum MtDatabaseType Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"F215AC58-22B0-4DA2-965E-D827EA1972BD\")] public enum MtDatabaseType Fields Name Description mtJET mtSQL"
  },
  "api/Sdl.MultiTerm.TMO.Interop.MtFieldLevel.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.MtFieldLevel.html",
    "title": "Enum MtFieldLevel",
    "keywords": "Enum MtFieldLevel Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"A44F90F3-5A6F-41AB-94E6-84AB06133C8E\")] public enum MtFieldLevel Fields Name Description mtEntryLevel mtIndexLevel mtTermLevel"
  },
  "api/Sdl.MultiTerm.TMO.Interop.MtFieldType.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.MtFieldType.html",
    "title": "Enum MtFieldType",
    "keywords": "Enum MtFieldType Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"C2C021D6-378D-4A3C-A537-0F146882184E\")] public enum MtFieldType Fields Name Description mtBoolean mtDateTime mtMultiMediaFile mtNumber mtPickList mtString"
  },
  "api/Sdl.MultiTerm.TMO.Interop.MtIndexGuessing.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.MtIndexGuessing.html",
    "title": "Enum MtIndexGuessing",
    "keywords": "Enum MtIndexGuessing Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"DC1193C0-1D88-424D-8278-7666A1ED3B23\")] public enum MtIndexGuessing Fields Name Description mtGuessIndex mtUseName"
  },
  "api/Sdl.MultiTerm.TMO.Interop.MtLockingState.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.MtLockingState.html",
    "title": "Enum MtLockingState",
    "keywords": "Enum MtLockingState Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"C0939EAA-5E76-40AE-9963-DACD0F1C923D\")] public enum MtLockingState Fields Name Description mtLock mtUnlock"
  },
  "api/Sdl.MultiTerm.TMO.Interop.mtObjectUsability.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.mtObjectUsability.html",
    "title": "Enum mtObjectUsability",
    "keywords": "Enum mtObjectUsability Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax public enum mtObjectUsability Fields Name Description mtObjectEditable mtObjectUnusable mtObjectUsable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.MtSearchDirection.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.MtSearchDirection.html",
    "title": "Enum MtSearchDirection",
    "keywords": "Enum MtSearchDirection Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"A4864F1C-DF8C-4FC0-A59D-8C324AFC03ED\")] public enum MtSearchDirection Fields Name Description mtSearchDown mtSearchUp"
  },
  "api/Sdl.MultiTerm.TMO.Interop.MtSearchType.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.MtSearchType.html",
    "title": "Enum MtSearchType",
    "keywords": "Enum MtSearchType Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"C852ED52-67A0-4D1C-BE63-4716F3F6CF2F\")] public enum MtSearchType Fields Name Description mtHierarchial mtParallel mtSequential"
  },
  "api/Sdl.MultiTerm.TMO.Interop.MtTaskType.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.MtTaskType.html",
    "title": "Enum MtTaskType",
    "keywords": "Enum MtTaskType Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"66BAE712-3B95-48A5-B2A1-2838C8AE0DE0\")] public enum MtTaskType Fields Name Description mtScript mtWizard"
  },
  "api/Sdl.MultiTerm.TMO.Interop.MtUserType.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.MtUserType.html",
    "title": "Enum MtUserType",
    "keywords": "Enum MtUserType Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"94FD6261-CAEC-4437-A19A-70A44248E567\")] public enum MtUserType Fields Name Description mtNotAuthorized mtSuper mtUser"
  },
  "api/Sdl.MultiTerm.TMO.Interop.MultiSearch.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.MultiSearch.html",
    "title": "Interface MultiSearch",
    "keywords": "Interface MultiSearch Inherited Members IMultiSearch.AddSearchTermbase(Termbase, String, String) IMultiSearch.ClearSearchTermbases() IMultiSearch.Execute() IMultiSearch.SearchExpression IMultiSearch.MaximumHits IMultiSearch.Direction IMultiSearch.SearchType IMultiSearch.FuzzySearch IMultiSearch.TargetRequired IMultiSearch.GuessIndex IMultiSearch.SearchInfo IMultiSearch.SearchTermbases IMultiSearch.FullTextSearch IMultiSearch.IgnoreFilter Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"EE0C2A2B-E349-42C1-B414-CAF2CD91224C\")] public interface MultiSearch : IMultiSearch"
  },
  "api/Sdl.MultiTerm.TMO.Interop.MultiSearchClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.MultiSearchClass.html",
    "title": "Class MultiSearchClass",
    "keywords": "Class MultiSearchClass Inheritance System.Object MultiSearchClass Implements MultiSearch IMultiSearch Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"049374C0-BA6F-4796-9CD6-28BB144D9FDB\")] public class MultiSearchClass : MultiSearch, IMultiSearch Explicit Interface Implementations IMultiSearch.AddSearchTermbase(Termbase, String, String) Declaration public virtual void IMultiSearch.AddSearchTermbase(Termbase pxo_termbase, string bstr_source, string bstr_target) Parameters Type Name Description Termbase pxo_termbase System.String bstr_source System.String bstr_target IMultiSearch.ClearSearchTermbases() Declaration public virtual void IMultiSearch.ClearSearchTermbases() IMultiSearch.Direction Declaration public virtual MtSearchDirection IMultiSearch.Direction { get; set; } Returns Type Description MtSearchDirection IMultiSearch.Execute() Declaration public virtual HitTerms IMultiSearch.Execute() Returns Type Description HitTerms IMultiSearch.FullTextSearch Declaration public virtual bool IMultiSearch.FullTextSearch { get; set; } Returns Type Description System.Boolean IMultiSearch.FuzzySearch Declaration public virtual bool IMultiSearch.FuzzySearch { get; set; } Returns Type Description System.Boolean IMultiSearch.GuessIndex Declaration public virtual MtIndexGuessing IMultiSearch.GuessIndex { get; set; } Returns Type Description MtIndexGuessing IMultiSearch.IgnoreFilter Declaration public virtual bool IMultiSearch.IgnoreFilter { get; set; } Returns Type Description System.Boolean IMultiSearch.MaximumHits Declaration public virtual int IMultiSearch.MaximumHits { get; set; } Returns Type Description System.Int32 IMultiSearch.SearchExpression Declaration public virtual string IMultiSearch.SearchExpression { get; set; } Returns Type Description System.String IMultiSearch.SearchInfo Declaration public virtual SearchInfos IMultiSearch.SearchInfo { get; } Returns Type Description SearchInfos IMultiSearch.SearchTermbases Declaration public virtual string IMultiSearch.SearchTermbases { get; } Returns Type Description System.String IMultiSearch.SearchType Declaration public virtual MtSearchType IMultiSearch.SearchType { get; set; } Returns Type Description MtSearchType IMultiSearch.TargetRequired Declaration public virtual bool IMultiSearch.TargetRequired { get; set; } Returns Type Description System.Boolean Implements MultiSearch IMultiSearch"
  },
  "api/Sdl.MultiTerm.TMO.Interop.PicklistValues.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.PicklistValues.html",
    "title": "Interface PicklistValues",
    "keywords": "Interface PicklistValues Inherited Members IPicklistValues.GetEnumerator() IPicklistValues.Item[Int32] IPicklistValues.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"F5EB04FB-C819-46DD-87CD-349FC8389176\")] public interface PicklistValues : IPicklistValues, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.PicklistValuesClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.PicklistValuesClass.html",
    "title": "Class PicklistValuesClass",
    "keywords": "Class PicklistValuesClass Inheritance System.Object PicklistValuesClass Implements PicklistValues IPicklistValues System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"03D3A87F-336E-4A91-B77A-09AADCD6DC27\")] public class PicklistValuesClass : PicklistValues, IPicklistValues, IEnumerable Explicit Interface Implementations IPicklistValues.Count Declaration public virtual int IPicklistValues.Count { get; } Returns Type Description System.Int32 IPicklistValues.GetEnumerator() Declaration public virtual IEnumerator IPicklistValues.GetEnumerator() Returns Type Description System.Collections.IEnumerator IPicklistValues.Item[Int32] Declaration public virtual string IPicklistValues.this[int Index] { get; } Parameters Type Name Description System.Int32 Index Returns Type Description System.String Implements PicklistValues IPicklistValues System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.SearchInfo.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.SearchInfo.html",
    "title": "Interface SearchInfo",
    "keywords": "Interface SearchInfo Inherited Members ISearchInfo.TermbaseName ISearchInfo.SourceIndex ISearchInfo.SourceLocale ISearchInfo.TargetIndex ISearchInfo.TargetLocale ISearchInfo.HitsFound ISearchInfo.ErrorMessage ISearchInfo.ErrorCode Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"34006FF0-484A-4293-8150-F84FD66CF306\")] public interface SearchInfo : ISearchInfo"
  },
  "api/Sdl.MultiTerm.TMO.Interop.SearchInfoClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.SearchInfoClass.html",
    "title": "Class SearchInfoClass",
    "keywords": "Class SearchInfoClass Inheritance System.Object SearchInfoClass Implements SearchInfo ISearchInfo Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"0131B20B-7BA9-4940-A2E2-5BA6E9BB9379\")] public class SearchInfoClass : SearchInfo, ISearchInfo Explicit Interface Implementations ISearchInfo.ErrorCode Declaration public virtual int ISearchInfo.ErrorCode { get; } Returns Type Description System.Int32 ISearchInfo.ErrorMessage Declaration public virtual string ISearchInfo.ErrorMessage { get; } Returns Type Description System.String ISearchInfo.HitsFound Declaration public virtual bool ISearchInfo.HitsFound { get; } Returns Type Description System.Boolean ISearchInfo.SourceIndex Declaration public virtual string ISearchInfo.SourceIndex { get; } Returns Type Description System.String ISearchInfo.SourceLocale Declaration public virtual string ISearchInfo.SourceLocale { get; } Returns Type Description System.String ISearchInfo.TargetIndex Declaration public virtual string ISearchInfo.TargetIndex { get; } Returns Type Description System.String ISearchInfo.TargetLocale Declaration public virtual string ISearchInfo.TargetLocale { get; } Returns Type Description System.String ISearchInfo.TermbaseName Declaration public virtual string ISearchInfo.TermbaseName { get; } Returns Type Description System.String Implements SearchInfo ISearchInfo"
  },
  "api/Sdl.MultiTerm.TMO.Interop.SearchInfos.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.SearchInfos.html",
    "title": "Interface SearchInfos",
    "keywords": "Interface SearchInfos Inherited Members ISearchInfos.GetEnumerator() ISearchInfos.Item[Object] ISearchInfos.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"949405C9-EE75-4D50-9308-9A4FD3A7EFF7\")] public interface SearchInfos : ISearchInfos, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.SearchInfosClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.SearchInfosClass.html",
    "title": "Class SearchInfosClass",
    "keywords": "Class SearchInfosClass Inheritance System.Object SearchInfosClass Implements SearchInfos ISearchInfos System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"19E7C637-0343-429C-8219-56B40EAFB184\")] [ClassInterface(ClassInterfaceType.None)] public class SearchInfosClass : SearchInfos, ISearchInfos, IEnumerable Explicit Interface Implementations ISearchInfos.Count Declaration public virtual int ISearchInfos.Count { get; } Returns Type Description System.Int32 ISearchInfos.GetEnumerator() Declaration public virtual IEnumerator ISearchInfos.GetEnumerator() Returns Type Description System.Collections.IEnumerator ISearchInfos.Item[Object] Declaration public virtual SearchInfo ISearchInfos.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description SearchInfo Implements SearchInfos ISearchInfos System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.Termbase.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.Termbase.html",
    "title": "Interface Termbase",
    "keywords": "Interface Termbase Inherited Members ITermbase.Reorganise() ITermbase.GetHomonyms(String, String, String) ITermbase.Delete() ITermbase.Close() ITermbase.ExtractToFile(String) ITermbase._Reorganise(Boolean, Boolean, Int32) ITermbase.AddBLOB(Int32, String, String) ITermbase.Entries ITermbase.Definition ITermbase.Search ITermbase.Browse ITermbase.Information ITermbase.FilterDefinitions ITermbase.InputModelDefinitions ITermbase.ImportDefinitions ITermbase.ExportDefinitions ITermbase.LayoutDefinitions ITermbase.Name ITermbase.ActiveFilter ITermbase.AccessPermissions ITermbase.IncompleteEntries ITermbase.LockedEntries ITermbase.DefaultEntryClass ITermbase.IsReadOnly ITermbase.ChangeDate ITermbase._Cookie ITermbase._IsLocal ITermbase._DefaultEntryClassID ITermbase.ExpiryDate ITermbase.DownloadedCopyrightIcoPath ITermbase.DownloadedCopyrightSplashPath ITermbase.DownloadedCopyrightInfoPath ITermbase.CopyrightText ITermbase._TermbaseConnector ITermbase._Path ITermbase.LockedEntryInfos ITermbase._TermbaseAPIName ITermbase.IsPublished Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"198985A8-DB6D-4366-9314-7701FA401762\")] public interface Termbase : ITermbase"
  },
  "api/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.html",
    "title": "Interface TermbaseAccessPermissions",
    "keywords": "Interface TermbaseAccessPermissions Inherited Members ITermbaseAccessPermissions.EntryLevelRead ITermbaseAccessPermissions.EntryLevelWrite ITermbaseAccessPermissions.IndexesPermissions ITermbaseAccessPermissions.EntryClasses ITermbaseAccessPermissions.CanChangeEntryClass ITermbaseAccessPermissions.CanImport ITermbaseAccessPermissions.CanExport ITermbaseAccessPermissions.MustUseInputModel ITermbaseAccessPermissions.CanEditTermbaseDefinition Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"7CDBD469-5F26-4F3E-A6BB-6FAF05CAF8C5\")] public interface TermbaseAccessPermissions : ITermbaseAccessPermissions"
  },
  "api/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissionsClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissionsClass.html",
    "title": "Class TermbaseAccessPermissionsClass",
    "keywords": "Class TermbaseAccessPermissionsClass Inheritance System.Object TermbaseAccessPermissionsClass Implements TermbaseAccessPermissions ITermbaseAccessPermissions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"82DAC693-76A8-4155-9A43-091980C4F7B9\")] [ClassInterface(ClassInterfaceType.None)] public class TermbaseAccessPermissionsClass : TermbaseAccessPermissions, ITermbaseAccessPermissions Explicit Interface Implementations ITermbaseAccessPermissions.CanChangeEntryClass Declaration public virtual bool ITermbaseAccessPermissions.CanChangeEntryClass { get; } Returns Type Description System.Boolean ITermbaseAccessPermissions.CanEditTermbaseDefinition Declaration public virtual bool ITermbaseAccessPermissions.CanEditTermbaseDefinition { get; } Returns Type Description System.Boolean ITermbaseAccessPermissions.CanExport Declaration public virtual bool ITermbaseAccessPermissions.CanExport { get; } Returns Type Description System.Boolean ITermbaseAccessPermissions.CanImport Declaration public virtual bool ITermbaseAccessPermissions.CanImport { get; } Returns Type Description System.Boolean ITermbaseAccessPermissions.EntryClasses Declaration public virtual EntryClassesPermissions ITermbaseAccessPermissions.EntryClasses { get; } Returns Type Description EntryClassesPermissions ITermbaseAccessPermissions.EntryLevelRead Declaration public virtual bool ITermbaseAccessPermissions.EntryLevelRead { get; } Returns Type Description System.Boolean ITermbaseAccessPermissions.EntryLevelWrite Declaration public virtual bool ITermbaseAccessPermissions.EntryLevelWrite { get; } Returns Type Description System.Boolean ITermbaseAccessPermissions.IndexesPermissions Declaration public virtual IndexesPermissions ITermbaseAccessPermissions.IndexesPermissions { get; } Returns Type Description IndexesPermissions ITermbaseAccessPermissions.MustUseInputModel Declaration public virtual bool ITermbaseAccessPermissions.MustUseInputModel { get; } Returns Type Description System.Boolean Implements TermbaseAccessPermissions ITermbaseAccessPermissions"
  },
  "api/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.html",
    "title": "Interface TermbaseBrowser",
    "keywords": "Interface TermbaseBrowser Inherited Members ITermbaseBrowser.Execute() ITermbaseBrowser.StartTerm ITermbaseBrowser.EntryID ITermbaseBrowser.MaximumTermCount ITermbaseBrowser.Direction ITermbaseBrowser.SourceIndex ITermbaseBrowser.TargetIndex ITermbaseBrowser.IgnoreFilter Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"34F4380A-AF30-4BF8-AEFA-C83632F588A3\")] public interface TermbaseBrowser : ITermbaseBrowser"
  },
  "api/Sdl.MultiTerm.TMO.Interop.TermbaseBrowserClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.TermbaseBrowserClass.html",
    "title": "Class TermbaseBrowserClass",
    "keywords": "Class TermbaseBrowserClass Inheritance System.Object TermbaseBrowserClass Implements TermbaseBrowser ITermbaseBrowser Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"3BF20243-E8E3-447B-943E-FFE97F30743D\")] [ClassInterface(ClassInterfaceType.None)] public class TermbaseBrowserClass : TermbaseBrowser, ITermbaseBrowser Explicit Interface Implementations ITermbaseBrowser.Direction Declaration public virtual MtBrowseDirection ITermbaseBrowser.Direction { get; set; } Returns Type Description MtBrowseDirection ITermbaseBrowser.EntryID Declaration public virtual int ITermbaseBrowser.EntryID { get; set; } Returns Type Description System.Int32 ITermbaseBrowser.Execute() Declaration public virtual HitTerms ITermbaseBrowser.Execute() Returns Type Description HitTerms ITermbaseBrowser.IgnoreFilter Declaration public virtual bool ITermbaseBrowser.IgnoreFilter { get; set; } Returns Type Description System.Boolean ITermbaseBrowser.MaximumTermCount Declaration public virtual int ITermbaseBrowser.MaximumTermCount { get; set; } Returns Type Description System.Int32 ITermbaseBrowser.SourceIndex Declaration public virtual string ITermbaseBrowser.SourceIndex { get; set; } Returns Type Description System.String ITermbaseBrowser.StartTerm Declaration public virtual string ITermbaseBrowser.StartTerm { get; set; } Returns Type Description System.String ITermbaseBrowser.TargetIndex Declaration public virtual string ITermbaseBrowser.TargetIndex { get; set; } Returns Type Description System.String Implements TermbaseBrowser ITermbaseBrowser"
  },
  "api/Sdl.MultiTerm.TMO.Interop.TermbaseClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.TermbaseClass.html",
    "title": "Class TermbaseClass",
    "keywords": "Class TermbaseClass Inheritance System.Object TermbaseClass Implements Termbase ITermbase Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"68F04C0D-4683-4617-AE26-0266F0A1BA8F\")] [ClassInterface(ClassInterfaceType.None)] public class TermbaseClass : Termbase, ITermbase Explicit Interface Implementations ITermbase._Cookie Declaration public virtual string ITermbase._Cookie { get; } Returns Type Description System.String ITermbase._DefaultEntryClassID Declaration public virtual int ITermbase._DefaultEntryClassID { get; } Returns Type Description System.Int32 ITermbase._IsLocal Declaration public virtual bool ITermbase._IsLocal { get; } Returns Type Description System.Boolean ITermbase._Path Declaration public virtual string ITermbase._Path { get; } Returns Type Description System.String ITermbase._Reorganise(Boolean, Boolean, Int32) Declaration public virtual void ITermbase._Reorganise(bool vb_encrypt, bool vb_markReadOnly, int l_expiryDate) Parameters Type Name Description System.Boolean vb_encrypt System.Boolean vb_markReadOnly System.Int32 l_expiryDate ITermbase._TermbaseAPIName Declaration public virtual string ITermbase._TermbaseAPIName { get; } Returns Type Description System.String ITermbase._TermbaseConnector Declaration public virtual object ITermbase._TermbaseConnector { get; } Returns Type Description System.Object ITermbase.AccessPermissions Declaration public virtual TermbaseAccessPermissions ITermbase.AccessPermissions { get; } Returns Type Description TermbaseAccessPermissions ITermbase.ActiveFilter Declaration public virtual FilterDefinition ITermbase.ActiveFilter { get; } Returns Type Description FilterDefinition ITermbase.AddBLOB(Int32, String, String) Declaration public virtual int ITermbase.AddBLOB(int EntryID, string tag, string blob) Parameters Type Name Description System.Int32 EntryID System.String tag System.String blob Returns Type Description System.Int32 ITermbase.Browse Declaration public virtual TermbaseBrowser ITermbase.Browse { get; } Returns Type Description TermbaseBrowser ITermbase.ChangeDate Declaration public virtual DateTime ITermbase.ChangeDate { get; } Returns Type Description System.DateTime ITermbase.Close() Declaration public virtual void ITermbase.Close() ITermbase.CopyrightText Declaration public virtual string ITermbase.CopyrightText { get; } Returns Type Description System.String ITermbase.DefaultEntryClass Declaration public virtual string ITermbase.DefaultEntryClass { get; } Returns Type Description System.String ITermbase.Definition Declaration public virtual TermbaseDefinition ITermbase.Definition { get; } Returns Type Description TermbaseDefinition ITermbase.Delete() Declaration public virtual void ITermbase.Delete() ITermbase.DownloadedCopyrightIcoPath Declaration public virtual string ITermbase.DownloadedCopyrightIcoPath { get; } Returns Type Description System.String ITermbase.DownloadedCopyrightInfoPath Declaration public virtual string ITermbase.DownloadedCopyrightInfoPath { get; } Returns Type Description System.String ITermbase.DownloadedCopyrightSplashPath Declaration public virtual string ITermbase.DownloadedCopyrightSplashPath { get; } Returns Type Description System.String ITermbase.Entries Declaration public virtual Entries ITermbase.Entries { get; } Returns Type Description Entries ITermbase.ExpiryDate Declaration public virtual DateTime ITermbase.ExpiryDate { get; } Returns Type Description System.DateTime ITermbase.ExportDefinitions Declaration public virtual ExportDefinitions ITermbase.ExportDefinitions { get; } Returns Type Description ExportDefinitions ITermbase.ExtractToFile(String) Declaration public virtual void ITermbase.ExtractToFile(string bstr_localFile) Parameters Type Name Description System.String bstr_localFile ITermbase.FilterDefinitions Declaration public virtual FilterDefinitions ITermbase.FilterDefinitions { get; } Returns Type Description FilterDefinitions ITermbase.GetHomonyms(String, String, String) Declaration public virtual Homonyms ITermbase.GetHomonyms(string Index, string Source, string Target) Parameters Type Name Description System.String Index System.String Source System.String Target Returns Type Description Homonyms ITermbase.ImportDefinitions Declaration public virtual ImportDefinitions ITermbase.ImportDefinitions { get; } Returns Type Description ImportDefinitions ITermbase.IncompleteEntries Declaration public virtual IncompleteEntries ITermbase.IncompleteEntries { get; } Returns Type Description IncompleteEntries ITermbase.Information Declaration public virtual TermbaseInformation ITermbase.Information { get; } Returns Type Description TermbaseInformation ITermbase.InputModelDefinitions Declaration public virtual InputModelDefinitions ITermbase.InputModelDefinitions { get; } Returns Type Description InputModelDefinitions ITermbase.IsPublished Declaration public virtual bool ITermbase.IsPublished { get; } Returns Type Description System.Boolean ITermbase.IsReadOnly Declaration public virtual bool ITermbase.IsReadOnly { get; } Returns Type Description System.Boolean ITermbase.LayoutDefinitions Declaration public virtual LayoutDefinitions ITermbase.LayoutDefinitions { get; } Returns Type Description LayoutDefinitions ITermbase.LockedEntries Declaration public virtual LockedEntries ITermbase.LockedEntries { get; } Returns Type Description LockedEntries ITermbase.LockedEntryInfos Declaration public virtual LockedEntryInfos ITermbase.LockedEntryInfos { get; } Returns Type Description LockedEntryInfos ITermbase.Name Declaration public virtual string ITermbase.Name { get; } Returns Type Description System.String ITermbase.Reorganise() Declaration public virtual void ITermbase.Reorganise() ITermbase.Search Declaration public virtual TermbaseSearch ITermbase.Search { get; } Returns Type Description TermbaseSearch Implements Termbase ITermbase"
  },
  "api/Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.html",
    "title": "Interface TermbaseDefinition",
    "keywords": "Interface TermbaseDefinition Inherited Members ITermbaseDefinition.StartWizard() ITermbaseDefinition.Save(String) ITermbaseDefinition.Fields ITermbaseDefinition.Indexes ITermbaseDefinition._Definition ITermbaseDefinition._Object ITermbaseDefinition._Schema Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"62031F81-32AF-4B0B-9458-DC2C182DC511\")] public interface TermbaseDefinition : ITermbaseDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.TermbaseDefinitionClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.TermbaseDefinitionClass.html",
    "title": "Class TermbaseDefinitionClass",
    "keywords": "Class TermbaseDefinitionClass Inheritance System.Object TermbaseDefinitionClass Implements TermbaseDefinition ITermbaseDefinition Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"EBC65D81-6CCC-4415-ADED-2BFFA6C8D9E6\")] public class TermbaseDefinitionClass : TermbaseDefinition, ITermbaseDefinition Explicit Interface Implementations ITermbaseDefinition._Definition Declaration public virtual string ITermbaseDefinition._Definition { get; } Returns Type Description System.String ITermbaseDefinition._Object Declaration public virtual string ITermbaseDefinition._Object { get; } Returns Type Description System.String ITermbaseDefinition._Schema Declaration public virtual string ITermbaseDefinition._Schema { get; } Returns Type Description System.String ITermbaseDefinition.Fields Declaration public virtual DescriptiveFields ITermbaseDefinition.Fields { get; } Returns Type Description DescriptiveFields ITermbaseDefinition.Indexes Declaration public virtual Indexes ITermbaseDefinition.Indexes { get; } Returns Type Description Indexes ITermbaseDefinition.Save(String) Declaration public virtual void ITermbaseDefinition.Save(string FileName) Parameters Type Name Description System.String FileName ITermbaseDefinition.StartWizard() Declaration public virtual void ITermbaseDefinition.StartWizard() Implements TermbaseDefinition ITermbaseDefinition"
  },
  "api/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.html",
    "title": "Interface TermbaseInformation",
    "keywords": "Interface TermbaseInformation Inherited Members ITermbaseInformation.Refresh() ITermbaseInformation.Name ITermbaseInformation.Size ITermbaseInformation.CreationDate ITermbaseInformation.TotalNumberOfEntries ITermbaseInformation.NumberOfEntriesInIndex[String] ITermbaseInformation.Description ITermbaseInformation.Path Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"4D4B4A86-41E2-4C74-BF37-A917D0FA1AA6\")] public interface TermbaseInformation : ITermbaseInformation"
  },
  "api/Sdl.MultiTerm.TMO.Interop.TermbaseInformationClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.TermbaseInformationClass.html",
    "title": "Class TermbaseInformationClass",
    "keywords": "Class TermbaseInformationClass Inheritance System.Object TermbaseInformationClass Implements TermbaseInformation ITermbaseInformation Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"361AC6A6-E4C9-40E6-A98E-5BAD6CE20B23\")] [ClassInterface(ClassInterfaceType.None)] public class TermbaseInformationClass : TermbaseInformation, ITermbaseInformation Explicit Interface Implementations ITermbaseInformation.CreationDate Declaration public virtual string ITermbaseInformation.CreationDate { get; } Returns Type Description System.String ITermbaseInformation.Description Declaration public virtual string ITermbaseInformation.Description { get; } Returns Type Description System.String ITermbaseInformation.Name Declaration public virtual string ITermbaseInformation.Name { get; } Returns Type Description System.String ITermbaseInformation.NumberOfEntriesInIndex[String] Declaration public virtual int ITermbaseInformation.NumberOfEntriesInIndex { get; } Parameters Type Name Description System.String Index Returns Type Description System.Int32 ITermbaseInformation.Path Declaration public virtual string ITermbaseInformation.Path { get; } Returns Type Description System.String ITermbaseInformation.Refresh() Declaration public virtual void ITermbaseInformation.Refresh() ITermbaseInformation.Size Declaration public virtual string ITermbaseInformation.Size { get; } Returns Type Description System.String ITermbaseInformation.TotalNumberOfEntries Declaration public virtual int ITermbaseInformation.TotalNumberOfEntries { get; } Returns Type Description System.Int32 Implements TermbaseInformation ITermbaseInformation"
  },
  "api/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.html",
    "title": "Interface TermbaseRepository",
    "keywords": "Interface TermbaseRepository Inherited Members ITermbaseRepository.Connect(String, String) ITermbaseRepository.Disconnect() ITermbaseRepository.ChangePassword(String, String) ITermbaseRepository.ConnectWithAuthServerConnection(Object, String) ITermbaseRepository.ConnectEx(String, String, CredentialsPersistOption) ITermbaseRepository.ConnectSso(String, String, CredentialsPersistOption) ITermbaseRepository.Location ITermbaseRepository.Protocol ITermbaseRepository.Termbases ITermbaseRepository.IsRemote ITermbaseRepository.IsConnected ITermbaseRepository.DatabaseType ITermbaseRepository.ServerVersion ITermbaseRepository.TerminologyConnectorCOM Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"86D5591A-B497-41BB-ADFD-FAE3CF814D8B\")] public interface TermbaseRepository : ITermbaseRepository"
  },
  "api/Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.html",
    "title": "Class TermbaseRepositoryClass",
    "keywords": "Class TermbaseRepositoryClass Inheritance System.Object TermbaseRepositoryClass Implements TermbaseRepository ITermbaseRepository Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"3C0080CE-F43D-413B-8F11-DB1304247A61\")] [ClassInterface(ClassInterfaceType.None)] public class TermbaseRepositoryClass : TermbaseRepository, ITermbaseRepository Explicit Interface Implementations ITermbaseRepository.ChangePassword(String, String) Declaration public virtual void ITermbaseRepository.ChangePassword(string NewPassword, string OldPassword) Parameters Type Name Description System.String NewPassword System.String OldPassword ITermbaseRepository.Connect(String, String) Declaration public virtual MtUserType ITermbaseRepository.Connect(string UserId, string Password) Parameters Type Name Description System.String UserId System.String Password Returns Type Description MtUserType ITermbaseRepository.ConnectEx(String, String, CredentialsPersistOption) Declaration public virtual MtUserType ITermbaseRepository.ConnectEx(string UserId, string Password, CredentialsPersistOption CredentialsPersistOption) Parameters Type Name Description System.String UserId System.String Password CredentialsPersistOption CredentialsPersistOption Returns Type Description MtUserType ITermbaseRepository.ConnectSso(String, String, CredentialsPersistOption) Declaration public virtual MtUserType ITermbaseRepository.ConnectSso(string UserId, string SamlToken, CredentialsPersistOption CredentialsPersistOption) Parameters Type Name Description System.String UserId System.String SamlToken CredentialsPersistOption CredentialsPersistOption Returns Type Description MtUserType ITermbaseRepository.ConnectWithAuthServerConnection(Object, String) Declaration public virtual MtUserType ITermbaseRepository.ConnectWithAuthServerConnection(object pxo_ServerConnection, string UserId) Parameters Type Name Description System.Object pxo_ServerConnection System.String UserId Returns Type Description MtUserType ITermbaseRepository.DatabaseType Declaration public virtual MtDatabaseType ITermbaseRepository.DatabaseType { get; set; } Returns Type Description MtDatabaseType ITermbaseRepository.Disconnect() Declaration public virtual void ITermbaseRepository.Disconnect() ITermbaseRepository.IsConnected Declaration public virtual bool ITermbaseRepository.IsConnected { get; } Returns Type Description System.Boolean ITermbaseRepository.IsRemote Declaration public virtual bool ITermbaseRepository.IsRemote { get; } Returns Type Description System.Boolean ITermbaseRepository.Location Declaration public virtual string ITermbaseRepository.Location { get; set; } Returns Type Description System.String ITermbaseRepository.Protocol Declaration public virtual MtCommunicationType ITermbaseRepository.Protocol { get; set; } Returns Type Description MtCommunicationType ITermbaseRepository.ServerVersion Declaration public virtual int ITermbaseRepository.ServerVersion { get; } Returns Type Description System.Int32 ITermbaseRepository.Termbases Declaration public virtual Termbases ITermbaseRepository.Termbases { get; } Returns Type Description Termbases ITermbaseRepository.TerminologyConnectorCOM Declaration public virtual object ITermbaseRepository.TerminologyConnectorCOM { get; } Returns Type Description System.Object Implements TermbaseRepository ITermbaseRepository"
  },
  "api/Sdl.MultiTerm.TMO.Interop.Termbases.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.Termbases.html",
    "title": "Interface Termbases",
    "keywords": "Interface Termbases Inherited Members ITermbases.GetEnumerator() ITermbases.New(String, String, String, String) ITermbases.Refresh() ITermbases.Add(String, String, String) ITermbases.Remove(Termbase, String) ITermbases.CheckTermbaseFileVersion(String) ITermbases.CheckTermbaseFileVersionEx(String, Boolean, Boolean) ITermbases.Item[Object] ITermbases.Count Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"8FD1BFA9-CBDF-42E9-81C7-1A6065596D54\")] public interface Termbases : ITermbases, IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.TermbasesClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.TermbasesClass.html",
    "title": "Class TermbasesClass",
    "keywords": "Class TermbasesClass Inheritance System.Object TermbasesClass Implements Termbases ITermbases System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"70A0931D-FB10-48B0-B997-C3932B0C1A84\")] public class TermbasesClass : Termbases, ITermbases, IEnumerable Explicit Interface Implementations ITermbases.Add(String, String, String) Declaration public virtual void ITermbases.Add(string Path, string Name, string Description) Parameters Type Name Description System.String Path System.String Name System.String Description ITermbases.CheckTermbaseFileVersion(String) Declaration public virtual bool ITermbases.CheckTermbaseFileVersion(string Path) Parameters Type Name Description System.String Path Returns Type Description System.Boolean ITermbases.CheckTermbaseFileVersionEx(String, out Boolean, out Boolean) Declaration public virtual bool ITermbases.CheckTermbaseFileVersionEx(string Path, out bool pvbUpdateable, out bool pvbNewerVersion) Parameters Type Name Description System.String Path System.Boolean pvbUpdateable System.Boolean pvbNewerVersion Returns Type Description System.Boolean ITermbases.Count Declaration public virtual int ITermbases.Count { get; } Returns Type Description System.Int32 ITermbases.GetEnumerator() Declaration public virtual IEnumerator ITermbases.GetEnumerator() Returns Type Description System.Collections.IEnumerator ITermbases.Item[Object] Declaration public virtual Termbase ITermbases.this[object Index] { get; } Parameters Type Name Description System.Object Index Returns Type Description Termbase ITermbases.New(String, String, String, String) Declaration public virtual Termbase ITermbases.New(string TermbaseName, string Description, string TermbaseDefinitionFile, string TermbaseDestinationFilePath) Parameters Type Name Description System.String TermbaseName System.String Description System.String TermbaseDefinitionFile System.String TermbaseDestinationFilePath Returns Type Description Termbase ITermbases.Refresh() Declaration public virtual void ITermbases.Refresh() ITermbases.Remove(Termbase, String) Declaration public virtual void ITermbases.Remove(Termbase Termbase, string DestinationPath) Parameters Type Name Description Termbase Termbase System.String DestinationPath Implements Termbases ITermbases System.Collections.IEnumerable"
  },
  "api/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.html",
    "title": "Interface TermbaseSearch",
    "keywords": "Interface TermbaseSearch Inherited Members ITermbaseSearch.Execute() ITermbaseSearch.Advise(MultiSearch) ITermbaseSearch.Unadvise() ITermbaseSearch.CancelSearch() ITermbaseSearch.SearchExpression ITermbaseSearch.SourceIndex ITermbaseSearch.Direction ITermbaseSearch.MaximumHits ITermbaseSearch.LastTerm ITermbaseSearch.StartingEntryID ITermbaseSearch.TargetIndex ITermbaseSearch.FuzzySearch ITermbaseSearch.SearchExistTarget Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [Guid(\"0018F8A4-CF2E-4C49-BA8A-89EAAE25F02A\")] public interface TermbaseSearch : ITermbaseSearch"
  },
  "api/Sdl.MultiTerm.TMO.Interop.TermbaseSearchClass.html": {
    "href": "api/Sdl.MultiTerm.TMO.Interop.TermbaseSearchClass.html",
    "title": "Class TermbaseSearchClass",
    "keywords": "Class TermbaseSearchClass Inheritance System.Object TermbaseSearchClass Implements TermbaseSearch ITermbaseSearch Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Sdl.MultiTerm.TMO.Interop Assembly : Sdl.MultiTerm.TMO.Interop.dll Syntax [ClassInterface(ClassInterfaceType.None)] [Guid(\"3F9C1C88-74B7-44A9-8925-D59CD29B4A38\")] public class TermbaseSearchClass : TermbaseSearch, ITermbaseSearch Explicit Interface Implementations ITermbaseSearch.Advise(MultiSearch) Declaration public virtual void ITermbaseSearch.Advise(MultiSearch AdvancedSearchObject) Parameters Type Name Description MultiSearch AdvancedSearchObject ITermbaseSearch.CancelSearch() Declaration public virtual void ITermbaseSearch.CancelSearch() ITermbaseSearch.Direction Declaration public virtual MtSearchDirection ITermbaseSearch.Direction { get; set; } Returns Type Description MtSearchDirection ITermbaseSearch.Execute() Declaration public virtual HitTerms ITermbaseSearch.Execute() Returns Type Description HitTerms ITermbaseSearch.FuzzySearch Declaration public virtual bool ITermbaseSearch.FuzzySearch { get; set; } Returns Type Description System.Boolean ITermbaseSearch.LastTerm Declaration public virtual string ITermbaseSearch.LastTerm { set; } Returns Type Description System.String ITermbaseSearch.MaximumHits Declaration public virtual int ITermbaseSearch.MaximumHits { get; set; } Returns Type Description System.Int32 ITermbaseSearch.SearchExistTarget Declaration public virtual bool ITermbaseSearch.SearchExistTarget { get; set; } Returns Type Description System.Boolean ITermbaseSearch.SearchExpression Declaration public virtual string ITermbaseSearch.SearchExpression { get; set; } Returns Type Description System.String ITermbaseSearch.SourceIndex Declaration public virtual string ITermbaseSearch.SourceIndex { get; set; } Returns Type Description System.String ITermbaseSearch.StartingEntryID Declaration public virtual int ITermbaseSearch.StartingEntryID { get; set; } Returns Type Description System.Int32 ITermbaseSearch.TargetIndex Declaration public virtual string ITermbaseSearch.TargetIndex { get; set; } Returns Type Description System.String ITermbaseSearch.Unadvise() Declaration public virtual void ITermbaseSearch.Unadvise() Implements TermbaseSearch ITermbaseSearch"
  },
  "apiconcepts/Acknowledgments.html": {
    "href": "apiconcepts/Acknowledgments.html",
    "title": "Acknowledgments",
    "keywords": "Acknowledgments MultiTerm includes open source or similar third-party software. log4net Version: 2.0.8 Vendor: The Apache Software Foundation Copyright: Copyright 2004-2017 The Apache Software Foundation License type: Apache 2.0 License details: https://logging.apache.org/log4net/license.html Newtonsoft.Json Version: 12.0.2 Vendor: James Newton-King Copyright: Copyright (c) 2007 James Newton-King License type: MIT License details: https://raw.githubusercontent.com/JamesNK/Newtonsoft.Json/master/LICENSE.md ICSharpCode.SharpZipLib Version: 1.2.0 Vendor: ICSharpCode Copyright: Copyright © 2000-2018 SharpZipLib Contributors License type: MIT License details: https://github.com/icsharpcode/SharpZipLib/blob/master/LICENSE.txt Reactjs Version: 5.3.0 Vendor: Facebook Copyright: Copyright (c) Facebook, Inc. and its affiliates. License type: MIT License details: https://github.com/facebook/react/blob/master/LICENSE CTreeStd.dll Version: N/A Vendor: Microsoft Corporation Copyright: Copyright 1984-1995 FairCom Corporation License type: N/A License details: https://www.processlibrary.com/en/directory/files/ctreestd/308342/ PowerCollections Version: 1.0.0.0 Vendor: Wintellect Copyright: Copyright 2015 Wintellect License type: EPL License details: https://www.nuget.org/packages/Stakata.Wintellect.PowerCollections/1.0.4/License xunit Version: 2.4.1 Vendor: James Newkirk, Brad Wilson Copyright: License type: Apache 2.0 License details: http://apache.org/licenses/LICENSE-2.0 MSTest.TestAdapter Version: 1.4.0 Vendor: Microsoft Copyright: License type: MIT License details: https://opensource.org/licenses/MIT MSTest.TestFramework Version: 1.4.0 Vendor: Microsoft Copyright: License type: MIT License details: https://opensource.org/licenses/MIT System.Reactive Version: 4.3.2 Vendor: .NET Foundation and Contributors Copyright: Copyright (c) .NET Foundation and Contributors. License type: MIT License details: https://github.com/dotnet/reactive/blob/main/LICENSE MahApps.Metro Version: 1.5.0 Vendor: Community project Copyright: Copyright (c) 2011 - 2020 MahApps and Contributors.Copyright (c) 2020 .NET Foundation and Contributors. All rights reserved. License type: MIT License details: https://opensource.org/licenses/MIT Microsoft.WindowsAPICodePack Version: 1.1.0.0 Vendor: AYBE Copyright: Copyright (c) Microsoft Corporation License type: Custom License License details: https://github.com/aybe/Windows-API-Code-Pack-1.1/blob/master/LICENCE Microsoft.WindowsAPICodePack.Shell Version: 1.1.0 Vendor: AYBE Copyright: Copyright (c) Microsoft Corporation License type: Custom License License details: https://github.com/aybe/Windows-API-Code-Pack-1.1/blob/master/LICENCE Parent topic: MultiTerm Desktop SDK This Software Development Kit (SDK) contains an introduction to the MultiTerm Client API as well as a full programming reference. It contains various practical examples of how to implement functionality into third-party party applications and custom workflows.\""
  },
  "apiconcepts/adding.html": {
    "href": "apiconcepts/adding.html",
    "title": "Adding new Entries",
    "keywords": "Adding new Entries To add new entries to a termbase, you first need to 'construct' the entry XML content to store in the termbase. Below you see a simplified example of what a MultiTerm XML entry can look like: <conceptGrp> <system type=\"entryClass\">1</system> <languageGrp> <language type=\"English\" lang=\"EN\"/> <termGrp> <term>starship</term> </termGrp> </languageGrp> </conceptGrp> For more detailed information on the MultiTerm XML format, please refer to the MTF Schema . To add the above entry XML as a new entry to a selected termbase, you first have to store the XML stream in a string variable, e.g.: String entryContent = \"<conceptGrp> .... </conceptGrp>\" Then you need to apply the New method to the termbase entries collection, i.e.: Entries oEntries = oTb.Entries; oEntries.New (entryContent, true); The second parameter is a boolean parameter that indicates whether the new entry should be flagged as incomplete. An entry is considered incomplete when it lacks one or more fields that are mandatory according to the termbase definition. Note that the New method does not verify whether the entry XML content is complete according to the termbase definition or not. This means that if you want to check for completeness, you would have to implement the verification logic yourself on the client side. Depending on the outcome of this verification you can set the boolean parameter to true or false . When implementing a quick entry function, e.g. to add new entries from MS Word to the termbase, you may set this parameter always to true by default. That way you can make sure that any entries added via your quick entry function can be singled out easily for post-editing using the 'Incomplete Search' of MultiTerm Workstation. Note that the entry number is not provided in the XML content. The number will be generated automatically upon adding the entry."
  },
  "apiconcepts/connect.html": {
    "href": "apiconcepts/connect.html",
    "title": "Connecting to a MultiTerm Server",
    "keywords": "Connecting to a MultiTerm Server The first thing you need to do before you can access MultiTerm client functionality programmatically is to initiate a MultiTerm client object instance, i.e.: Sdl.MultiTerm.TMO.Interop.Application oMt = new Sdl.MultiTerm.TMO.Interop.ApplicationClass(); From the MultiTerm client object you can connect to two termbase repositories: a local and/or a remote (server) repository. Local termbases are stored as *.sdltb files on the user's hard disk. Local termbase repositories do not require authentication. Nevertheless you need to apply the Connect method to the local repository and provide the user name and login. However, you may just provide two empty strings as login parameters, i.e.: TermbaseRepository oLocalRep = oMt.LocalRepository; oLocalRep.Connect(\"\",\"\"); Debug.WriteLine(\"Connection successful: \" + oLocalRep.IsConnected); Connecting to a remote, i.e. server repository requires you to enter a 'real' user name and password. In addition you need to specify the server name (location), e.g.: Sdl.MultiTerm.TMO.Interop.Application oMt = new Sdl.MultiTerm.TMO.Interop.ApplicationClass(); TermbaseRepository oServerRep = oMt.ServerRepository; oServerRep.Connect(\"guest\",\"guest\"); oServerRep.Location = \"http://termserver\"; Debug.WriteLine(\"Connection successful: \" + oServerRep.IsConnected);"
  },
  "apiconcepts/entry.html": {
    "href": "apiconcepts/entry.html",
    "title": "Retrieving Entry Content",
    "keywords": "Retrieving Entry Content MultiTerm entries are physically stored as XML blobs in the database backend. Retrieving an entry basically involves retrieving the XML content from the database. Once you have retrieved the content of an entry, you can, for example, parse it using the DOM API, apply an XSL stylesheet to it for transformation, etc. In the first step you need to create a termbase entries collection object using the Entries class, e.g.: Entries oEntries = oTermbase.Entries; To pick a particular entry, you need to provide the corresponding entry id. The entry id is used to uniquely identify an entry, e.g.: Entry oEntry = oEntries.Item(5); The above sample code selects the entry with the id 5. Take care to provide only entry ids that actually exist in the termbase. Otherwise, an exception will be thrown. The entry content can be retrieved in the following way: Debug.Write(oEntry.Content.Content); The above line will output the complete entry XML content. Let's take this one step further: suppose you would like to develop a MultiTerm client application that allows users to display the entire entry by clicking the corresponding hit term in the hit list. This can be done easily, as the **HitTerm **object allows you to retrieve the id of the entry a hit term comes from. Example: HitTerms oHits = oSearch.Execute(); Debug.WriteLine(\"Hit count: \" + oHits.Count.ToString()); for(int i=0;i<oHits.Count;i++) { Debug.WriteLine(oHits[i].Text); //retrieve entry id for current hit term int thisEntryId = Convert.ToInt32(oHits[i].ParentEntryID); oEntry = oEntries[thisEntryId]; //output content of current entry Debug.WriteLine(oEntry.Content.Content); } The above sample code executes a search and stores the search results in a HitTerms object. The code then loops through all hits, retrieves the entry id of each hit, and then outputs the entire entry content for each hit term."
  },
  "apiconcepts/LegalNotice.html": {
    "href": "apiconcepts/LegalNotice.html",
    "title": "Legal notice",
    "keywords": "Legal notice Copyright and trademark information relating to this product release. Copyright © 2000–2020 SDL as part of the RWS Holdings Plc group of companies (\"RWS Group\"). SDL means SDL Limited and its subsidiaries and affiliates. All intellectual property rights contained herein are the sole and exclusive rights of SDL. All references to SDL shall mean SDL Limited and its subsidiaries and affiliates details of which can be obtained upon written request. All rights reserved. Unless explicitly stated otherwise, all intellectual property rights including those in copyright in the content of this website and documentation are owned by or controlled for these purposes by SDL. Except as otherwise expressly permitted hereunder or in accordance with copyright legislation, the content of this site, and/or the documentation may not be copied, reproduced, republished, downloaded, posted, broadcast or transmitted in any way without the express written permission of SDL. MultiTerm is a registered trademark of SDL. All other trademarks are the property of their respective owners. The names of other companies and products mentioned herein may be the trademarks of their respective owners. Unless stated to the contrary, no association with any other company or product is intended or should be inferred. This product may include open source or similar third-party software, details of which can be found by clicking the following link: Acknowledgments. Although RWS Group takes all reasonable measures to provide accurate and comprehensive information about the product, this information is provided as-is and all warranties, conditions or other terms concerning the documentation whether express or implied by statute, common law or otherwise (including those relating to satisfactory quality and fitness for purposes) are excluded to the extent permitted by law. To the maximum extent permitted by law, RWS Group shall not be liable in contract, tort (including negligence or breach of statutory duty) or otherwise for any loss, injury, claim liability or damage of any kind or arising out of, or in connection with, the use or performance of the Software Documentation even if such losses and/or damages were foreseen, foreseeable or known, for: (a) loss of, damage to or corruption of data, (b) economic loss, (c) loss of actual or anticipated profits, (d) loss of business revenue, (e) loss of anticipated savings, (f) loss of business, (g) loss of opportunity, (h) loss of goodwill, or (i) any indirect, special, incidental or consequential loss or damage howsoever caused. All Third Party Software is licensed \"as is.\" Licensor makes no warranties, express, implied, statutory or otherwise with respect to the Third Party Software, and expressly disclaims all implied warranties of non-infringement, merchantability and fitness for a particular purpose. In no event will Licensor be liable for any damages, including loss of data, lost profits, cost of cover or other special, incidental, consequential, direct, actual, general or indirect damages arising from the use of the Third Party Software or accompanying materials, however caused and on any theory of liability. This limitation will apply even if Licensor has been advised of the possibility of such damage. The parties acknowledge that this is a reasonable allocation of risk. Information in this documentation, including any URL and other Internet website references, is subject to change without notice. Without limiting the rights under copyright, no part of this may be reproduced, stored in or introduced into a retrieval system, or transmitted in any form or by any means (electronic, mechanical, photocopying, recording, or otherwise), or for any purpose, without the express written permission of RWS Group."
  },
  "apiconcepts/mt_convert_intro.html": {
    "href": "apiconcepts/mt_convert_intro.html",
    "title": "Introduction",
    "keywords": "Introduction What is MultiTerm Convert? MultiTerm Convert is a standalone wizard application that was designed to convert legacy data such as Excel spreadsheets, semi-colon delimited files, etc. into MultiTerm XML format (MTF). At the time of writing MultiTerm Convert was delivered with three conversion options: Conversion of the old MultiTerm 5 format (*.mtw files) into MTF Conversion of spreadsheet/database exchange formats (.e.g *.csv) into MTF Conversion of Microsoft Excel spreadsheets into MTF Conversion of SDL Termbase and SDL Termbase Online into MTF Conversion of OLIF lexicons into MTF Conversion of TBX files into MTF All conversion options are implemented as plug-ins, which are located in the *Plugins **sub-folder of the MultiTerm Convert installation directory, usually *C:\\Program Files\\SDL\\SDL MultiTerm\\MultiTerm8\\Convert\\Plugins . Upon startup of MultiTerm Convert the application scans the **Plugins **sub-folder for any *.dll libraries that implement a particular set of interfaces. If a *.dll is found to implement the required interfaces, it is recognized as a MultiTerm Convert plug-in, and will consequently be listed on the \"Available conversion options\" screen. Setting-up a New Project First create a new Class Library project in MS Visual Studio. The sample plug-in will be implemented in C#. You need to add the following references to your project: Trados.MultiTerm.Builders.dll Trados.MultiTerm.Conversion.Api.dll Trados.MultiTerm.Plugins.dll Trados.MultiTerm.Utility.dll Trados.MultiTerm.Wizard.dll You can find these libraries in the MultiTerm Convert installation path, usually C:\\Programme\\TRADOS\\MultiTerm\\MultiTermConvert ."
  },
  "apiconcepts/MTF/DatatypeReference.html": {
    "href": "apiconcepts/MTF/DatatypeReference.html",
    "title": "Datatype Reference",
    "keywords": "Datatype Reference bin.base64 datatype MIME-style Base64 encoded binary BLOB. bin.hex datatype Hexadecimal digits representing octets. boolean datatype 0 or 1, where 0 == \"false\" and 1 ==\"true\". char datatype String, one character long. date datatype Date in a subset ISO 8601 format, without the time data. For example: \"1994-11-05\". dateTime datatype Date in a subset of ISO 8601 format, with optional time and no optional zone. Fractional seconds can be as precise as nanoseconds. For example, \"1988-04-07T18:39:09\". dateTime.tz datatype Date in a subset ISO 8601 format, with optional time and optional zone. Fractional seconds can be as precise as nanoseconds. For example: \"1988-04-07T18:39:09-08:00\". entity datatype Represents the XML ENTITY type. entities datatype Represents the XML ENTITIES type. enumeration datatype Represents an enumerated type (supported on attributes only). fixed.14.4 datatype Same as \"number\" but no more than 14 digits to the left of the decimal point, and no more than 4 to the right. float datatype Real number, with no limit on digits; can potentially have a leading sign, fractional digits, and optionally an exponent. Punctuation as in U.S. English. Values range from 1.7976931348623157E+308 to 2.2250738585072014E-308. id datatype Represents the XML ID type. idref datatype Represents the XML IDREF type. idrefs datatype Represents the XML IDREFS type. int datatype Number, with optional sign, no fractions, and no exponent. nmtoken datatype Represents the XML NMTOKEN type. nmtokens datatype Represents the XML NMTOKENS type. notation datatype Represents a NOTATION type. number datatype Number, with no limit on digits; can potentially have a leading sign, fractional digits, and optionally an exponent. Punctuation as in U.S. English. (Values have same range as most significant number, R8, 1.7976931348623157E+308 to 2.2250738585072014E-308.) string datatype Represents a string type. time datatype Time in a subset ISO 8601 format, with no date and no time zone. For example: \"08:15:27\". time.tz datatype Time in a subset ISO 8601 format, with no date but optional time zone. For example: \"08:1527-05:00\". i1 datatype Integer represented in one byte. A number, with optional sign, no fractions, no exponent. For example: \"1, 127, -128\". i2 datatype Integer represented in one word. A number, with optional sign, no fractions, no exponent. For example: \"1, 703, -32768\". i4 datatype Integer represented in four bytes. A number, with optional sign, no fractions, no exponent. For example: \"1, 703, -32768, 148343, -1000000000\". r4 datatype Real number, with seven digit precision; can potentially have a leading sign, fractional digits, and optionally an exponent. Punctuation as in U.S. English. Values range from 3.40282347E+38F to 1.17549435E-38F. r8 Real number, with 15 digit precision; can potentially have a leading sign, fractional digits, and optionally an exponent. Punctuation as in U.S. English. Values range from 1.7976931348623157E+308 to 2.2250738585072014E-308. ui1 datatype Unsigned integer. A number, unsigned, no fractions, no exponent. For example: \"1, 255\". ui2 datatype Unsigned integer, two bytes. A number, unsigned, no fractions, no exponent. For example: \"1, 255, 65535\". ui4 datatype Unsigned integer, four bytes. A number, unsigned, no fractions, no exponent. For example: \"1, 703, 3000000000\". uri datatype Universal Resource Identifier (URI). For example, \"urn:schemas-microsoft-com:Office9\". uuid datatype Hexadecimal digits representing octets, optional embedded hyphens that are ignored. For example: \"333C7BC4-460F-11D0-BC04-0080C7055A83\". This documentation is automatically generated using XSL. Stylesheet available at http://msdn.microsoft.com/xml ."
  },
  "apiconcepts/MTF/MTFAttributes.html": {
    "href": "apiconcepts/MTF/MTFAttributes.html",
    "title": "MTF Attributes",
    "keywords": "MTF Attributes <MTF Blink> Link to a bibliographic entry (stored in the same database). syntax: [ Blink = string ] required: no datatype: string elements: MTF source: <AttributeType name=\"Blink\" dt:type=\"string\" required=\"no\"> <description>Link to a bibliographic entry (stored in the same database).</description> </AttributeType> <MTF Clink> Link to a concept (stored in the same database). The link target is an entrynumber. syntax: [ Clink = string ] required: no datatype: string elements: MTF source: <AttributeType name=\"Clink\" dt:type=\"string\" required=\"no\"> <description>Link to a concept (stored in the same database). The link target is an entrynumber.</description> </AttributeType> <MTF datatype> syntax: [ datatype = string ] required: no (default) datatype: string elements: MTF source: <AttributeType name=\"datatype\" dt:type=\"string\"/> <MTF Glink> Link to a graphics file (not stored in the database). The link target is a filename. syntax: [ Glink = string ] required: no datatype: string elements: MTF source: <AttributeType name=\"Glink\" dt:type=\"string\" required=\"no\"> <description>Link to a graphics file (not stored in the database). The link target is a filename.</description> </AttributeType> <MTF id> syntax: [ id = string ] required: no (default) datatype: string elements: MTF source: <AttributeType name=\"lang\" dt:type=\"string\"/> <MTF lang> syntax: [ lang = string ] required: no (default) datatype: string elements: MTF source: <AttributeType name=\"lang\" dt:type=\"string\"/> <MTF Plink> Link to a user (stored in user manager). The link target is the user name (user id). syntax: [ Plink = string ] required: no datatype: string elements: MTF source: <AttributeType name=\"Plink\" dt:type=\"string\" required=\"no\"> <description>Link to a user (stored in user manager). The link target is the user name (user id).</description> </AttributeType> <MTF Slink> Link to node in a pick-tree (Subject value). syntax: [ Slink = string ] required: no datatype: string elements: MTF source: <AttributeType name=\"Slink\" dt:type=\"string\" required=\"no\"> <description>Link to node in a pick-tree (Subject value).</description> </AttributeType> <MTF Tlink> Link to a term (stored in the same database). The link target is \"index:term\". syntax: [ Tlink = string ] required: no datatype: string elements: MTF source: <AttributeType name=\"Tlink\" dt:type=\"string\" required=\"no\"> <description>Link to a term (stored in the same database). The link target is \"index:term\".</description> </AttributeType> <MTF type> syntax: [ type = string ] required: no (default) datatype: string elements: MTF source: <AttributeType name=\"type\" dt:type=\"string\"/> <system type> A system tag can be of type entryClass (values 1-8, inherited from old MTW databases) or type status (values: new, reviewed, approved). syntax: type = enumeration : entryClass | status required: yes datatype: enumeration values: entryClass | status elements: system source: <AttributeType name=\"type\" dt:type=\"enumeration\" dt:values=\"entryClass status\" required=\"yes\"> <description>A system tag can be of type entryClass (values 1-8, inherited from old MTW databases) or type status (values: new, reviewed, approved).</description> </AttributeType> <transac type> A transac tag can be of type origination (the associated field has been created) or type modification (the associated field has been modified). syntax: type = enumeration : origination | modification required: yes datatype: enumeration values: origination | modification elements: transac source: <AttributeType name=\"type\" dt:type=\"enumeration\" dt:values=\"origination modification\" required=\"yes\"> <description>A transac tag can be of type origination (the associated field has been created) or type modification (the associated field has been modified).</description> </AttributeType> <MTF Ulink> Link to a URL. The link target is specified in standard URL syntax. syntax: [ Ulink = string ] required: no datatype: string elements: MTF source: <AttributeType name=\"Ulink\" dt:type=\"string\" required=\"no\"> <description>Link to a URL. The link target is specified in standard URL syntax.</description> </AttributeType>"
  },
  "apiconcepts/MTF/MTFElements.html": {
    "href": "apiconcepts/MTF/MTFElements.html",
    "title": "MTF Elements",
    "keywords": "MTF Elements <concept> Primary element of a conceptGrp. Content is the entry number. syntax: <concept > ui4 datatype </concept> content: ui4 datatype order: Ignored when a datatype is specified. parents: conceptGrp children: No children allowed when a datatype is specified. attributes: (none) model: Treated as closed when a datatype is specified. source: <ElementType name=\"concept\" content=\"textOnly\" model=\"closed\" dt:type=\"ui4\"> <description>Primary element of a conceptGrp. Content is the entry number.</description> </ElementType> <conceptGrp> The container for one concept. A concept has concept-level, language-independent fields, and at least one language group, which contains at least one term. syntax: <conceptGrp> many <concept> [ <system> ] * [ <transacGrp> ] * [ <descripGrp> ] * <languageGrp> + </conceptGrp> content: eltOnly order: many parents: mtf children: concept, descripGrp, languageGrp, system, transacGrp attributes: (none) model: closed source: <ElementType name=\"conceptGrp\" content=\"eltOnly\" order=\"many\" model=\"closed\"> <description>The container for one concept. A concept has concept-level, language-independent fields, and at least one language group, which contains at least one term. </description> <element type=\"concept\" minOccurs=\"1\" maxOccurs=\"1\"/> <!-- contains concept-level info and languages --><element type=\"system\" minOccurs=\"0\" maxOccurs=\" \"/><element type=\"transacGrp\" minOccurs=\"0\" maxOccurs=\" \"/><element type=\"descripGrp\" minOccurs=\"0\" maxOccurs=\" \"/><element type=\"languageGrp\" minOccurs=\"1\" maxOccurs=\" \"/> </ElementType> <date> A date in ISO-8601:1988 format, as implemented by MSXML2. syntax: <date > dateTime datatype </date> content: dateTime datatype order: Ignored when a datatype is specified. parents: transacGrp children: No children allowed when a datatype is specified. attributes: (none) model: Treated as closed when a datatype is specified. source: <ElementType name=\"date\" content=\"textOnly\" dt:type=\"dateTime\" model=\"closed\"> <description>A date in ISO-8601:1988 format, as implemented by MSXML2.</description> </ElementType> <descrip> Contains a descriptive, free-text element like a definition or a subject field. Content is formatted text, and the tag can carry a link attribute (link to concept, term, subject tree, graphics file, URL). syntax: <descrip [ Clink = string ] [ Glink = string ] [ Plink = string ] [ Slink = string ] [ Tlink = string ] [ type = string ] [ Ulink = string ] > (many) [ <xref> ] * mixed content </descrip> content: mixed order: many (default) parents: descripGrp children: xref attributes: Clink, Glink, Plink, Slink, Tlink, type, Ulink model: closed source: <ElementType name=\"descrip\" content=\"mixed\" model=\"closed\"> <description>Contains a descriptive, free-text element like a definition or a subject field. Content is formatted text, and the tag can carry a link attribute (link to concept, term, subject tree, graphics file, URL). </description> <element type=\"xref\" minOccurs=\"0\" maxOccurs=\" \"/> <attribute type=\"type\" required=\"yes\"/> <attribute type=\"Clink\"/> <attribute type=\"Glink\"/> <attribute type=\"Plink\"/> <attribute type=\"Slink\"/> <attribute type=\"Tlink\"/> <attribute type=\"Ulink\"/> </ElementType> <descripGrp> Contains a descriptive element, and optionally a source, transactional info, and a note. syntax: <descripGrp > <descrip many [ <transacGrp> ] * [ <descripGrp> ] * </descripGrp> content: eltOnly order: many parents: conceptGrp, descripGrp, languageGrp, termGrp children: descrip, descripGrp, transacGrp attributes: (none) model: closed source: <ElementType name=\"descripGrp\" content=\"eltOnly\" order=\"many\" model=\"closed\"> <description>Contains a descriptive element, and optionally a source, transactional info, and a note. </description> <element type=\"descrip\" minOccurs=\"1\" maxOccurs=\"1\"/> <element type=\"transacGrp\" minOccurs=\"0\" maxOccurs=\"\"/> <element type=\"descripGrp\" minOccurs=\"0\" maxOccurs=\" \"/> </ElementType> <language> A language specifier. The type attribute holds the \"name\" of the language as specified in the database definition, the lang attribute the locale in the form \"en_us\". syntax: <language [ lang = string ] [ type = string ] /> content: empty order: seq parents: languageGrp children: (none) attributes: lang, type model: open (default) source: <ElementType name=\"language\" content=\"empty\" order=\"seq\"> <description>A language specifier. The type attribute holds the \"name\" of the language as specified in the database definition, the lang attribute the locale in the form \"en_us\". </description> <attribute type=\"type\" required=\"yes\"/> <attribute type=\"lang\" required=\"yes\"/> </ElementType> <languageGrp> The container for information about all terms in one language. syntax: <languageGrp > many <language> [ <transacGrp> ] * [ <descripGrp> ] * <termGrp> + </languageGrp > content: eltOnly order: many parents: conceptGrp children: descripGrp, language, termGrp, transacGrp attributes: (none) model: closed source: <ElementType name=\"languageGrp\" content=\"eltOnly\" order=\"many\" model=\"closed\"> <description>The container for information about all terms in one language.</description> <element type=\"language\" minOccurs=\"1\" maxOccurs=\"1\"/> <element type=\"transacGrp\" minOccurs=\"0\" maxOccurs=\"\"/> <element type=\"descripGrp\" minOccurs=\"0\" maxOccurs=\" \"/> <element type=\"termGrp\" minOccurs=\"1\" maxOccurs=\" \"/> </ElementType> <mtf> The root node of an MTF document. A document must contain at least one concept. syntax: <mtf> seg < conceptGrp > + </mtf > content: eltOnly order: seq parents: No parents found. This is probably the document element. children: conceptGrp attributes: (none) model: closed source: <ElementType name=\"mtf\" content=\"eltOnly\" order=\"seq\" model=\"closed\"> <description>The root node of an MTF document. A document must contain at least one concept. </description> <element type=\"conceptGrp\" minOccurs=\"1\" maxOccurs=\" \"/> </ElementType> <system> Contains system-maintained information like the old entry class and the approval status of a concept, language or term. The type attribute can be one of \"entryClass\" and \"status\". syntax: <system type = enumeration: entryClass | status > textOnly content </system> content: textOnly order: many (default) parents: conceptGrp children: No children allowed when content is textOnly. attributes: type model: closed source: <ElementType name=\"system\" content=\"textOnly\" model=\"closed\"> <description>Contains system-maintained information like the old entry class and the approval status of a concept, language or term. The type attribute can be one of \"entryClass\" and \"status\". </description> <AttributeType name=\"type\" dt:type=\"enumeration\" dt:values=\"entryClass status\" required=\"yes\"> <description>A system tag can be of type entryClass (values 1-8, inherited from old MTW databases) or type status (values: new, reviewed, approved).</description> </AttributeType> <attribute type=\"type\" required=\"yes\"/> </ElementType> <term> Contains a term as plain text. Note: we have requests for storing formatted terms containing sub- and superscript for mathematical and chemical formulae. This should be decided soon, IMHO it's doable. syntax: <term> textOnly content </term> content: textOnly order: many (default) parents: termGrp children: No children allowed when content is textOnly. attributes: (none) model: closed source: <ElementType name=\"term\" content=\"textOnly\" model=\"closed\"> <description>Contains a term as plain text. Note: we have requests for storing formatted terms containing sub- and superscript for mathematical and chemical formulae. This should be decided soon, IMHO it's doable. </description> </ElementType> <termGrp> Groups one term and all its associated information, which can be descriptions, source references, notes, and transactional information. syntax: <termGrp> many <term> [ <transacGrp> ] * [ <descripGrp> ] * </termGrp> content: eltOnly order: many parents: languageGrp children: descripGrp, term, transacGrp attributes: (none) model: closed source: <ElementType name=\"termGrp\" content=\"eltOnly\" order=\"many\" model=\"closed\"> <description>Groups one term and all its associated information, which can be descriptions, source references, notes, and transactional information. </description> <element type=\"term\" minOccurs=\"1\" maxOccurs=\"1\"/> <element type=\"transacGrp\" minOccurs=\"0\" maxOccurs=\"\"/> <element type=\"descripGrp\" minOccurs=\"0\" maxOccurs=\"*\"/> </ElementType> <transac> Contains a transaction type and responsible person. The type can be one of origination, modification. The content of the tag is the textual representation of the associated person link (Plink), i.e., the person's user id. syntax: <transac [ Plink = string ] type = enumeration: origination | modification > textOnly content </transac> content: textOnly order: many (default) parents: transacGrp children: No children allowed when content is textOnly. attributes: Plink, type model: closed source: <ElementType name=\"transac\" content=\"textOnly\" model=\"closed\"> <description>Contains a transaction type and responsible person. The type can be one of origination, modification. The content of the tag is the textual representation of the associated person link (Plink), i.e., the person's user id. </description> <AttributeType name=\"type\" dt:type=\"enumeration\" dt:values=\"origination modification\" required=\"yes\"> <description>A transac tag can be of type origination (the associated field has been created) or type modification (the associated field has been modified).</description> </AttributeType> <attribute type=\"type\" required=\"yes\"/> <attribute type=\"Plink\"/> </ElementType> <transacGrp> Contains a transaction and date, and optionally a note. syntax: <transacGrp> many <transac> <date> </transacGrp> content: eltOnly order: many parents: conceptGrp, descripGrp, languageGrp, termGrp children: date, transac attributes: (none) model: closed source: <ElementType name=\"transacGrp\" content=\"eltOnly\" order=\"many\" model=\"closed\"> <description>Contains a transaction and date, and optionally a note.</description> <element type=\"transac\" minOccurs=\"1\" maxOccurs=\"1\"/> <element type=\"date\" minOccurs=\"1\" maxOccurs=\"1\"/> </ElementType> <xref> Contains a descriptive, free-text element like a definition or a subject field. Content is formatted text, and the tag can carry a link attribute (link to concept, term, subject tree, graphics file, URL). syntax: <xref [ Tlink = string ] > textOnly content </xref> content: textOnly order: many (default) parents: descrip children: No children allowed when content is textOnly. attributes: Tlink model: closed source: <ElementType name=\"xref\" content=\"textOnly\" model=\"closed\"> <description>Contains a descriptive, free-text element like a definition or a subject field. Content is formatted text, and the tag can carry a link attribute (link to concept, term, subject tree, graphics file, URL). </description> <attribute type=\"Tlink\" required=\"yes\"/> </ElementType> Parent topic: XML Schema: MTF"
  },
  "apiconcepts/MTF/MTFSource.html": {
    "href": "apiconcepts/MTF/MTFSource.html",
    "title": "MTF Source",
    "keywords": "MTF Source <Schema name=\"MTF\" xmlns=\"urn:schemas-microsoft-com:xml-data\" xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" xmlns:html=\"http://www.w3.org/TR/REC-html40\"> <!-- DESCRIPTION --> <!-- This schema describes the structure of a MultiTerm XML file. Copyright (C) 2000-2003 TRADOS Ireland Ltd., Dublin. ;; ;; See http://msdn.microsoft.com/library/psdk/xmlsdk/xmls0390.htm for ;; the schema documentation. ;; --> <!-- HISTORY --> <!-- ;; 05-May-2000 Cornelis van der Laan ;; Removed <xref>, <termNote>, <admin>. ;; ;; 18-Jan-2000 Cornelis van der Laan ;; Removed TMX tags, because they apply to the exchange format TBX, ;; not to the database-internal format we describe here. ;; Added <xref> tag to <descrip> and <note> fields. ;; Added mandatory type attribute to the <language> tag. ;; ;; 10-04-2001 Milosavljevic Milosh ;; ;; Added <xref> back to <descrip> tags. ;; Added <descripGrp> inside of <descripGrp> tags. ;; Remove <sourceGrp> and <noteGrp> tags. ;; Remove attribute lang from <descrip> ;; ;;17-07-2003 Michael Wetzel ;; ;; Bug fix: Changed element content of <descrip>element from ;; \"textOnly\" to \"mixed\", since it can contain <xref> elements ;; ;; --> <!-- DEFAULT ATTRIBUTES --> <!-- These attributes can in general be applied to all elements. Note: 'type' is defined here, but for many elements, it will be overridden in favor of a restricted-value version specific to that element's requirements. --> <AttributeType name=\"id\" dt:type=\"string\"/> <AttributeType name=\"lang\" dt:type=\"string\"/> <AttributeType name=\"type\" dt:type=\"string\"/> <AttributeType name=\"datatype\" dt:type=\"string\"/> <!-- LINK ATTRIBUTES --> <!-- · CLink: link points to a concept · BLink: link points to a bibliographical entry · TLink: link points to a term · PLink: link points to a person · GLink: link points to a graphics or other binary data object · SLink: link pointing to a (non-leaf-)node of a pick-tree · ULink: universal link points to any external entity using URL syntax --> <AttributeType name=\"Blink\" dt:type=\"string\" required=\"no\"> <description>Link to a bibliographic entry (stored in the same database).</description> </AttributeType> <AttributeType name=\"Clink\" dt:type=\"string\" required=\"no\"> <description>Link to a concept (stored in the same database). The link target is an entrynumber.</description> </AttributeType> <AttributeType name=\"Glink\" dt:type=\"string\" required=\"no\"> <description>Link to a graphics file (not stored in the database). The link target is a filename.</description> </AttributeType> <AttributeType name=\"Plink\" dt:type=\"string\" required=\"no\"> <description>Link to a user (stored in user manager). The link target is the user name (user id).</description> </AttributeType> <AttributeType name=\"Slink\" dt:type=\"string\" required=\"no\"> <description>Link to node in a pick-tree (Subject value).</description> </AttributeType> <AttributeType name=\"Tlink\" dt:type=\"string\" required=\"no\"> <description>Link to a term (stored in the same database). The link target is \"index:term\".</description> </AttributeType> <AttributeType name=\"Ulink\" dt:type=\"string\" required=\"no\"> <description>Link to a URL. The link target is specified in standard URL syntax.</description> </AttributeType> <!-- MULTITERM ELEMENTS (IN HIERARCHICAL ORDER) --> <!-- start element --> <ElementType name=\"mtf\" content=\"eltOnly\" order=\"seq\" model=\"closed\"> <description>The root node of an MTF document. A document must contain at least one concept. </description> <element type=\"conceptGrp\" minOccurs=\"1\" maxOccurs=\"*\"/> </ElementType> <!-- concept container --> <ElementType name=\"conceptGrp\" content=\"eltOnly\" order=\"many\" model=\"closed\"> <description>The container for one concept. A concept has concept-level, language-independent fields, and at least one language group, which contains at least one term. </description> <element type=\"concept\" minOccurs=\"1\" maxOccurs=\"1\"/> <!-- contains concept-level info and languages --> <element type=\"system\" minOccurs=\"0\" maxOccurs=\"*\"/> <element type=\"transacGrp\" minOccurs=\"0\" maxOccurs=\"*\"/> <element type=\"descripGrp\" minOccurs=\"0\" maxOccurs=\"*\"/> <element type=\"languageGrp\" minOccurs=\"1\" maxOccurs=\"*\"/> </ElementType> <ElementType name=\"concept\" content=\"textOnly\" model=\"closed\" dt:type=\"ui4\"> <description>Primary element of a conceptGrp. Content is the entry number.</description> </ElementType> <ElementType name=\"system\" content=\"textOnly\" model=\"closed\"> <description>Contains system-maintained information like the old entry class and the approval status of a concept, language or term. The type attribute can be one of \"entryClass\" and \"status\". </description> <AttributeType name=\"type\" dt:type=\"enumeration\" dt:values=\"entryClass status\" required=\"yes\"> <description>A system tag can be of type entryClass (values 1-8, inherited from old MTW databases) or type status (values: new, reviewed, approved).</description> </AttributeType> <attribute type=\"type\" required=\"yes\"/> </ElementType> <ElementType name=\"transacGrp\" content=\"eltOnly\" order=\"many\" model=\"closed\"> <description>Contains a transaction and date, and optionally a note.</description> <element type=\"transac\" minOccurs=\"1\" maxOccurs=\"1\"/> <element type=\"date\" minOccurs=\"1\" maxOccurs=\"1\"/> </ElementType> <ElementType name=\"date\" content=\"textOnly\" dt:type=\"dateTime\" model=\"closed\"> <description>A date in ISO-8601:1988 format, as implemented by MSXML2.</description> </ElementType> <ElementType name=\"transac\" content=\"textOnly\" model=\"closed\"> <description>Contains a transaction type and responsible person. The type can be one of origination, modification. The content of the tag is the textual representation of the associated person link (Plink), i.e., the person's user id. </description> <AttributeType name=\"type\" dt:type=\"enumeration\" dt:values=\"origination modification\" required=\"yes\"> <description>A transac tag can be of type origination (the associated field has been created) or type modification (the associated field has been modified).</description> </AttributeType> <attribute type=\"type\" required=\"yes\"/> <attribute type=\"Plink\"/> </ElementType> <ElementType name=\"descripGrp\" content=\"eltOnly\" order=\"many\" model=\"closed\"> <description>Contains a descriptive element, and optionally a source, transactional info, and a note. </description> <element type=\"descrip\" minOccurs=\"1\" maxOccurs=\"1\"/> <element type=\"transacGrp\" minOccurs=\"0\" maxOccurs=\"*\"/> <element type=\"descripGrp\" minOccurs=\"0\" maxOccurs=\"*\"/> </ElementType> <ElementType name=\"descrip\" content=\"mixed\" model=\"closed\"> <description>Contains a descriptive, free-text element like a definition or a subject field. Content is formatted text, and the tag can carry a link attribute (link to concept, term, subject tree, graphics file, URL). </description> <element type=\"xref\" minOccurs=\"0\" maxOccurs=\"*\"/> <attribute type=\"type\" required=\"yes\"/> <attribute type=\"Clink\"/> <attribute type=\"Glink\"/> <attribute type=\"Plink\"/> <attribute type=\"Slink\"/> <attribute type=\"Tlink\"/> <attribute type=\"Ulink\"/> </ElementType> <ElementType name=\"xref\" content=\"textOnly\" model=\"closed\"> <description>Contains a descriptive, free-text element like a definition or a subject field. Content is formatted text, and the tag can carry a link attribute (link to concept, term, subject tree, graphics file, URL). </description> <attribute type=\"Tlink\" required=\"yes\"/> </ElementType> <ElementType name=\"languageGrp\" content=\"eltOnly\" order=\"many\" model=\"closed\"> <description>The container for information about all terms in one language.</description> <element type=\"language\" minOccurs=\"1\" maxOccurs=\"1\"/> <element type=\"transacGrp\" minOccurs=\"0\" maxOccurs=\"*\"/> <element type=\"descripGrp\" minOccurs=\"0\" maxOccurs=\"*\"/> <element type=\"termGrp\" minOccurs=\"1\" maxOccurs=\"*\"/> </ElementType> <ElementType name=\"language\" content=\"empty\" order=\"seq\"> <description>A language specifier. The type attribute holds the \"name\" of the language as specified in the database definition, the lang attribute the locale in the form \"en_us\". </description> <attribute type=\"type\" required=\"yes\"/> <attribute type=\"lang\" required=\"yes\"/> </ElementType> <ElementType name=\"termGrp\" content=\"eltOnly\" order=\"many\" model=\"closed\"> <description>Groups one term and all its associated information, which can be descriptions, source references, notes, and transactional information. </description> <element type=\"term\" minOccurs=\"1\" maxOccurs=\"1\"/> <element type=\"transacGrp\" minOccurs=\"0\" maxOccurs=\"*\"/> <element type=\"descripGrp\" minOccurs=\"0\" maxOccurs=\"*\"/> </ElementType> <ElementType name=\"term\" content=\"textOnly\" model=\"closed\"> <description>Contains a term as plain text. Note: we have requests for storing formatted terms containing sub- and superscript for mathematical and chemical formulae. This should be decided soon, IMHO it's doable. </description> </ElementType> </Schema>"
  },
  "apiconcepts/MTF/SchemaAttributesReference.html": {
    "href": "apiconcepts/MTF/SchemaAttributesReference.html",
    "title": "Schema Attributes Reference",
    "keywords": "Schema Attributes Reference open model The element can contain elements, attributes, and text not specified in the content model. This is the default value. closed model The element cannot contain elements, attributes, and text except for that specified in the content model. DTDs use a closed model. textOnly content The element can contain only text, not elements. Note that if the model attribute is set to \"open\", the element can contain text and additional elements. eltOnly content The element can contain only the elements, not free text. Note that if the model attribute is set to \"open\", the element can contain text and additional elements. empty content The element cannot contain text or elements. Note that if the model attribute is set to \"open\", the element can contain text and additional elements. mixed content The element can contain a mix of named elements and text. This is the default value. one order Permits only one of a set of elements. seq order Requires the elements to appear in the specified sequence. many order Permits the elements to appear (or not appear) in any order. This is the default."
  },
  "apiconcepts/MTF/XMLSchemaMTF.html": {
    "href": "apiconcepts/MTF/XMLSchemaMTF.html",
    "title": "XML Schema: MTF",
    "keywords": "XML Schema: MTF This schema describes the following elements and attributes: Elements Attributes Element-specific Attributes <concept> <conceptGrp> <date> <descrip> <descripGrp> <language> <languageGrp> <mtf> (document element) <system> <term> <termGrp> <transac> <transacGrp> <xref> Blink Clink datatype Glink id lang Plink Slink Tlink type Ulink <system type> <transac type> Document conventions: [] - optional []* - zero or more times one or more times MTF Elements MTF Attributes MTF Source Schema Attributes Reference Datatype Reference"
  },
  "apiconcepts/MTF/xsd_schema.html": {
    "href": "apiconcepts/MTF/xsd_schema.html",
    "title": "XSD schema: MTF source",
    "keywords": "XSD schema: MTF source <?xml version=\"1.0\" encoding=\"utf-8\"?> <xs:schema id=\"Schema\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\"> <xs:element name=\"transacGrp\"> <xs:complexType> <xs:sequence> <xs:element name=\"date\" type=\"xs:dateTime\" /> <xs:element name=\"transac\" minOccurs=\"0\" maxOccurs=\"unbounded\"> <xs:complexType> <xs:attribute name=\"type\" type=\"xs:string\" /> <xs:attribute name=\"Plink\" type=\"xs:string\" /> </xs:complexType> </xs:element> </xs:sequence> </xs:complexType> </xs:element> <xs:element name=\"descripGrp\"> <xs:complexType> <xs:sequence> <xs:element name=\"descrip\" minOccurs=\"0\" maxOccurs=\"unbounded\"> <xs:complexType> <xs:sequence> <xs:element name=\"xref\" minOccurs=\"0\" maxOccurs=\"unbounded\"> <xs:complexType> <xs:attribute name=\"Tlink\" type=\"xs:string\" /> </xs:complexType> </xs:element> </xs:sequence> <xs:attribute name=\"type\" type=\"xs:string\" /> <xs:attribute name=\"Clink\" type=\"xs:string\" /> <xs:attribute name=\"Glink\" type=\"xs:string\" /> <xs:attribute name=\"Plink\" type=\"xs:string\" /> <xs:attribute name=\"Slink\" type=\"xs:string\" /> <xs:attribute name=\"Tlink\" type=\"xs:string\" /> <xs:attribute name=\"Ulink\" type=\"xs:string\" /> </xs:complexType> </xs:element> <xs:element ref=\"transacGrp\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> <xs:element ref=\"descripGrp\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> </xs:sequence> </xs:complexType> </xs:element> <xs:element name=\"Schema\" msdata:IsDataSet=\"true\" msdata:UseCurrentLocale=\"true\"> <xs:complexType> <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\"> <xs:element ref=\"transacGrp\" /> <xs:element ref=\"descripGrp\" /> <xs:element name=\"mtf\"> <xs:complexType> <xs:sequence> <xs:element name=\"conceptGrp\" minOccurs=\"0\" maxOccurs=\"unbounded\"> <xs:complexType> <xs:sequence> <xs:element name=\"concept\" type=\"xs:unsignedInt\" /> <xs:element name=\"system\" minOccurs=\"0\" maxOccurs=\"unbounded\"> <xs:complexType> <xs:attribute name=\"type\" type=\"xs:string\" /> </xs:complexType> </xs:element> <xs:element ref=\"transacGrp\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> <xs:element ref=\"descripGrp\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> <xs:element name=\"languageGrp\" minOccurs=\"0\" maxOccurs=\"unbounded\"> <xs:complexType> <xs:sequence> <xs:element name=\"language\" minOccurs=\"0\" maxOccurs=\"unbounded\"> <xs:complexType> <xs:attribute name=\"type\" type=\"xs:string\" /> <xs:attribute name=\"lang\" type=\"xs:string\" /> </xs:complexType> </xs:element> <xs:element ref=\"transacGrp\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> <xs:element ref=\"descripGrp\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> <xs:element name=\"termGrp\" minOccurs=\"0\" maxOccurs=\"unbounded\"> <xs:complexType> <xs:sequence> <xs:element name=\"term\" type=\"xs:string\" /> <xs:element ref=\"transacGrp\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> <xs:element ref=\"descripGrp\" minOccurs=\"0\" maxOccurs=\"unbounded\" /> </xs:sequence> </xs:complexType> </xs:element> </xs:sequence> </xs:complexType> </xs:element> </xs:sequence> </xs:complexType> </xs:element> </xs:sequence> </xs:complexType> </xs:element> </xs:choice> </xs:complexType> </xs:element> </xs:schema>"
  },
  "apiconcepts/object_model.html": {
    "href": "apiconcepts/object_model.html",
    "title": "The MultiTerm Object Model",
    "keywords": "The MultiTerm Object Model The top-level object in the object hierarchy of MultiTerm is the MultiTerm client application. When accessing MultiTerm client functionality programmatically, you first need to create a MultiTerm Client instance. A client instance can connect to local and/or remote (i.e. server) termbases. Local termbases are physically stored in a Microsoft Jet Data Engine (*.mdb files). Remote termbases are stored in Microsoft SQL Server or Oracle 8/9 database backends. Within a collection or (local and remote) termbases you can identify specific termbases. These termbases, in turn, contain a number of entries, which are also referred to as concepts. This pool of entries is comprised of single entries (concepts), which are uniquely identified by a so-called concept ID. An entry in turn is made up of fields: system fields (e.g. date/time), index fields (languages and the corresponding terms) and descriptive fields (e.g. a Note, Definition, ...)."
  },
  "apiconcepts/overview.html": {
    "href": "apiconcepts/overview.html",
    "title": "MultiTerm Desktop SDK",
    "keywords": "MultiTerm Desktop SDK The Software Development Kit (SDK) contains an introduction to the MultiTerm Client API as well as a full programming reference. It contains various practical examples of how to implement functionality into third-party party applications and custom workflows. Introduction This Software Development Kit (SDK) contains an introduction to the MultiTerm Client API as well as a full programming reference. It contains various practical examples of how to implement functionality into third-party party applications and custom workflows. In this version of the MultiTerm SDK, the following APIs are documented: This enables you, for example, to make the MultiTerm lookup and editing functionality available directly from within various applications or document management/authoring systems. <!----> <!----> <!----> <!----> Component MultiTerm version API Version Main Class TRADOS MultiTerm 17.0 Client API 2022 11.0 Sdl.MultiTerm.TMO.Interop.Application (C#) MultiTermIX (VBA) The corresponding DLL library can be found in your SDL Common Files installation folder, e.g.: C:\\Program Files (x86)\\Common Files\\SDL\\MultiTerm16\\Sdl.MultiTerm.TMO.dll The interop dll for use in C# can be found in the same folder, e.g.: C:\\Program Files (x86)\\Common Files\\SDL\\MultiTerm16\\Sdl.MultiTerm.TMO.Interop.dll For use in VBA, reference the COM component MultiTerm.TMO Conventions Names of objects, classes, methods, properties, events and settings are formatted in bold. Example: \"Use Sdl.MultiTerm.TMO.Interop.Application to create a new MultiTerm client instance.\" Sample code is formatted in Courier and is separated from the body text. Example: Termbase.SourceIndex = Termbase.Definition.Indexes.Item(\"English\") All sample code in this guide is provided in Microsoft C#. Other information resources RWS Software Development Kit RWS products SDK Support Please note that the SDK is provided as is and for use at your own risk. RWS does not provide support and consulting services unless expressly agreed upon in a Support & Maintenance contract. Legal notice Copyright and trademark information relating to this product release. Acknowledgments MultiTerm includes open source or similar third-party software."
  },
  "apiconcepts/sample.html": {
    "href": "apiconcepts/sample.html",
    "title": "Sample",
    "keywords": "Sample Connecting to a MultiTerm Server The first thing you need to do before you can access MultiTerm client functionality programmatically is to initiate a MultiTerm client object instance, i.e.: Selecting a Termbase Searching a Termbase The TermbaseSearch class allows you to programmatically perform a search in a particular termbase. When searching a termbase you need to provide a number of parameters such as the search term, the search index, the maximum number of terms that the search should yield, etc. Retrieving Entry Content MultiTerm entries are physically stored as XML blobs in the database backend. Retrieving an entry basically involves retrieving the XML content from the database. Once you have retrieved the content of an entry, you can, for example, parse it using the DOM API, apply an XSL stylesheet to it for transformation, etc. Adding new Entries To add new entries to a termbase, you first need to 'construct' the entry XML content to store in the termbase. Sample Application in VBA Using Visual Basic you can integrate MultiTerm functionality into applications such as Microsoft Office or any other application that supports VBA (Visual Basic for Applications). XML Schema: MTF This schema describes the following elements and attributes: XSD schema: MTF source"
  },
  "apiconcepts/sample_vba.html": {
    "href": "apiconcepts/sample_vba.html",
    "title": "Sample Application in VBA",
    "keywords": "Sample Application in VBA Using Visual Basic you can integrate MultiTerm functionality into applications such as Microsoft Office or any other application that supports VBA (Visual Basic for Applications). To make use of the API, reference the COM component \"MultiTerm110.TMO 11.0 Type Library\" The sample code below connects to the local termbase repository, then selects a termbase and performs a search in it. Dim oMt As New MultiTermIX.Application Dim oLocalRep As TermbaseRepository Dim oTestTermbase As String oTestTermbase = \"C:\\Testdata\\Sample.sdltb\" 'select local termbase repository and log-in Set oLocalRep = oMt.LocalRepository oLocalRep.Connect \"\", \"\" 'select termbase Dim oTbs As Termbases Set oTbs = oLocalRep.Termbases oTbs.Add oTestTermbase, \"\", \"\" Dim oTb As Termbase Set oTb = oTbs.Item(oTestTermbase) 'search termbase Dim oSearch As TermbaseSearch Set oSearch = oTb.Search 'configure search parameters With oSearch .Direction = mtSearchDown .MaximumHits = 10 .FuzzySearch = True .SearchExpression = \"cable\" .SourceIndex = \"English\" End With 'execute search Dim oHits As HitTerms Set oHits = oSearch.Execute 'output hit list Dim oHit As HitTermFor Each oHit In oHits Debug.Print oHit.Text Next"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Application.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Application.html",
    "title": "Sdl.MultiTerm.TMO.Interop.Application class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.Application class Name Sdl.MultiTerm.TMO.Interop.Application — Provides programmatic access to the MultiTerm client functionality. Description Creating an instance of the MultiTerm client application, which is the root of the MultiTerm object hierarchy, will allow a user to access the MultiTerm client functionality that is available with his/her particular login, e.g. searching in termbases, browsing termbases, editing termbase content, etc. Below you find the minimum amount of C# code needed to create an instance of the MultiTerm Client object. Properties LocalRepository : Provides access to all locally stored termbases. MultiSearch : Provides programmatic access to multiple termbase search. ServerRepository : Provides access to the termbases stored on a MultiTerm Server. Methods None Sample using System; using MultiTermIX; namespace MtSDKTest { class MtTest { [STAThread] static void Main(string[] args) { Sdl.MultiTerm.TMO.Interop.Application oMt = new Sdl.MultiTerm.TMO.Interop.ApplicationClass(); } } }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Application.LocalRepository.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Application.LocalRepository.html",
    "title": "LocalRepository property",
    "keywords": "LocalRepository property Name Sdl.MultiTerm.TMO.Interop.Application.LocalRepository — Provides access to all locally stored termbases. Type Sdl.MultiTerm.TMO.Interop.TermbaseRepository (read) Index Parameters none Description Termbases can be stored locally on your hard disk. Local termbases are stored in *.sdltb file format. This class allows you to provide access to local termbases. Note that before you can retrieve any local termbases, you need to connect to the local termbase repository using the Connect method, even if local termbase access does not require any authentication. However, you can provide an empty user name and password. Sample Sdl.MultiTerm.TMO.Interop.Application oMt = new Sdl.MultiTerm.TMO.Interop.ApplicationClass(); TermbaseRepository oLocRep = oMt.LocalRepository; oLocRep.Connect(\"\", \"\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Application.MultiSearch.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Application.MultiSearch.html",
    "title": "MultiSearch property",
    "keywords": "MultiSearch property Name Sdl.MultiTerm.TMO.Interop.Application.MultiSearch — Provides programmatic access to multiple termbase search. Type Sdl.MultiTerm.TMO.Interop.MultiSearch (read) Index Parameters none Description Rather than searching only in a single termbase, MultiTerm allows you to cascade searches over several termbases, which can both be local and remote server termbases. This is why the MultiSearch class is sub-ordinate to the MultiTerm client application class, as it is not limited to the local or server termbase repository."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Application.ServerRepository.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Application.ServerRepository.html",
    "title": "ServerRepository property",
    "keywords": "ServerRepository property Name Sdl.MultiTerm.TMO.Interop.Application.ServerRepository — Provides access to the termbases stored on a MultiTerm Server. Type Sdl.MultiTerm.TMO.Interop.TermbaseRepository (read) Index Parameters none Description Via this class you can access those termbases stored on a MultiTerm Server machine that your login allows you to access. In order to access a MultiTerm Server you need to provide the server machine name and your user name and password. Sample Sdl.MultiTerm.TMO.Interop.Application oMt = new Sdl.MultiTerm.TMO.Interop.ApplicationClass(); TermbaseRepository oServRep = oMt.ServerRepository; oServRep.Location = \"http://localhost\"; oServRep.Connect(\"guest\", \"guest\"); MessageBox.Show (\"Server termbase count: \" + oServRep.Termbases.Count.ToString()); oServRep.Disconnect();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveField.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveField.html",
    "title": "Sdl.MultiTerm.TMO.Interop.DescriptiveField class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.DescriptiveField class Name Sdl.MultiTerm.TMO.Interop.DescriptiveField — Provides programmatic access to a particular descriptive field specified in a termbase definition. Description Descriptive fields contain fully user-defined information to further define an entry, an index or a particular term. Examples for descriptive fields are as follows: \"Definition\", \"Note\", \"Usage example\", \"Subject\", etc. Via the this class you can retrieve various information on a particular descriptive field that was added by the termbase creator/administrator to the termbase definition, e.g. the field label/value, information on whether the field is multiple and/or mandatory, the field level (i.e. entry-level, index-level, or term-level), the field type (i.e. text field, picklist field, multimedia field...), etc. A concrete application for this class would, for example, be filling a drop-down list with the labels of the available entry-level descriptive fields. Properties Label : Returns the field label. Level : Returns the descriptive field level value. Mandatory : Returns whether the specified field is mandatory. Multiple : Returns whether a field can be multiple. PicklistValues : Provides access to the picklist values of a picklist field. Type : Returns the descriptive field type. Methods None Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //access termbase definition TermbaseDefinition oDef = oTb.Definition; //list entry-level descriptive fields containted in the termbase definition for(int i=0;i<oDef.Fields.Count;i++) { DescriptiveField thisField = oDef.Fields[i]; Debug.WriteLine(thisField.Label); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveField.Label.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveField.Label.html",
    "title": "Label property",
    "keywords": "Label property Name Sdl.MultiTerm.TMO.Interop.DescriptiveField.Label — Returns the field label. Type String (read) Index Parameters none Description Descriptive field labels are fully user-definable, i.e. the termbase creator/administrator determines the name of the fields that are added to the termbase definition, e.g. \"Example\", \"Context\", \"Subject\", \"Note\", etc. Via this property you can retrieve the label of a particular field Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //access termbase definition TermbaseDefinition oDef = oTb.Definition; //list entry-level descriptive fields containted in the termbase definition for(int i=0;i<oDef.Fields.Count;i++) { DescriptiveField thisField = oDef.Fields[i]; Debug.WriteLine(thisField.Label); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveField.Level.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveField.Level.html",
    "title": "Level property",
    "keywords": "Level property Name Sdl.MultiTerm.TMO.Interop.DescriptiveField.Level — Returns the descriptive field level value. Type Sdl.MultiTerm.TMO.Interop.MtFieldLevel (read) Index Parameters none Description A descriptive field may apply on entry-level (i.e. it describes or categorises the entire entry), on index-level (i.e. it applies to all terms of a particular index), or it may be on term-level (i.e. it describes or categorises a specific term). This property returns the field level value of a term in the termbase definition. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //access termbase definition TermbaseDefinition oDef = oTb.Definition; //select first descriptive field DescriptiveField oField = oDef.Fields[0]; Debug.WriteLine(oField.Level);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveField.Mandatory.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveField.Mandatory.html",
    "title": "Mandatory property",
    "keywords": "Mandatory property Name Sdl.MultiTerm.TMO.Interop.DescriptiveField.Mandatory — Returns whether the specified field is mandatory. Type Boolean (read) Index Parameters none Description The termbase creator/administrator can define descriptive fields in a termbase definition as mandatory, i.e. the user later has to fill in these fields before an entry can be saved. This property returns true if the field is mandatory, false if not. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //access termbase definition TermbaseDefinition oDef = oTb.Definition; //select first descriptive field DescriptiveField oField = oDef.Fields[0]; Debug.WriteLine(\"Is this field mandatory? \" + oField.Mandatory);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveField.Multiple.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveField.Multiple.html",
    "title": "Multiple property",
    "keywords": "Multiple property Name Sdl.MultiTerm.TMO.Interop.DescriptiveField.Multiple — Returns whether a field can be multiple. Type Boolean (read) Index Parameters none Description A termbase creator/administrator can define descriptive fields in a termbase definition as multiple, i.e. the field may occur several times in an entry. If the field is not multiple, then only one occurrence of the field per entry is allowed. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //access termbase definition TermbaseDefinition oDef = oTb.Definition; //select first descriptive field DescriptiveField oField = oDef.Fields[0]; Debug.WriteLine(\"Is this field multipe? \" + oField.Multiple);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveField.PicklistValues.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveField.PicklistValues.html",
    "title": "PicklistValues property",
    "keywords": "PicklistValues property Name Sdl.MultiTerm.TMO.Interop.DescriptiveField.PicklistValues — Provides access to the picklist values of a picklist field. Type Sdl.MultiTerm.TMO.Interop.PicklistValues (read) Index Parameters none Description Descriptive fields that have the field type \"picklist\" are associated with a number of values that are defined by the termbase creator/administrator in the termbase definition. This ensures consistent use of the field values when new entries are created (e.g. \"Subject -> Engineering, Medicine, Biology\"). This property is used to access the picklist values associated with a particular field. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //access termbase definition TermbaseDefinition oDef = oTb.Definition; //select first descriptive field DescriptiveField oField = oDef.Fields[0]; PicklistValues oValues = oField.PicklistValues; Debug.WriteLine(\"Picklist value count: \" + oValues.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveField.Type.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveField.Type.html",
    "title": "Type property",
    "keywords": "Type property Name Sdl.MultiTerm.TMO.Interop.DescriptiveField.Type — Returns the descriptive field type. Type Sdl.MultiTerm.TMO.Interop.MtFieldType (read) Index Parameters none Description Descriptive fields may be defined by the termbase creator/administrator as being of any of the following 6 types: text number boolean date/time picklist multimedia file This property can, for example, be used to determine whether a specified field has the type value 4, i.e. whether it is a picklist field. In this case you can program your application to retrieve the corresponding picklist values. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //access termbase definition TermbaseDefinition oDef = oTb.Definition; //select first descriptive field DescriptiveField oField = oDef.Fields[0]; Debug.WriteLine(\"Is this field multipe? \" + oField.Type);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveFields.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveFields.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.DescriptiveFields.Count — Returns the number of entry-level descriptive fields. Type Long (read) Index Parameters none Description Via this property you can ascertain how many entry-level descriptive fields the definition of a particular termbase contains. Sample TermbaseDefinition tbDef = oTb.Definition; DescriptiveFields oDFields = tbDef.Fields; Debug.Write(\"Descriptive field count: \" + oDFields.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveFields.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveFields.html",
    "title": "Sdl.MultiTerm.TMO.Interop.DescriptiveFields class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.DescriptiveFields class Name Sdl.MultiTerm.TMO.Interop.DescriptiveFields — Provides programmatic access to the descriptive fields of a termbase definition. Description You can use this class, for example, to generate a list of all entry-level descriptive fields of a particular termbase definition. Properties Count : Returns the number of entry-level descriptive fields. Item : Provides access to a particular entry-level descriptive fields. Methods None Sample TermbaseDefinition tbDef = oTb.Definition; DescriptiveFields oDFields = tbDef.Fields; Debug.Write(\"Descriptive field count: \" + oDFields.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveFields.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.DescriptiveFields.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.DescriptiveFields.Item — Provides access to a particular entry-level descriptive fields. Type Sdl.MultiTerm.TMO.Interop.DescriptiveField (read) Index Parameters Index (Variant) Description To select a particular field you can either provide the index number, e.g. Item(0) or the actual field label, e.g. Item(\"Subject\") as parameter. Sample TermbaseDefinition tbDef = oTb.Definition; DescriptiveFields oDFields = tbDef.Fields; //select first descriptive field DescriptiveField oDField = oDFields[0];"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.ActiveFilterHasChanged.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.ActiveFilterHasChanged.html",
    "title": "ActiveFilterHasChanged method",
    "keywords": "ActiveFilterHasChanged method Name Sdl.MultiTerm.TMO.Interop.Entries.ActiveFilterHasChanged — Returns true if the active filter has changed, otherwise false. Returntype void Parameters none Description"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.Entries.Count — Returns the total number of termbase entries. Type Long (read) Index Parameters none Description You can use this property to ascertain the total number of entries contained in a particular termbase. Sample Termbase oTb = oTbs[\"01test\"]; Entries oEntries = oTb.Entries; Debug.Write(\"Total entry count: \" + oEntries.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.GetCrossLinkedEntry.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.GetCrossLinkedEntry.html",
    "title": "GetCrossLinkedEntry method",
    "keywords": "GetCrossLinkedEntry method Name Sdl.MultiTerm.TMO.Interop.Entries.GetCrossLinkedEntry — Allows you to retrieve the content of a cross-linked entry. Returntype String Parameters Index (Variant) Term (String) CurrentEntryId (Long) Description You can use this method to retrieve the content of an entry that is linked to another entry, thereby implementing a cross-reference functionality. In the MultiTerm XML cross-links look as follows: DisplayTerm A cross-link is made up of the index name the cross-linked term belongs to, the actual cross-linked term and the display text. The display text is often identical to the cross-linked term. The GetCrossLinkedEntry method requires the index, the cross-linked term and the current entry id as parameters. The method returns the content of the entry that contains the cross-linked entry as an XML stream. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //current entry has entry #1 Entry thisEntry = oEntries.Item(1); //output content of cross-linked entry Debug.Write(oEntries.GetCrossLinkedEntry(\"English\", \"starship\", 17));"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.GetEntryIDs.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.GetEntryIDs.html",
    "title": "GetEntryIDs method",
    "keywords": "GetEntryIDs method Name Sdl.MultiTerm.TMO.Interop.Entries.GetEntryIDs — Retrieves all entry ids contained in a termbase. Returntype Sdl.MultiTerm.TMO.Interop.EntryIDs Parameters none Description You can make use of this method to retrieve all entry ids of a termbase and then iterate through all termbase entries. That way you can make sure that you only iterate through entry numbers that actually exist in your termbase. Note that entry numbers might be 'missing' due to deletion of entries. For example, a termbase might contain the following entry ids: '1, 2, 5, 7'. If you just built your iteration to go from 1 to 7, the loop will throw an error, as some entry ids no longer exist in the termbase. Note that the entry id collection starts at 1, not 0. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //retrieve entry ids EntryIDs oIds = oEntries.GetEntryIDs(); for(int i=1;i<oIds.Count;i++) { Debug.WriteLine(oIds[i]); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.html",
    "title": "Sdl.MultiTerm.TMO.Interop.Entries class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.Entries class Name Sdl.MultiTerm.TMO.Interop.Entries — Provides programmatic access to the entries in a termbase. Description A termbase is a collection of entries (i.e. concepts). Via this class you can, for example, add new entries to the specified termbase, or select a specific entry by using its unique concept number, etc. Properties Count : Returns the total number of termbase entries. Methods ActiveFilterHasChanged : Returns true if the active filter has changed, otherwise false. [GetCrossLinkedEntry](Sdl.MultiTerm.TMO.Interop.Entries.GetCrossLinkedEntry.md: Allows you to retrieve the content of a cross-linked entry. [GetEntryIDs](Sdl.MultiTerm.TMO.Interop.Entries.GetEntryIDs.md: Retrieves all entry ids contained in a termbase. [Item](Sdl.MultiTerm.TMO.Interop.Entries.Item.md: Refers to a particular entry. [New](Sdl.MultiTerm.TMO.Interop.Entries.New.md: Adds a new entry to the termbase. ReloadLayout : Refreshes the entry layout. ReloadTermbaseDefinition : Refreshes the current termbase definition. Sample Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; Debug.Write(\"Total entry count: \" + oEntries.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.Item.html",
    "title": "Item method",
    "keywords": "Item method Name Sdl.MultiTerm.TMO.Interop.Entries.Item — Refers to a particular entry. Returntype Sdl.MultiTerm.TMO.Interop.Entry Parameters EntryID (Long) Description Via this property you can retrieve a particular entry, e.g. to output the entire entry content. As parameter you need to provide the entry id of the corresponding entry. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //retrieve a particular entry Entry oEntry = oEntries.Item(1); //return full entry content Debug.Write(oEntry.Content.Content);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.New.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.New.html",
    "title": "New method",
    "keywords": "New method Name Sdl.MultiTerm.TMO.Interop.Entries.New — Adds a new entry to the termbase. Returntype Sdl.MultiTerm.TMO.Interop.Entry Parameters EntryXML (String) Incomplete (Boolean) Description By applying this method to an Entries collection you add a new entry to a selected termbase. This method requires the new entry content as an XML stream. Below is a (highly simplified) example of what a MultiTerm XML stream looks like. Note that entries for server termbases require an entry class, which is not the case for locally stored termbases. <conceptGrp> <system type=\"entryClass\">1</system> <languageGrp> <language type=\"English\" lang=\"EN\"/> <termGrp> <term>starship</term> </termGrp> </languageGrp> </conceptGrp> The second parameter is a boolean parameter that indicates whether the new entry should be flagged as incomplete. An entry is incomplete when it lacks a field that is mandatory according to the termbase definition. This method does not verify whether the entry XML stream is complete or not. You would have to implement that logic yourself. Depending on the outcome of this verification you can set this parameter to true or false. When implementing a quick entry function, e.g. to add new entries from MS Word to the termbase, you may set this parameter always to true by default. In this case all entries added via your quick entry function can be singled out easily for post-editing using the 'Incomplete Search' of MultiTerm Workstation. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //define new entry content String entryContent=\"<conceptGrp><system type='entryClass'>1</system>\"; entryContent+=\"<languageGrp><language type='English' lang='EN'/>\"; entryContent+=\"<termGrp><term>starship</term></termGrp></languageGrp></conceptGrp>\"; //add new entry and flag as incomplete oEntries.New(entryContent, true);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.ReloadLayout.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.ReloadLayout.html",
    "title": "ReloadLayout method",
    "keywords": "ReloadLayout method Name Sdl.MultiTerm.TMO.Interop.Entries.ReloadLayout — Refreshes the entry layout. Returntype void Parameters none Description Applying this method to an Entries collection refreshes the entry layout. That way you can make sure that always the most current layout is applied to the entry display, e.g. when layouts are edited while you search the termbase. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; oEntries.ReloadLayout();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.ReloadTermbaseDefinition.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entries.ReloadTermbaseDefinition.html",
    "title": "ReloadTermbaseDefinition method",
    "keywords": "ReloadTermbaseDefinition method Name Sdl.MultiTerm.TMO.Interop.Entries.ReloadTermbaseDefinition — Refreshes the current termbase definition. Returntype void Parameters none Description By applying this method you can make sure that you are always using the most up-to-date termbase definition, e.g. when the termbase definition is edited while using the termbase. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; oEntries.ReloadTermbaseDefinition();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.ApplyExport.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.ApplyExport.html",
    "title": "ApplyExport method",
    "keywords": "ApplyExport method Name Sdl.MultiTerm.TMO.Interop.Entry.ApplyExport — Exports a particular entry. Returntype String Parameters ExportDefinition ( Sdl.MultiTerm.TMO.Interop.ExportDefinition ) SourceIndex (String, optional, default is \"\" ) TargetIndex (String, optional, default is \"\" ) Description Export definitions are used to export termbase entries to an external file according to the specifications of the corresponding export definition. Applying a selected export definition to a particular entry programmatically does not actually export the selected entry to an external file. It rather generates a string output in the format specified by the selected export definition (e.g. XML, TXT, RTF), which can then, for example, be written into an external file. Thos method requires an export definition object as parameter. Export definitions can be selected either via the corresponding index number or via the unique termbase object name, which is case-sensitive, e.g. ExportDefinitions[\"Default export definition\"] or ExportDefinitions[0]. Additionally you also need to provide the source and target index, as some export definitions rely on that information, e.g. custom export definitions that specify that only the current source and target terms should be exported. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry with id #1 Entry oEntry = oEntries.Item(1); //select export definition ExportDefinitions oExpDefs = oTb.ExportDefinitions; ExportDefinition oExpDef = oExpDefs[\"Default export definition\"]; //apply export definition string result =oEntry.ApplyExport(oExpDef, \"English\", \"German\"); Debug.Write(result);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.ApplyFilter.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.ApplyFilter.html",
    "title": "ApplyFilter method",
    "keywords": "ApplyFilter method Name Sdl.MultiTerm.TMO.Interop.Entry.ApplyFilter — Applies a filter definition to a specified entry and returns True or False, depending on whether the entry matches the filter. Returntype Boolean Parameters FilterObject ( Sdl.MultiTerm.TMO.Interop.FilterDefinition SourceIndex (String, optional, default is \"\" ) TargetIndex (String, optional, default is \"\" ) Description Filters are used to search for a subset of entries in the termbase, e.g. all entries that were created after a specified date, all entries that contain or do not contain a certain field, etc. By applying this method to particular entry you can determine whether the entry matches the filter or not. This method is useful, if you want e.g. to iterate through all entries in a termbase and then apply this method to each entry to check whether it matches the filter. You may then process all matching entries in a particular way, e.g. insert them into a Word document, etc. This method requires a filter object as parameter. Filters can be selected either via the corresponding index number or via the unique termbase object name, which is case-sensitive, e.g. Filter[\"Missing Target\"] or Filter[0]. Additionally, this method requires the source and target index, as filter definitions may use the source and/or target index as criteria, e.g. a filter that looks for all entries where the target term is missing. This method returns true if the entry is matching the filter, false if not. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry with id #1 Entry oEntry = oEntries.Item(1); //select export definition FilterDefinitions oFilters = oTb.FilterDefinitions; FilterDefinition oFilter = oFilters[\"Missing target\"]; //apply export definition Debug.Write(\"Entry matches filter: \" + oEntry.ApplyFilter(oFilter, \"English\", \"German\"));"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.ApplyLayout.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.ApplyLayout.html",
    "title": "ApplyLayout method",
    "keywords": "ApplyLayout method Name Sdl.MultiTerm.TMO.Interop.Entry.ApplyLayout — Applies a layout definition to a MultiTerm entry XML stream. Returntype String Parameters SourceIndex (String) TargetIndex (String).md) LayoutDefinitionObject ( Sdl.MultiTerm.TMO.Interop.LayoutDefinition ) Description MultiTerm entries are stored in XML format, i.e. each entry can be output as an XML stream. For display purposes entries should be rendered in a more readable format, e.g. HTML. Suppose you would like to display an entry in an HTML control. In this case you can apply a layout definition to the specified entry. Layout definitions contain an XSL stylesheet for rendering MultiTerm XML as HTML. This method requires a layout definition object as parameter. A layout object can be selected either via the corresponding index number or via its unique termbase object name, which is case-sensitive, e.g. Layouts[\"Flags Layout\"] or Layouts[0]. Additionally it also requires a source and target index, as layouts usually make use of source and target as logical fields. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry with id #1 Entry oEntry = oEntries.Item(1); //select export definition LayoutDefinitions oLayouts = oTb.LayoutDefinitions; LayoutDefinition oLayout = oLayouts[\"Flags layout\"]; string content = oEntry.ApplyLayout(\"English\", \"German\", oLayout); Debug.Write(content);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.Content.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.Content.html",
    "title": "Content property",
    "keywords": "Content property Name Sdl.MultiTerm.TMO.Interop.Entry.Content — Provides access to the content of an entry. Type Sdl.MultiTerm.TMO.Interop.EntryContent (read) Index Parameters none Description You can use this property to return the content of an entry fully or partially, e.g. only the content of a specific index. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry with id #1 and output entry content Entry oEntry = oEntries.Item(1); Debug.Write(oEntry.Content.Content);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.Delete.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.Delete.html",
    "title": "Delete method",
    "keywords": "Delete method Name Sdl.MultiTerm.TMO.Interop.Entry.Delete — Removes an entry from the termbase. Returntype void Parameters none Description Applying this method to a particular entry deletes it from the termbase. The corresponding entry is then removed physically from the termbase and can only be restored from a backup file (if available). Note that only users with proper authorisation are allowed to delete termbase entries. This method does not require any parameters. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry with id #1 Entry oEntry = oEntries.Item(1); oEntry.Delete(); Debug.Write(\"Entry deleted successfully.\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.html",
    "title": "Sdl.MultiTerm.TMO.Interop.Entry class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.Entry class Name Sdl.MultiTerm.TMO.Interop.Entry — Provides programmatic access to a particular entry. Description This class allows you to access a particular entry, e.g. for outputting the entire entry content, for applying an entry layout, etc. Entries are programmatically selected via the unique entry id. Properties Content : Provides access to the content of an entry. ID : Returns the id of an entry. IsComplete : Returns whether an entry is complete or not. IsRtf : Returns whether an entry is RTF. LockedBy : Returns the name of the user who locked the entry. Methods ApplyExport : Exports a particular entry. ApplyFilter : Applies a filter definition to a specified entry and returns True or False, depending on whether the entry matches the filter. ApplyLayout : Applies a layout definition to a MultiTerm entry XML stream. Delete : Removes an entry from the termbase. LockEntry : Locks an entry for editing. Merge : Merges the content of two entries into one. MergeEx : deprecated Save : Saves an entry to the termbase. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry with id #1 and output entry content Entry oEntry = oEntries.Item(1); Debug.Write(oEntry.Content.Content);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.ID.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.ID.html",
    "title": "ID property",
    "keywords": "ID property Name Sdl.MultiTerm.TMO.Interop.Entry.ID — Returns the id of an entry. Type Long (read) Index Parameters none Description Each termbase entry can be referenced via its unique entry id. This property returns the id of a particular entry. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry with id #1 Entry oEntry = oEntries.Item(1); Debug.Write(\"Current entry id: \" + oEntry.ID);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.IsComplete.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.IsComplete.html",
    "title": "IsComplete property",
    "keywords": "IsComplete property Name Sdl.MultiTerm.TMO.Interop.Entry.IsComplete — Returns whether an entry is complete or not. Type Boolean (read) Index Parameters none Description An entry is considered incomplete if it lacks one or more fields that are mandatory according to the termbase definition. This property returns true if the current entry is complete, false if it is incomplete. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry with id #1 Entry oEntry = oEntries.Item(1); Debug.Write(\"Is entry complete? \" + oEntry.IsComplete);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.IsRtf.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.IsRtf.html",
    "title": "IsRtf property",
    "keywords": "IsRtf property Name Sdl.MultiTerm.TMO.Interop.Entry.IsRtf — Returns whether an entry is RTF. Type Long (read) Index Parameters none Description This property returns 0 if the current entry is not RTF, which will usually be the case. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry with id #1 Entry oEntry = oEntries.Item(1); Debug.Write(\"Is entry RTF? \" + oEntry.IsRtf);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.LockedBy.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.LockedBy.html",
    "title": "LockedBy property",
    "keywords": "LockedBy property Name Sdl.MultiTerm.TMO.Interop.Entry.LockedBy — Returns the name of the user who locked the entry. Type String (read) Index Parameters none Description When a user edits an entry it is locked for all other users, i.e. no one else can obtain write access to this particular entry. Via this property you can determine the name of the user who has locked a particular entry. This name corresponds to the login name the user entered in his/her client application. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry with id #1 Entry oEntry = oEntries.Item(1); Debug.Write(\"Entry locked by user \" + oEntry.LockedBy);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.LockEntry.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.LockEntry.html",
    "title": "LockEntry method",
    "keywords": "LockEntry method Name Sdl.MultiTerm.TMO.Interop.Entry.LockEntry — Locks an entry for editing. Returntype void Parameters LockState ( Sdl.MultiTerm.TMO.Interop.MtLockingState Description When a user is editing an entry from a client application, the entry is locked for all other users, i.e. it cannot be edited by another user. This is to prevent the same entry from being edited by more than one user at the same time. When you want to implement editing functionality in your client make sure that entries to be edited are always locked before the actual editing operation takes place. Otherwise an error will be thrown. Note that the LockEntry method can also be used to unlock an entry. Whether an entry is locked by this method or not depends on the parameter you provide, i.e. mtLock or mtUnlock. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry with id #1 Entry oEntry = oEntries.Item(1); //lock entry oEntry.LockEntry(Sdl.MultiTerm.TMO.Interop.MtLockingState.mtLock);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.Merge.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.Merge.html",
    "title": "Merge method",
    "keywords": "Merge method Name Sdl.MultiTerm.TMO.Interop.Entry.Merge — Merges the content of two entries into one. Returntype void Parameters MergeWithEntry ( Sdl.MultiTerm.TMO.Interop.Entry Description In some cases it is useful to merge two distinct entries into one, for example, when there are two entries in the termbase that express exactly the same concept. One these entries may, for example, have an index or a descriptive field that the other one does not have. In this case it makes sense to combine the two entries into one to keep the termbase as lean and efficient as possible and to not clutter it unnecessarily with distinct entries that belong to the same concept. Example: suppose you would like to merge the content from entry number 2 into entry number 2. To do this, you first need to Lock the entry 1, then apply the Merge method, which requires the content of entry 2 as parameter, to the entry 1 object. Note that you need to apply the Update method after the merge operation. After merging entry 1 will also have the content of entry 2, which will still remain. To remove entry 2 from the termbase, you need to apply the Delete method to it. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entries to merge Entry firstEntry = oEntries.Item(1); Entry secondEntry = oEntries.Item(2); //lock entry, e.g. for editing firstEntry.LockEntry(Sdl.MultiTerm.TMO.Interop.MtLockingState.mtLock); firstEntry.Merge(secondEntry); firstEntry.Content.Update(); firstEntry.LockEntry(Sdl.MultiTerm.TMO.Interop.MtLockingState.mtUnlock); //delete second (redundant) entry secondEntry.Delete();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.MergeEx.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.MergeEx.html",
    "title": "MergeEx method",
    "keywords": "MergeEx method Name Sdl.MultiTerm.TMO.Interop.Entry.MergeEx — deprecated Returntype void Parameters MergeWithEntry (String) Description"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.Save.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Entry.Save.html",
    "title": "Save method",
    "keywords": "Save method Name Sdl.MultiTerm.TMO.Interop.Entry.Save — Saves an entry to the termbase. Returntype void Parameters none Description Applying this method to an entry saves it to the termbase."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions.Count — Returns the number of entry classes a user has access to. Type Long (read) Index Parameters none Description Sample //select termbase Termbase oTb = oTbs[\"TRADOS\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; EntryClassesPermissions oClasses = oPermissions.EntryClasses; Debug.WriteLine(\"Number of accessible entry classes: \" + oClasses.Count.ToString()); oServerRep.Disconnect();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions.html",
    "title": "Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions class Name Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions — Provides programmatic access to the entry classes the currently logged-in user has access to. Description Entry classes can be used to categorize entries. By default, each termbase has the entry classes 'Unspecified', 'Public', and 'Internal'. Termbase administrators can add other entry classes such as 'Confidential', 'Secret', etc. and then restrict access to specific entries for user roles based on these entry classes. Via the EntryClassesPermissions class you can, for example, ascertain to which entry classes the currently logged-in user has access. Properties Count : Returns the number of entry classes a user has access to. Item : Refers to a specific entry class. XML : Returns all entry class permissions as an XML string. Methods None Sample //select termbase Termbase oTb = oTbs[\"TRADOS\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; EntryClassesPermissions oClasses = oPermissions.EntryClasses; Debug.WriteLine(\"Number of accessible entry classes: \" + oClasses.Count.ToString()); oServerRep.Disconnect();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions.Item — Refers to a specific entry class. Type Sdl.MultiTerm.TMO.Interop.EntryClassPermissions (read) Index Parameters Index (Variant) Description Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; EntryClassesPermissions oClasses = oPermissions.EntryClasses; //select the first accessible entry class EntryClassPermissions oClass = oClasses[0]; Debug.WriteLine(oClass.Name);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions.XML.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions.XML.html",
    "title": "XML property",
    "keywords": "XML property Name Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions.XML — Returns all entry class permissions as an XML string. Type String (read) Index Parameters none Description Via this property you can retrieve all entry class information in a consolidated XML stream. This XML output contains the entry class names as well as information on whether the currently logged-in user has read/write access to them. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; EntryClassesPermissions oClasses = oPermissions.EntryClasses; Debug.WriteLine(oClasses.XML); Sample output: <entryClasses canChange='0'> <entryClass id='2'> <name>Internal</name> <read>1</read> <write>0</write> </entryClass> <entryClass id='3'> <name>Public</name> <read>1</read> <write>0</write> </entryClass> <entryClass id='1'> <name>Unspecified</name> <read>1</read> <write>0</write> </entryClass> </entryClasses>"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassPermissions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassPermissions.html",
    "title": "Sdl.MultiTerm.TMO.Interop.EntryClassPermissions class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.EntryClassPermissions class Name Sdl.MultiTerm.TMO.Interop.EntryClassPermissions — Provides access to a particular entry class. Description You can use this class, for example, to retrieve the name of a specific entry class and ascertain whether the currently logged-in user has read-only or read/write access to entries of a particular class. Properties Name : Returns the name of a particular entry class. Read : Indicates whether the currently logged-in user has read-access to a particular class. Write : Indicates whether the currently logged-in user has write-access to a class. Methods None Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; EntryClassesPermissions oClasses = oPermissions.EntryClasses; //list all available entry classes for(int i=0;i<oClasses.Count;i++) { EntryClassPermissions oClass = oClasses[i]; Debug.WriteLine(oClass.Name); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassPermissions.Name.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassPermissions.Name.html",
    "title": "Name property",
    "keywords": "Name property Name Sdl.MultiTerm.TMO.Interop.EntryClassPermissions.Name — Returns the name of a particular entry class. Type String (read) Index Parameters none Description You can use this property, e.g. to generate a list of all accessible entry classes. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; EntryClassesPermissions oClasses = oPermissions.EntryClasses; //list all available entry classes for(int i=0;i<oClasses.Count;i++) { EntryClassPermissions oClass = oClasses[i]; Debug.WriteLine(oClass.Name); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassPermissions.Read.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassPermissions.Read.html",
    "title": "Read property",
    "keywords": "Read property Name Sdl.MultiTerm.TMO.Interop.EntryClassPermissions.Read — Indicates whether the currently logged-in user has read-access to a particular class. Type Boolean (read) Index Parameters none Description This property returns true if the currently logged-in user has read-access to entries of a particular entry class. This will always be the case, for if a user can access the class, he/she at least has read-only access to it. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; EntryClassesPermissions oClasses = oPermissions.EntryClasses; //list all available entry classes for(int i=0;i<oClasses.Count;i++) { EntryClassPermissions oClass = oClasses[i]; Debug.WriteLine(oClass.Name); Debug.WriteLine(\"Do I have read-access to this class? \" + oClass.Read); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassPermissions.Write.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryClassPermissions.Write.html",
    "title": "Write property",
    "keywords": "Write property Name Sdl.MultiTerm.TMO.Interop.EntryClassPermissions.Write — Indicates whether the currently logged-in user has write-access to a class. Type Boolean (read) Index Parameters none Description This property returns true, if the currently logged-in user has write access to entries of a particular entry class, otherwise it returns false. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; EntryClassesPermissions oClasses = oPermissions.EntryClasses; //list all available entry classes for(int i=0;i<oClasses.Count;i++) { EntryClassPermissions oClass = oClasses[i]; Debug.WriteLine(oClass.Name); Debug.WriteLine(\"Do I have write-access to this class? \" + oClass.Write); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryContent.Content.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryContent.Content.html",
    "title": "Content property",
    "keywords": "Content property Name Sdl.MultiTerm.TMO.Interop.EntryContent.Content — Provides programmatic access to the content of a particular entry. Type String (read / write) Index Parameters none Description This property allows you to access, for example, the descriptive fields and index fields (i.e. languages and terms) contained in a particular entry. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select a particular entry Entries oEntries = oTb.Entries; Entry oEntry = oEntries.Item(1); EntryContent content = oEntry.Content; Debug.WriteLine(\"Number of entry-level descriptive fields: \" + content.Fields.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryContent.EntryClass.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryContent.EntryClass.html",
    "title": "EntryClass property",
    "keywords": "EntryClass property Name Sdl.MultiTerm.TMO.Interop.EntryContent.EntryClass — Returns the entry class of a particular entry. Type String (read) Index Parameters none Description You can use this property to output the entry class of the selected entry. Note that only server termbases have an entry class. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry Entry oEntry = oEntries.Item(1); EntryContent content = oEntry.Content; //output entry content Debug.WriteLine(content.EntryClass);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryContent.EntryIndexes.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryContent.EntryIndexes.html",
    "title": "EntryIndexes property",
    "keywords": "EntryIndexes property Name Sdl.MultiTerm.TMO.Interop.EntryContent.EntryIndexes — Provides programmatic access to the indexes contained in a particular entry. Type Sdl.MultiTerm.TMO.Interop.EntryIndexes (read) Index Parameters none Description Each entry contains at least one index (i.e. one language). You can use the EntryIndexes class to retrieve the indexes and the terms contained in a particular entry, e.g. to return the number of entry indexes, the index labels and locales, etc. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry Entry oEntry = oEntries.Item(1); EntryContent content = oEntry.Content; //loop through all terms in the entry EntryIndexes oIndexes = content.EntryIndexes; for(int i=0;i<oIndexes.Count;i++) { Debug.WriteLine(oIndexes[i].IndexName + \": \" + oIndexes[i].Term); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryContent.Fields.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryContent.Fields.html",
    "title": "Fields property",
    "keywords": "Fields property Name Sdl.MultiTerm.TMO.Interop.EntryContent.Fields — Provides access to the descriptive fields of a particular entry. Type Sdl.MultiTerm.TMO.Interop.EntryFields (read) Index Parameters none Description Entry-level descriptive fields are fields (e.g. text or picklist fields) that define the whole entry, e.g. 'Subject: Medicine'. Via this property you can retrieve any entry-level descriptive fields, i.e. field label and content. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry Entry oEntry = oEntries.Item(1); EntryContent content = oEntry.Content; EntryFields oFields = content.Fields; for(int i=0;i<oFields.Count;i++) { Debug.WriteLine(oFields[i].Name + \": \" + oFields[i].Value); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryContent.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryContent.html",
    "title": "Sdl.MultiTerm.TMO.Interop.EntryContent class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.EntryContent class Name Sdl.MultiTerm.TMO.Interop.EntryContent — Provides programmatic access to the content of an entry. Description Via this class you can retrieve the content of a particular entry, either fully or partially, e.g. only a specific indexes or descriptive fields. Properties Content : Provides programmatic access to the content of a particular entry. EntryClass : Returns the entry class of a particular entry. EntryIndexes : Provides programmatic access to the indexes contained in a particular entry. Fields : Provides access to the descriptive fields of a particular entry. Methods Refresh : Refreshes the content of the current entry. Update : Updates the content of a particular entry. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry Entry oEntry = oEntries.Item(1); EntryContent content = oEntry.Content; //output entry content Debug.WriteLine(content.Content); Debug.WriteLine(\"Number of entry indexes: \" + content.EntryIndexes.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryContent.Refresh.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryContent.Refresh.html",
    "title": "Refresh method",
    "keywords": "Refresh method Name Sdl.MultiTerm.TMO.Interop.EntryContent.Refresh — Refreshes the content of the current entry. Returntype void Parameters none Description You can apply this method to make sure that the user always sees the most up-to-date entry content, e.g. when one user is viewing an entry that has just been updated by another user. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry Entry oEntry = oEntries.Item(1); //refresh entry content"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryContent.Update.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryContent.Update.html",
    "title": "Update method",
    "keywords": "Update method Name Sdl.MultiTerm.TMO.Interop.EntryContent.Update — Updates the content of a particular entry. Returntype void Parameters none Description Applying this method to a particular entry updates the content of this entry using the MultiTerm XML stream parameter provided. This method is the programmatic equivalent of the Edit function in MultiTerm Workstation, which allows users to edit the content of an entry, i.e. add/delete fields or update the content of a field. Note that before applying this method the corresponding entry needs to be locked , to prevent other users from trying to edit the entry at the same time. Note that in order to delete a particular field, you need to add a delete=\"true\" attribute to the description group tag (descripGrp) to delete in the update entry content (see example below). Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry Entry oEntry = oEntries.Item(1); //lock and edit entry oEntry.LockEntry(Sdl.MultiTerm.TMO.Interop.MtLockingState.mtLock); //define update content string updateContent=\"<conceptGrp> ... update entry content goes here ... </conceptGrp>\"; oEntry.Content=updateContent; oEntry.Content.Update(); Debug.WriteLine(\"Entry content updated successfully\"); Example of a field to delete: <descripGrp delete=\"true\"><descrip type=\"Subject\">General</descrip></descripGrp>"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryField.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryField.html",
    "title": "Sdl.MultiTerm.TMO.Interop.EntryField class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.EntryField class Name Sdl.MultiTerm.TMO.Interop.EntryField — Provides programmatic access to a particular entry-level descriptive field. Description Via this class, you can, for example, return the field label and/or value of a particular descriptive field, e.g. 'Subject: Medicine'. Properties Name : Returns the name, i.e. the label of a particular entry-level descriptive field. ReadOnly : Returns whether a particular entry-level descriptive field is read-only. Value : Returns the value of a particular entry-level descriptive field. Methods None Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select a particular entry Entries oEntries = oTb.Entries; Entry oEntry = oEntries.Item(1); EntryContent content = oEntry.Content; EntryFields oFields = content.Fields; EntryField oField = oFields[0]; Debug.WriteLine(\"Field label: \" + oField.Name); Debug.WriteLine(\"Field value: \" + oField.Value);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryField.Name.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryField.Name.html",
    "title": "Name property",
    "keywords": "Name property Name Sdl.MultiTerm.TMO.Interop.EntryField.Name — Returns the name, i.e. the label of a particular entry-level descriptive field. Type String (read) Index Parameters none Description Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select a particular entry Entries oEntries = oTb.Entries; Entry oEntry = oEntries.Item(1); EntryContent content = oEntry.Content; EntryFields oFields = content.Fields; EntryField oField = oFields[0]; Debug.WriteLine(\"Field label: \" + oField.Name);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryField.ReadOnly.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryField.ReadOnly.html",
    "title": "ReadOnly property",
    "keywords": "ReadOnly property Name Sdl.MultiTerm.TMO.Interop.EntryField.ReadOnly — Returns whether a particular entry-level descriptive field is read-only. Type Boolean (read) Index Parameters none Description Via this property you can ascertain whether a descriptive field is read-only for the currently logged-in user. It returns true, if it is read-only, otherwise false. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select a particular entry Entries oEntries = oTb.Entries; Entry oEntry = oEntries.Item(1); EntryContent content = oEntry.Content; EntryFields oFields = content.Fields; EntryField oField = oFields[0]; Debug.WriteLine(\"Field is read-only for me? \" + oField.ReadOnly);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryField.Value.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryField.Value.html",
    "title": "Value property",
    "keywords": "Value property Name Sdl.MultiTerm.TMO.Interop.EntryField.Value — Returns the value of a particular entry-level descriptive field. Type String (read / write) Index Parameters none Description Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select a particular entry Entries oEntries = oTb.Entries; Entry oEntry = oEntries.Item(1); EntryContent content = oEntry.Content; EntryFields oFields = content.Fields; EntryField oField = oFields[0]; Debug.WriteLine(\"Field value: \" + oField.Value);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryFields.Add.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryFields.Add.html",
    "title": "Add method",
    "keywords": "Add method Name Sdl.MultiTerm.TMO.Interop.EntryFields.Add — Adds an entry-level descriptive field to the collection. Returntype Sdl.MultiTerm.TMO.Interop.EntryField Parameters FieldName (String) Value (Variant) Description Applying this method adds a new entry descriptive field to the collection. Note that the field is not added to the actual entry."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryFields.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryFields.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.EntryFields.Count — Returns the number of entry-level descriptive fields. Type Long (read) Index Parameters none Description Via this property you can ascertain how many entry-level descriptive fields an entry has, i.e. fields that refer to the entry as such, e.g. 'Subject', 'Project', etc. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select a particular entry Entries oEntries = oTb.Entries; Entry oEntry = oEntries.Item(1); EntryContent content = oEntry.Content; EntryFields oFields = content.Fields; Debug.WriteLine(oFields.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryFields.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryFields.html",
    "title": "Sdl.MultiTerm.TMO.Interop.EntryFields class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.EntryFields class Name Sdl.MultiTerm.TMO.Interop.EntryFields — Provides programmatic access to the entry-level fields of a particular entry. Description Via this class you can retrieve the descriptive fields that refer to the entry as such, e.g. \"Subject.\" Properties Count : Returns the number of entry-level descriptive fields. Item : Refers to a particular entry-level descriptive field. Methods Add : Adds an entry-level descriptive field to the collection. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select a particular entry Entries oEntries = oTb.Entries; Entry oEntry = oEntries.Item(1); EntryContent content = oEntry.Content; EntryFields oFields = content.Fields; Debug.WriteLine(oFields.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryFields.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryFields.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.EntryFields.Item — Refers to a particular entry-level descriptive field. Type Sdl.MultiTerm.TMO.Interop.EntryField (read) Index Parameters Index (Variant) Description This property is used, for example, to retrieve the field label and/or value. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select a particular entry Entries oEntries = oTb.Entries; Entry oEntry = oEntries.Item(1); EntryContent content = oEntry.Content; EntryFields oFields = content.Fields; EntryField oField = oFields[0]; Debug.WriteLine(oField.Value);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIDs.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIDs.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.EntryIDs.Count — Returns the number of entry ids contained in a termbase. Type Long (read) Index Parameters none Description Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //get entry ids EntryIDs oIds = oTb.Entries.GetEntryIDs(); Debug.WriteLine(oIds.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIDs.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIDs.html",
    "title": "Sdl.MultiTerm.TMO.Interop.EntryIDs class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.EntryIDs class Name Sdl.MultiTerm.TMO.Interop.EntryIDs — Provides programmatic access to the collection of entry numbers of a particular termbase. Description Via this class you can, for example, list all entry numbers contained in a termbase. Entry numbers are used to uniquely identify termbase entries. Note that entries may get deleted in the course of time. This is why certain entry numbers might be 'missing' from the collection. For this reason, you cannot assume that the entry number collection is a continuous succession of numbers from 1 to n. This class is therefore useful if you want to implement an entries iterator function. Properties Count : Returns the number of entry ids contained in a termbase. Item : Refers to a particular entry id. Methods None Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //get entry ids EntryIDs oIds = oTb.Entries.GetEntryIDs(); for(int i=1;i==oIds.Count;i++) { Debug.WriteLine(oIds[i]); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIDs.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIDs.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.EntryIDs.Item — Refers to a particular entry id. Type String (read) Index Parameters Index (Long) Description Via this property you can output the actual entry id. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //get entry ids EntryIDs oIds = oTb.Entries.GetEntryIDs(); for(int i=1;i==oIds.Count;i++) { Debug.WriteLine(oIds[i]); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndex.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndex.html",
    "title": "Sdl.MultiTerm.TMO.Interop.EntryIndex class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.EntryIndex class Name Sdl.MultiTerm.TMO.Interop.EntryIndex — Provides programmatic access to a particular index. Description Via this class you can access a particular index, e.g. in order to retrieve any descriptive fields associated with the index, term-level descriptive fields, etc. Properties IndexFields : Provides programmatic access to the descriptive fields of an index. IndexName : Returns the name of the selected index. ReadOnly : Indicates whether an index is read-only. Term : Returns the term for the currently selected index. TermFields : Provides programmatic access to the term-level descriptive fields. Methods None Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry #1 Entry oEntry = oEntries.Item(1); EntryIndexes oIndexes = oEntry.Content.EntryIndexes; //select first entry index EntryIndex oIndex = oIndexes[0]; Debug.WriteLine(oIndex.Term); Debug.WriteLine(\"Number of index-level descriptive fields: \" + oIndex.IndexFields.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndex.IndexFields.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndex.IndexFields.html",
    "title": "IndexFields property",
    "keywords": "IndexFields property Name Sdl.MultiTerm.TMO.Interop.EntryIndex.IndexFields — Provides programmatic access to the descriptive fields of an index. Type Sdl.MultiTerm.TMO.Interop.EntryFields (read) Index Parameters none Description An index in an entry can have descriptive fields, which apply to all the terms contained in an index, e.g. a \"Definition\" field that provides information on the (synonymous) terms of an index. By applying this property to a specific index you can retrieve the descriptive fields associated with it (if any) with their respective labels, values, etc. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry #1 Entry oEntry = oEntries.Item(1); EntryIndexes oIndexes = oEntry.Content.EntryIndexes; //select first entry index EntryIndex oIndex = oIndexes[0]; //access index-level descriptive fields Debug.WriteLine(\"Number of index-level descriptive fields: \" + oIndex.IndexFields.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndex.IndexName.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndex.IndexName.html",
    "title": "IndexName property",
    "keywords": "IndexName property Name Sdl.MultiTerm.TMO.Interop.EntryIndex.IndexName — Returns the name of the selected index. Type String (read) Index Parameters none Description This property is used to return the name of the currently selected index, e.g. \"English\", \"German\", etc. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry #1 Entry oEntry = oEntries.Item(1); EntryIndexes oIndexes = oEntry.Content.EntryIndexes; //select first entry index EntryIndex oIndex = oIndexes[0]; //return index name Debug.WriteLine(\"Index name: \" + oIndex.IndexName);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndex.ReadOnly.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndex.ReadOnly.html",
    "title": "ReadOnly property",
    "keywords": "ReadOnly property Name Sdl.MultiTerm.TMO.Interop.EntryIndex.ReadOnly — Indicates whether an index is read-only. Type Boolean (read) Index Parameters none Description Via this property you can ascertain whether a particular index is read-only for the currently logged-in user. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry #1 Entry oEntry = oEntries.Item(1); EntryIndexes oIndexes = oEntry.Content.EntryIndexes; //select first entry index EntryIndex oIndex = oIndexes[0]; //see whether this index is read-only for currently logged-in user Debug.WriteLine(\"Is index read-only: \" + oIndex.ReadOnly);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndex.Term.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndex.Term.html",
    "title": "Term property",
    "keywords": "Term property Name Sdl.MultiTerm.TMO.Interop.EntryIndex.Term — Returns the term for the currently selected index. Type String (read / write) Index Parameters none Description Note that if, for example, the first available index contains two terms, these would be output like this: ///first term Debug.WriteLine(oIndexes[0].Term); ///second term Debug.WriteLine(oIndexes[1].Term); Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry #1 Entry oEntry = oEntries.Item(1); EntryIndexes oIndexes = oEntry.Content.EntryIndexes; //select first entry index EntryIndex oIndex = oIndexes[0]; //output first term Debug.WriteLine(oIndex.Term);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndex.TermFields.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndex.TermFields.html",
    "title": "TermFields property",
    "keywords": "TermFields property Name Sdl.MultiTerm.TMO.Interop.EntryIndex.TermFields — Provides programmatic access to the term-level descriptive fields. Type Sdl.MultiTerm.TMO.Interop.EntryFields (read) Index Parameters none Description By applying this property you can retrieve the descriptive fields associated with the term (if any). Descriptive fields are used to categorise and describe a specific term (e.g. \"Grammar\", \"Definition\", \"Note\", etc.) Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry #1 Entry oEntry = oEntries.Item(1); EntryIndexes oIndexes = oEntry.Content.EntryIndexes; //select first entry index EntryIndex oIndex = oIndexes[0]; //return number of descriptive fields for the first term Debug.WriteLine(\"Number of term-level descriptive fields: \" + oIndex.TermFields.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndexes.Add.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndexes.Add.html",
    "title": "Add method",
    "keywords": "Add method Name Sdl.MultiTerm.TMO.Interop.EntryIndexes.Add — Adds an index to the collection. Returntype Sdl.MultiTerm.TMO.Interop.EntryIndex Parameters IndexName (String) Term (String) Description Applying this method adds an index to the index collection. Note that the index is not added to the actual entry."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndexes.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndexes.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.EntryIndexes.Count — Returns the number of indexes contained in a particular entry. Type Long (read) Index Parameters none Description Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry #1 Entry oEntry = oEntries.Item(1); EntryIndexes oIndexes = oEntry.Content.EntryIndexes; Debug.WriteLine(\"Number of indexes/terms in the current entry:\" + oIndexes.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndexes.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndexes.html",
    "title": "Sdl.MultiTerm.TMO.Interop.EntryIndexes class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.EntryIndexes class Name Sdl.MultiTerm.TMO.Interop.EntryIndexes — Provides programmatic access to the indexes contained in a particular entry. Description Via this class you can retrieve the indexes (i.e. languages) and terms contained in a selected entry. Properties Count : Returns the number of indexes contained in a particular entry. Item : Refers to a particular entry index. Methods Add : Adds an index to the collection. Sample Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; Entry oEntry = oEntries.Item(1); EntryIndexes oIndexes = oEntry.Content.EntryIndexes; for(int i=0;i<oIndexes.Count;i++) { Debug.WriteLine(oIndexes[i].IndexName + \": \" + oIndexes[i].Term); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndexes.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.EntryIndexes.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.EntryIndexes.Item — Refers to a particular entry index. Type Sdl.MultiTerm.TMO.Interop.EntryIndex (read) Index Parameters Index (Variant) Description This property is used to select a particular index from the entry index collection. You can either use the index number, e.g. oIndexes[0] or the actual index name as parameter, e.g. oIndexes[\"English\"]. It is recommended to use the index number, as an index (language) can contain more than one term. For example, if an entry has two languages and if each language has two terms, the last term will be referred to as oIndexes[3].Term. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; Entries oEntries = oTb.Entries; //select entry #1 Entry oEntry = oEntries.Item(1); EntryIndexes oIndexes = oEntry.Content.EntryIndexes; Debug.WriteLine(oIndexes[0].Term);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.Content.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.Content.html",
    "title": "Content property",
    "keywords": "Content property Name Sdl.MultiTerm.TMO.Interop.ExportDefinition.Content — Returns the export definition content. Type String (read) Index Parameters none Description An export definition contains an XSL stylesheet, which is used to render MultiTerm XML entry content into the requested export format, e.g. TXT, HTML, RTF, etc. Via this property you can output the content, i.e. the 'source code' of the export definition. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an export definition ExportDefinitions oExpDefs = oTb.ExportDefinitions; ExportDefinition oExpDef = oExpDefs[\"Default export definition\"]; Debug.WriteLine(oExpDef.Content);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.Delete.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.Delete.html",
    "title": "Delete method",
    "keywords": "Delete method Name Sdl.MultiTerm.TMO.Interop.ExportDefinition.Delete — Removes the export definition from the collection. Returntype void Parameters none Description Applying this method removes the export definition physically from the collection of export definitions. This can only be done, if the currently logged-in user is allowed to delete the export definition in question. If the user does not have the right to delete the export definition, a corresponding error message will be thrown. Users usually can only delete export definitions created by themselves. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an export definition ExportDefinitions oExpDefs = oTb.ExportDefinitions; ExportDefinition oExpDef = oExpDefs[\"Default export definition\"]; oExpDef.Delete();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.Description.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.Description.html",
    "title": "Description property",
    "keywords": "Description property Name Sdl.MultiTerm.TMO.Interop.ExportDefinition.Description — Returns the export definition description. Type String (read) Index Parameters none Description Each export definition can have an optional description to provide further information on it. Via this property you can output the export definition description string. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an export definition ExportDefinitions oExpDefs = oTb.ExportDefinitions; ExportDefinition oExpDef = oExpDefs[\"Default export definition\"]; Debug.WriteLine(oExpDef.Description);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.html",
    "title": "Sdl.MultiTerm.TMO.Interop.ExportDefinition class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.ExportDefinition class Name Sdl.MultiTerm.TMO.Interop.ExportDefinition — Provides programmatic access to a particular export definition. Description Export definitions contain an XSL stylesheet that transforms MultiTerm XML into the specified export format, e.g. TXT, HTML, RTF, etc. Via this class you can retrieve information on a particular export definition, e.g. the export definition description, the content (i.e. the export definition 'source code'), etc. In addition you can also use this class to edit an existing export definition with the export definition wizard. Properties Content : Returns the export definition content. Description : Returns the export definition description. Name : Returns the name of the export definition. Owner : Returns the owner name for a particular export definition. ReadOnly : Returns whether a particular export definition is read-only. Methods Delete : Removes the export definition from the collection. Load : Updates the selected export definition from an external export definition file. ProcessExport : Carries out the actual export process. Save : Saves the export definition to an external file. StartWizard : Calls up the export wizard for editing a particular export definition. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an export definition ExportDefinitions oExpDefs = oTb.ExportDefinitions; ExportDefinition oExpDef = oExpDefs[\"Default export definition\"]; Debug.WriteLine(oExpDef.Description);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.Load.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.Load.html",
    "title": "Load method",
    "keywords": "Load method Name Sdl.MultiTerm.TMO.Interop.ExportDefinition.Load — Updates the selected export definition from an external export definition file. Returntype void Parameters FileName (String) Description By applying this method to an export definition you can update the export definition from the content of an export definition (*.xdx) file. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an export definition ExportDefinitions oExpDefs = oTb.ExportDefinitions; ExportDefinition oExpDef = oExpDefs[\"Default export definition\"]; oExpDef.Load(\"c:\\\\temp\\\\exp_def.xdx\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.Name.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.Name.html",
    "title": "Name property",
    "keywords": "Name property Name Sdl.MultiTerm.TMO.Interop.ExportDefinition.Name — Returns the name of the export definition. Type String (read) Index Parameters none Description Each export definition has a unique descriptive name. For example, this is the name that is listed in the export definition list of the Termbase Catalogue in MultiTerm Workstation. All export definitions can be referenced via this unique name. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select export definition ExportDefinitions oExpDefs = oTb.ExportDefinitions; ExportDefinition oExpDef; //return list of export definition names for(int i=0;i<oExpDefs.Count;i++) { oExpDef = oExpDefs[i]; Debug.WriteLine(oExpDef.Name); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.Owner.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.Owner.html",
    "title": "Owner property",
    "keywords": "Owner property Name Sdl.MultiTerm.TMO.Interop.ExportDefinition.Owner — Returns the owner name for a particular export definition. Type String (read) Index Parameters none Description Sample Sdl.MultiTerm.TMO.Interop.ExportDefinitions oExportDefs = myTermbase.ExportDefinitions; //return owner of first export definition Debug.WriteLine(oExportDefs[0].Owner);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.ProcessExport.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.ProcessExport.html",
    "title": "ProcessExport method",
    "keywords": "ProcessExport method Name Sdl.MultiTerm.TMO.Interop.ExportDefinition.ProcessExport — Carries out the actual export process. Returntype void Parameters Value ( Sdl.MultiTerm.TMO.Interop.MtTaskType ) SourceIndex (String, optional, default is \"\" ) TargetIndex (String, optional, default is \"\" ) Description Applying this method to an export definition runs the export. It requires the task type as parameter, i.e. whether the export should be run in script mode (i.e. without the wizard) or using the export wizard. In addition you can provide the optional source/target index parameters. Note that export definitions can use the source/target index as logical fields, e.g. an export definition that only exports source and target terms. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an export definition ExportDefinitions oExpDefs = oTb.ExportDefinitions; ExportDefinition oExpDef = oExpDefs[\"Default export definition\"]; oExpDef.ProcessExport(Sdl.MultiTerm.TMO.Interop.MtTaskType.mtScript, \"English\", \"German\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.ReadOnly.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.ReadOnly.html",
    "title": "ReadOnly property",
    "keywords": "ReadOnly property Name Sdl.MultiTerm.TMO.Interop.ExportDefinition.ReadOnly — Returns whether a particular export definition is read-only. Type Boolean (read) Index Parameters none Description Export definitions may be read-only, e.g. when the termbase administrator provides a central export definition, which is not supposed to be altered by the end users. Via this property you can ascertain whether a particular export definition is read-only for the currently logged-in user. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an export definition ExportDefinitions oExpDefs = oTb.ExportDefinitions; ExportDefinition oExpDef = oExpDefs[\"Default export definition\"]; Debug.WriteLine(\"Is this export definition read-only for me? \" + oExpDef.ReadOnly);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.Save.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.Save.html",
    "title": "Save method",
    "keywords": "Save method Name Sdl.MultiTerm.TMO.Interop.ExportDefinition.Save — Saves the export definition to an external file. Returntype void Parameters FileName (String) Description Applying this method to a particular export definition saves the content of the export definition to an external file. Note that you need to provide the file path and name as well as the extension (*.xdx) as parameter. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an export definition ExportDefinitions oExpDefs = oTb.ExportDefinitions; ExportDefinition oExpDef = oExpDefs[\"Default export definition\"]; oExpDef.Save(\"c:\\\\temp\\\\export.xdx\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.StartWizard.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinition.StartWizard.html",
    "title": "StartWizard method",
    "keywords": "StartWizard method Name Sdl.MultiTerm.TMO.Interop.ExportDefinition.StartWizard — Calls up the export wizard for editing a particular export definition. Returntype void Parameters XMLFileName (String, optional ) SourceIndex (String, optional, default is \"\" ) TargetIndex (String, optional, default is \"\" ) Description Applying this method to an export definition, opens the export wizard, which allows for GUI-based editing of the export definition. This method takes the name and path of an external export definition (*.xdx) file as parameter. This means that you can provide an external export definition file to 'pre-fill' the wizard with some information. In addition you can provide the source/target language string parameters, as export definitions may use the source/target index as logical fields, e.g. an export definition that only exports source and target terms. Note that the currently-logged in user needs to have permissions to edit the export definition in question, otherwise an error will be thrown. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an export definition ExportDefinitions oExpDefs = oTb.ExportDefinitions; ExportDefinition oExpDef = oExpDefs[\"Default export definition\"]; oExpDef.StartWizard(\"c:\\\\temp\\\\export.xdx\", \"English\", \"German\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinitions.Add.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinitions.Add.html",
    "title": "Add method",
    "keywords": "Add method Name Sdl.MultiTerm.TMO.Interop.ExportDefinitions.Add — Adds a new export definition to the collection. Returntype Sdl.MultiTerm.TMO.Interop.ExportDefinition Parameters Name (String) Description (String) FileName (String) Description Applying this method to an export definition collection adds a new export definition from an export definition that was saved as an external *.xdx file. This method requires the name of the new export definition, an optional description and the full path and name of the export definition file. Sample Termbase oTb = oTbs[\"Termbase name\"]; ExportDefinitions oExpDefs = oTb.ExportDefinitions; oExpDefs.Add(\"Export definition name\", \"Export definition description\", \"c:\\\\temp\\\\exp_def.xdx\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinitions.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinitions.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.ExportDefinitions.Count — Returns the number of available export definitions. Type Long (read) Index Parameters none Description Via this property you can ascertain how many export definitions are associated with a particular termbase. Sample Termbase oTb = oTbs[\"Termbase name\"]; ExportDefinitions oExpDefs = oTb.ExportDefinitions; Debug.Write(\"Number of export definitions: +\" + oExpDefs.Count);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinitions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinitions.html",
    "title": "Sdl.MultiTerm.TMO.Interop.ExportDefinitions class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.ExportDefinitions class Name Sdl.MultiTerm.TMO.Interop.ExportDefinitions — Provides programmatic access to the export definitions of a termbase. Description Via this class you can access the export definitions associated with a particular termbase. You can use it to, for example, generate a list of available export definitions. Properties Count : Returns the number of available export definitions. Item : Provides access to a particular export definition. Methods Add : Adds a new export definition to the collection. Refresh : Updates the export definition collection. StartWizard : Starts the Export Definition wizard. Sample Termbase oTb = oTbs[\"Termbase name\"]; ExportDefinitions oExpDefs = oTb.ExportDefinitions; Debug.Write(\"Number of export definitions: +\" + oExpDefs.Count); for(int i=0;i<oExpDefs.Count;i++) { Debug.Write(oExpDefs[i].Name); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinitions.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinitions.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.ExportDefinitions.Item — Provides access to a particular export definition. Type Sdl.MultiTerm.TMO.Interop.ExportDefinition (read) Index Parameters Index (Variant) Description To select a specific export definition you can either use the corresponding index number, e.g. Item(0), or the definition name, e.g. Item(\"Default export definition\"). Sample Termbase oTb = oTbs[\"Termbase name\"]; ExportDefinitions oExpDefs = oTb.ExportDefinitions; ExportDefinition oExpDef = oExpDefs[0];"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinitions.Refresh.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinitions.Refresh.html",
    "title": "Refresh method",
    "keywords": "Refresh method Name Sdl.MultiTerm.TMO.Interop.ExportDefinitions.Refresh — Updates the export definition collection. Returntype void Parameters none Description By applying this method you can make sure that MultiTerm client users always have access to the up-to-date export definition collection, which includes all definitions that have been added while the users were online. Sample Termbase oTb = oTbs[\"Termbase name\"]; ExportDefinitions oExpDefs = oTb.ExportDefinitions; oExpDefs.Refresh();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinitions.StartWizard.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ExportDefinitions.StartWizard.html",
    "title": "StartWizard method",
    "keywords": "StartWizard method Name Sdl.MultiTerm.TMO.Interop.ExportDefinitions.StartWizard — Starts the Export Definition wizard. Returntype Sdl.MultiTerm.TMO.Interop.ExportDefinition Parameters none Description Applying this method opens the Export Definition wizard, which allows you to create a new export definition with the wizard GUI. Sample Termbase oTb = oTbs[\"Termbase name\"]; ExportDefinitions oExpDefs = oTb.ExportDefinitions; oExpDefs.StartWizard();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Active.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Active.html",
    "title": "Active property",
    "keywords": "Active property Name Sdl.MultiTerm.TMO.Interop.FilterDefinition.Active — Activates a particular filter. Type Boolean (read / write) Index Parameters none Description This property can be used to activate (or deactivate) a filter. To activate a filter, set this property to true. The filter will then be applied to subsequent search operations. Via this property you can also ascertain whether a filter is active or not. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select filter FilterDefinitions oFilters = oTb.FilterDefinitions; FilterDefinition oFilter = oFilters[\"Missing target\"]; //activate filter oFilter.Active = true; Debug.WriteLine(\"Is filter active? \" + oFilter.Active); //deactivate filter oFilter.Active = false;"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Content.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Content.html",
    "title": "Content property",
    "keywords": "Content property Name Sdl.MultiTerm.TMO.Interop.FilterDefinition.Content — Returns the filter definition content. Type String (read) Index Parameters none Description A filter contains an XPATH statement, which is applied to MultiTerm XML in order to ascertain whether the entry fits the statement or not. Via this property you can output the content, i.e. the 'source code' of the filter definition. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select filter FilterDefinitions oFilters = oTb.FilterDefinitions; FilterDefinition oFilter = oFilters[\"Missing target\"]; Debug.WriteLine(oFilter.Content);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Delete.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Delete.html",
    "title": "Delete method",
    "keywords": "Delete method Name Sdl.MultiTerm.TMO.Interop.FilterDefinition.Delete — Removes the filter from the collection. Returntype void Parameters none Description Applying this method removes the filter physically from the collection of filter definitions. This can only be done, if the currently logged-in user is allowed to delete the filter in question. If the user does not have the right to delete the filter, a corresponding error message will be thrown. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select filter FilterDefinitions oFilters = oTb.FilterDefinitions; FilterDefinition oFilter = oFilters[\"Missing target\"]; oFilter.Delete();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Description.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Description.html",
    "title": "Description property",
    "keywords": "Description property Name Sdl.MultiTerm.TMO.Interop.FilterDefinition.Description — Returns the filter description. Type String (read) Index Parameters none Description Each filter can have an optional description to provide further information on it. Via this property you can output the filter description string. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select filter FilterDefinitions oFilters = oTb.FilterDefinitions; FilterDefinition oFilter = oFilters[\"Missing target\"]; Debug.WriteLine(\"Filter description: \" + oFilter.Description);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.html",
    "title": "Sdl.MultiTerm.TMO.Interop.FilterDefinition class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.FilterDefinition class Name Sdl.MultiTerm.TMO.Interop.FilterDefinition — Provides programmatic access to a particular filter definition. Description Filters contain an XPATH statement that gets applied to the MultiTerm entries, which are XML-based. If the XPATH statement fits the entry content, it returns true, if not it returns false. Via this class you can retrieve information on a particular filter, e.g. the filter description, the content (i.e. the filter source code'), etc. In addition you can also use this class to edit an existing filter using the filter wizard. Properties Active : Activates a particular filter. Content : Returns the filter definition content. Description : Returns the filter description. ID : Returns the unique id of the filter. Name : Returns the name of the filter. Owner : Returns the owner name for a particular filter definition. ReadOnly : Returns whether a particular filter is read-only. Methods Delete : Removes the filter from the collection. Load : Updates the selected filter from an external filter definition file. Save : Saves the filter definition to an external file. StartWizard : Calls up the filter wizard for editing a particular filter. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select filter FilterDefinitions oFilters = oTb.FilterDefinitions; FilterDefinition oFilter = oFilters[\"Missing target\"]; Debug.WriteLine(oFilter.Description);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.ID.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.ID.html",
    "title": "ID property",
    "keywords": "ID property Name Sdl.MultiTerm.TMO.Interop.FilterDefinition.ID — Returns the unique id of the filter. Type Long (read) Index Parameters none Description Each filter is referenced in the database backend using a unique id, which the 'normal' user never gets to see. You can use this property to retrieve the corresponding id. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select filter FilterDefinitions oFilters = oTb.FilterDefinitions; FilterDefinition oFilter = oFilters[\"Missing target\"]; Debug.WriteLine(oFilter.ID);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Load.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Load.html",
    "title": "Load method",
    "keywords": "Load method Name Sdl.MultiTerm.TMO.Interop.FilterDefinition.Load — Updates the selected filter from an external filter definition file. Returntype void Parameters FileName (String) Description By applying this method to a layout you can update the filter from the content of an external filter definition (*.xdf) file. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select filter FilterDefinitions oFilters = oTb.FilterDefinitions; FilterDefinition oFilter = oFilters[\"Missing target\"]; oFilter.Load(\"c:\\\\temp\\\\filter.xdf\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Name.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Name.html",
    "title": "Name property",
    "keywords": "Name property Name Sdl.MultiTerm.TMO.Interop.FilterDefinition.Name — Returns the name of the filter. Type String (read) Index Parameters none Description Each filter has a unique descriptive name. This is the name that end users usually get to see in a MultiTerm client application. For example, this is the name that is listed in the filter dropdown list of MultiTerm Workstation. Filters can be referenced via this unique name. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select filter FilterDefinitions oFilters = oTb.FilterDefinitions; FilterDefinition oFilter; for(int i=0;i<oFilters.Count;i++) { oFilter = oFilters[i]; Debug.WriteLine(oFilter.Name); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Owner.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Owner.html",
    "title": "Owner property",
    "keywords": "Owner property Name Sdl.MultiTerm.TMO.Interop.FilterDefinition.Owner — Returns the owner name for a particular filter definition. Type String (read) Index Parameters none Description Sample Sdl.MultiTerm.TMO.Interop.FilterDefinitions oFilters = myTermbase.FilterDefinitions; //return owner of first filter definition Debug.WriteLine(oFilters[0].Owner);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.ReadOnly.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.ReadOnly.html",
    "title": "ReadOnly property",
    "keywords": "ReadOnly property Name Sdl.MultiTerm.TMO.Interop.FilterDefinition.ReadOnly — Returns whether a particular filter is read-only. Type Boolean (read) Index Parameters none Description Filters may be read-only, e.g. when the termbase administrator provides a central filter, which is not supposed to be altered by the end users. Via this property you can ascertain whether a particular filter is read-only for the currently logged-in user. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select filter FilterDefinitions oFilters = oTb.FilterDefinitions; FilterDefinition oFilter = oFilters[\"Missing target\"]; Debug.WriteLine(\"Filter is read-only? \" + oFilter.ReadOnly);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Save.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.Save.html",
    "title": "Save method",
    "keywords": "Save method Name Sdl.MultiTerm.TMO.Interop.FilterDefinition.Save — Saves the filter definition to an external file. Returntype void Parameters FileName (String) Description Applying this method to a particular filter definition saves the content of the filter definition to an external file. Note that you need to provide the file path and name as well as the extension (*.xdf) as parameter. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select filter FilterDefinitions oFilters = oTb.FilterDefinitions; FilterDefinition oFilter = oFilters[\"Missing target\"]; oFilter.Save(\"c:\\\\temp\\\\filter.xdf\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.StartWizard.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinition.StartWizard.html",
    "title": "StartWizard method",
    "keywords": "StartWizard method Name Sdl.MultiTerm.TMO.Interop.FilterDefinition.StartWizard — Calls up the filter wizard for editing a particular filter. Returntype void Parameters XMLFileName (String, optional ) Description Applying this method to a filter definition, opens the filter wizard, which allows for GUI-based editing of the filter. This method takes the name and path of an external filter definition (*.xdf) file as parameter. This means that you can provide an external filter definition file to 'pre-fill' the wizard with some information. Note that the currently-logged in user needs to have permissions to edit the filter in question, otherwise an error will be thrown. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select filter FilterDefinitions oFilters = oTb.FilterDefinitions; FilterDefinition oFilter = oFilters[\"Missing target\"]; oFilter.StartWizard(\"c:\\\\temp\\\\filter.xdf\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinitions.Add.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinitions.Add.html",
    "title": "Add method",
    "keywords": "Add method Name Sdl.MultiTerm.TMO.Interop.FilterDefinitions.Add — Adds a new filter definition to the collection. Returntype Sdl.MultiTerm.TMO.Interop.FilterDefinition Parameters Name (String) Description (String) FileName (String) Description Applying this method to a filter definition collection adds a new filter definition from a filter definition that was saved as an external *.xdf file. This method requires the name of the new filter definition, an optional description and the full path and name of the filter definition file. Sample Termbase oTb = oTbs[\"Termbase name\"]; FilterDefinitions oFilters = oTb.FilterDefinitions; oFilters.Add(\"Filter definition name\", \"Filter definition description\", \"c:\\\\temp\\\\missing_target_.xdf\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinitions.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinitions.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.FilterDefinitions.Count — Returns the number of available filter definitions. Type Long (read) Index Parameters none Description Via this property you can ascertain how many filter definitions are associated with a particular termbase. Sample Termbase oTb = oTbs[\"Termbase name\"]; FilterDefinitions oFilters = oTb.FilterDefinitions; Debug.Write(\"Number of filters: +\" + oFilters.Count);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinitions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinitions.html",
    "title": "Sdl.MultiTerm.TMO.Interop.FilterDefinitions class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.FilterDefinitions class Name Sdl.MultiTerm.TMO.Interop.FilterDefinitions — Provides programmatic access to the filter definitions of a termbase. Description Filters are used to select a subset of termbase entries, e.g. all entries that have a \"Definition\" field. Filters are basically XPath statements that are applied to the entry XML content. Via this property you can, for example, return the number of available filter definitions, generate a list containing the names of available filter definitions, etc. Properties Count : Returns the number of available filter definitions. Item : Provides access to a particular filter definition. Methods Add : Adds a new filter definition to the collection. Refresh : Updates the filter definition collection. StartWizard : Starts the Filter Definition wizard. Sample Termbase oTb = oTbs[\"Termbase name\"]; ExportDefinitions oFilters = oTb.FilterDefinitions; Debug.Write(\"Number of filters: +\" + oFilters.Count); for(int i=0;i<oFilters.Count;i++) { Debug.Write(oFilters[i].Name); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinitions.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinitions.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.FilterDefinitions.Item — Provides access to a particular filter definition. Type Sdl.MultiTerm.TMO.Interop.FilterDefinition (read) Index Parameters Index (Variant) Description To select a specific filter definition you can either use the corresponding index number, e.g. Item(0), or the definition name, e.g. Item(\"Missing target\")."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinitions.Refresh.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinitions.Refresh.html",
    "title": "Refresh method",
    "keywords": "Refresh method Name Sdl.MultiTerm.TMO.Interop.FilterDefinitions.Refresh — Updates the filter definition collection. Returntype void Parameters none Description By applying this method you can make sure that MultiTerm client users always have access to the up-to-date filter definition collection, which includes all definitions that have been added while the users were online. Sample Termbase oTb = oTbs[\"Termbase name\"]; FilterDefinitions oExpDefs = oTb.FilterDefinitions; oFilters.Refresh();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinitions.StartWizard.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.FilterDefinitions.StartWizard.html",
    "title": "StartWizard method",
    "keywords": "StartWizard method Name Sdl.MultiTerm.TMO.Interop.FilterDefinitions.StartWizard — Starts the Filter Definition wizard. Returntype Sdl.MultiTerm.TMO.Interop.FilterDefinition Parameters none Description Applying this method opens the Filter Definition wizard, which allows you to create a new filter definition with the wizard GUI. Sample Termbase oTb = oTbs[\"Termbase name\"]; FilterDefinitions oFilters = oTb.FilterDefinitions; oFilters.StartWizard();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerm.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerm.html",
    "title": "Sdl.MultiTerm.TMO.Interop.HitTerm class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.HitTerm class Name Sdl.MultiTerm.TMO.Interop.HitTerm — Provides programmatic access to a particular hit term. Description This class allows you to retrieve a particular hit term. You will usually avail of this class to retrieve information such as the actual hit term content, the associated entry id, etc. This is useful, for example, to fill a list control with the hit terms found. Properties Index : Returns the name of the index in which a hit term has been found. ParentEntryID : Returns the entry id associated with a particular hit term. SearchScore : Returns the fuzziness score for a particular hit term. Termbase : Returns the name of the termbase in which a hit term was found. Text : Returns the actual hit term. Methods None Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseSearch oSearch = oTb.Search; oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.SourceIndex=\"English\"; oSearch.SearchExpression =\"starship\"; HitTerms oHits = oSearch.Execute(); HitTerm oHit; for(int i=0;i<oHits.Count;i++) { oHit = oHits[i]; Debug.WriteLine(oHit.Text); Debug.WriteLine(oHit.Termbase); Debug.WriteLine(oHit.Index); Debug.WriteLine(oHit.ParentEntryID); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerm.Index.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerm.Index.html",
    "title": "Index property",
    "keywords": "Index property Name Sdl.MultiTerm.TMO.Interop.HitTerm.Index — Returns the name of the index in which a hit term has been found. Type String (read) Index Parameters none Description Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseSearch oSearch = oTb.Search; oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.SourceIndex=\"English\"; oSearch.SearchExpression =\"starship\"; HitTerms oHits = oSearch.Execute(); HitTerm oHit; for(int i=0;i<oHits.Count;i++) { oHit = oHits[i]; Debug.WriteLine(oHit.Index); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerm.ParentEntryID.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerm.ParentEntryID.html",
    "title": "ParentEntryID property",
    "keywords": "ParentEntryID property Name Sdl.MultiTerm.TMO.Interop.HitTerm.ParentEntryID — Returns the entry id associated with a particular hit term. Type String (read) Index Parameters none Description Suppose you would like to implement a function that allows users to click a hit term in the list to display the entire entry content, i.e. copy the functionality provided in MultiTerm Workstation. Each entry is uniquely identified via its entry id. This is why the HitTerm class allows you to retrieve the id of the entry the hit term belongs to. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseSearch oSearch = oTb.Search; oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.SourceIndex=\"English\"; oSearch.SearchExpression =\"starship\"; HitTerms oHits = oSearch.Execute(); HitTerm oHit; Entries oEntries = oTb.Entries; Entry oEntry; for(int i=0;i<oHits.Count;i++) { oHit = oHits[i]; int myId = Convert.ToInt32(oHit.ParentEntryID); oEntry = oEntries.Item(myId); Debug.WriteLine(oEntry.Content.Content); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerm.SearchScore.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerm.SearchScore.html",
    "title": "SearchScore property",
    "keywords": "SearchScore property Name Sdl.MultiTerm.TMO.Interop.HitTerm.SearchScore — Returns the fuzziness score for a particular hit term. Type Long (read) Index Parameters none Description The fuzzy search allows MultiTerm to find the closest approximation to a search expression. Via this property you can ascertain how closely a hit term resembles the actual search expression. You can use this information, for example, in order not to display hit terms that are below a certain fuzziness percentage. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseSearch oSearch = oTb.Search; oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.SourceIndex=\"English\"; oSearch.SearchExpression =\"starship\"; HitTerms oHits = oSearch.Execute(); HitTerm oHit; Entries oEntries = oTb.Entries; //only display matches greater than 80% for(int i=0;i<oHits.Count;i++) { oHit = oHits[i]; if(oHit.SearchScore > 80) { Debug.WriteLine(oHit.Text); } }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerm.Termbase.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerm.Termbase.html",
    "title": "Termbase property",
    "keywords": "Termbase property Name Sdl.MultiTerm.TMO.Interop.HitTerm.Termbase — Returns the name of the termbase in which a hit term was found. Type String (read) Index Parameters none Description Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseSearch oSearch = oTb.Search; oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.SourceIndex=\"English\"; oSearch.SearchExpression =\"starship\"; HitTerms oHits = oSearch.Execute(); HitTerm oHit; Entries oEntries = oTb.Entries; for(int i=0;i<oHits.Count;i++) { oHit = oHits[i]; Debug.WriteLine(oHit.Termbase); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerm.Text.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerm.Text.html",
    "title": "Text property",
    "keywords": "Text property Name Sdl.MultiTerm.TMO.Interop.HitTerm.Text — Returns the actual hit term. Type String (read) Index Parameters none Description This property is used to return the actual hit term content. This is probably the most frequently used property of the HitTerm class, as it is used to generate the hit term list. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseSearch oSearch = oTb.Search; oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.SourceIndex=\"English\"; oSearch.SearchExpression =\"starship\"; HitTerms oHits = oSearch.Execute(); HitTerm oHit; Entries oEntries = oTb.Entries; //generate hit list for(int i=0;i<oHits.Count;i++) { oHit = oHits[i]; Debug.WriteLine(oHit.Text); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerms.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerms.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.HitTerms.Count — Returns the number of hit terms found. Type Long (read) Index Parameters none Description Via this property you can ascertain how many hit terms have been found (if any) for a search or browse operation. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseSearch oSearch = oTb.Search; oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.SourceIndex=\"English\"; oSearch.SearchExpression =\"starship\"; HitTerms oHits = oSearch.Execute(); if(oHits.Count==0) { Debug.WriteLine(\"No hits found\"); } else { Debug.WriteLine(\"Number of hits found: \" + oHits.Count.ToString()); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerms.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerms.html",
    "title": "Sdl.MultiTerm.TMO.Interop.HitTerms class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.HitTerms class Name Sdl.MultiTerm.TMO.Interop.HitTerms — Provides programmatic access to the results of a search or browse operation. Description When executing a search or browse operation the results need to be stored in a HitTerms object, from which they can then be retrieved. You can use the HitTerms object to return the number of hits found (if any) and to loop through them. Properties Count : Returns the number of hit terms found. Item : Refers to a particular hit term. Methods None Sample //example of browse operation Termbase oTb = oTbs[\"Termbase name\"]; TermbaseBrowser oBrowser = oTb.Browse; oBrowser.Direction = Sdl.MultiTerm.TMO.Interop.MtBrowseDirection.mtBrowseDown; oBrowser.MaximumTermCount = 1; oBrowser.StartTerm=\"\"; oBrowser.SourceIndex=\"English\"; HitTerms oHits = oBrowser.Execute(); Debug.Write(oHits[0].Text); //example of search operation Termbase oTb = oTbs[\"Termbase name\"]; TermbaseSearch oSearch = oTb.Search; oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.SourceIndex=\"English\"; oSearch.SearchExpression =\"starship\"; HitTerms oHits = oSearch.Execute(); for(int i=0;i<oHits.Count;i++) { Debug.WriteLine(oHits[i].Text); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerms.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.HitTerms.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.HitTerms.Item — Refers to a particular hit term. Type Sdl.MultiTerm.TMO.Interop.HitTerm (read) Index Parameters Index (Variant) Description This class allows you to retrieve a particular hit term from a hit terms collection, e.g. to output the actual hit term content, the associated entry id, etc. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseSearch oSearch = oTb.Search; oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.SourceIndex=\"English\"; oSearch.SearchExpression =\"starship\"; HitTerms oHits = oSearch.Execute(); Debug.WriteLine(oHits[0].Text);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Homonym.EntryID.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Homonym.EntryID.html",
    "title": "EntryID property",
    "keywords": "EntryID property Name Sdl.MultiTerm.TMO.Interop.Homonym.EntryID — Returns the entry id of a particular homonym. Type Long (read) Index Parameters none Description Via the entry id you can refer to a specific termbase entry and retrieve its content. This can be useful for seeing whether the selected homonym term belongs to a different concept or is an actual duplicate, and therefore redundant. Sample Termbase oTb = oTbs[\"Termbase name\"]; Homonyms oHomonyms = oTb.GetHomonyms(\"English\", \"\",\"\"); //select first homonym term Homonym oHomonym = oHomonyms[0]; Debug.Write(\"Homonym entry id: \" + oHomonym.EntryID.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Homonym.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Homonym.html",
    "title": "Sdl.MultiTerm.TMO.Interop.Homonym class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.Homonym class Name Sdl.MultiTerm.TMO.Interop.Homonym — Provides programmatic access to a particular homonym in the termbase. Description Via this class you can retrieve information on a selected homonym term. This will usually be the actual term itself and the entry number. The sample code below retrieves all homonyms from the \"English\" index, then selects the first homonym term and then the second. Note that via referring to the unique entry id, you can retrieve the content of an entire entry. This can be useful for implementing a function that lists all homonyms of a particular index. By clicking a homonym entry id, the user can display the entire entry and thus ascertain whether the homonym is a (redundant) duplicate or is a real homonym, i.e. the same term having different meanings (e.g. 'book' a flight and read a 'book'). Properties EntryID : Returns the entry id of a particular homonym. Index : Returns the index the homonym term was found in. Term : Returns the homonym term. Methods None Sample Termbase oTb = oTbs[\"Termbase name\"]; Homonyms oHomonyms = oTb.GetHomonyms(\"English\", \"\",\"\"); //select first homonym term Homonym oHomonym = oHomonyms[0]; Debug.Write(\"Homonym term: \" + oHomonym.Term); Debug.Write(\"Homonym entry id: \" + oHomonym.EntryID.ToString()); //select second homonym term oHomonym = oHomonyms[1]; Debug.Write(\"Homonym term: \" + oHomonym.Term); Debug.Write(\"Homonym entry id: \" + oHomonym.EntryID.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Homonym.Index.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Homonym.Index.html",
    "title": "Index property",
    "keywords": "Index property Name Sdl.MultiTerm.TMO.Interop.Homonym.Index — Returns the index the homonym term was found in. Type String (read) Index Parameters none Description This property is useful for outputting the index (i.e. language) a particular homonym term belongs to. Sample Termbase oTb = oTbs[\"Termbase name\"]; Homonyms oHomonyms = oTb.GetHomonyms(\"English\", \"\",\"\"); //select first homonym term Homonym oHomonym = oHomonyms[0]; Debug.Write(\"Homonym index: \" + oHomonym.Index);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Homonym.Term.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Homonym.Term.html",
    "title": "Term property",
    "keywords": "Term property Name Sdl.MultiTerm.TMO.Interop.Homonym.Term — Returns the homonym term. Type String (read) Index Parameters none Description This property allows you to output the actual homonym term(s) that was/were found in a particular termbase index. This is useful, e.g. for generating a list of homonym terms. Sample Termbase oTb = oTbs[\"Termbase name\"]; Homonyms oHomonyms = oTb.GetHomonyms(\"English\", \"\",\"\"); //select first homonym term Homonym oHomonym = oHomonyms[0]; Debug.Write(\"Homonym term: \" + oHomonym.Term);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Homonyms.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Homonyms.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.Homonyms.Count — Returns the number of homonyms for a particular termbase index. Type Long (read) Index Parameters none Description Via this property you can ascertain how many homonyms a specific termbase index contains. Sample Termbase oTb = oTbs[\"Termbase name\"]; Homonyms oHomonyms = oTb.GetHomonyms(\"English\", \"\",\"\"); Debug.Write(\"Homonym count: \" + oHomonyms.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Homonyms.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Homonyms.html",
    "title": "Sdl.MultiTerm.TMO.Interop.Homonyms class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.Homonyms class Name Sdl.MultiTerm.TMO.Interop.Homonyms — Provides programmatic access to the homonym entries of a particular termbase. Description Homonyms are duplicate terms. Those can be actual duplicates, i.e. redundant terms, but it can also be the same term expressing different concepts, e.g. \"book\" (book for reading) and \"book\" (to book a flight). Via this class you can access all homonyms (if any) contained in a termbase. As parameter you need to provide the index that should be searched for homonyms. Properties Count : Returns the number of homonyms for a particular termbase index. Item : Provides access to a particular homonym. Methods None Sample Termbase oTb = oTbs[\"Termbase name\"]; Homonyms oHomonyms = oTb.GetHomonyms(\"English\", \"\",\"\"); Debug.Write(\"Homonym count: \" + oHomonyms.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Homonyms.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Homonyms.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.Homonyms.Item — Provides access to a particular homonym. Type Sdl.MultiTerm.TMO.Interop.Homonym (read) Index Parameters Index (Variant) Description Via this property you can select a specific homonym, to retrieve the actual term, the corresponding entry id, and the index the homonym is in. The Index parameter is usually a number, for the 0-based position in the list, but can also be a string representing a term Sample Termbase oTb = oTbs[\"Termbase name\"]; Homonyms oHomonyms = oTb.GetHomonyms(\"English\", \"\",\"\"); //select first homonym term Homonym oHomonym = oHomonyms[0]; Debug.Write(\"Homonym term: \" + oHomonym.Term); Debug.Write(\"Homonym entry id: \" + oHomonym.EntryID.ToString()); //select second homonym term oHomonym = oHomonyms[1]; Debug.Write(\"Homonym term: \" + oHomonym.Term); Debug.Write(\"Homonym entry id: \" + oHomonym.EntryID.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.html",
    "title": "MultiTerm library",
    "keywords": "MultiTerm library Name Sdl.MultiTerm.TMO.Interop — Namespace for programmatic access to MultiTerm Client functionality for C#. MultiTermIX — Namespace for programmatic access to MultiTerm Client functionality through COM (e.g. VBA). Description Classes Application Provides programmatic access to the MultiTerm client functionality. DescriptiveField Provides programmatic access to a particular descriptive field specified in a termbase definition. DescriptiveFields Provides programmatic access to the descriptive fields of a termbase definition. Entries Provides programmatic access to the entries in a termbase. Entry Provides programmatic access to a particular entry. EntryClassesPermissions Provides programmatic access to the entry classes the currently logged-in user has access to. EntryClassPermissions Provides access to a particular entry class. EntryContent Provides programmatic access to the content of an entry. EntryField Provides programmatic access to a particular entry-level descriptive field. EntryFields Provides programmatic access to the entry-level fields of a particular entry. EntryIDs Provides programmatic access to the collection of entry numbers of a particular termbase. EntryIndex Provides programmatic access to a particular index. EntryIndexes Provides programmatic access to the indexes contained in a particular entry. ExportDefinition Provides programmatic access to a particular export definition. ExportDefinitions Provides programmatic access to the export definitions of a termbase. FilterDefinition Provides programmatic access to a particular filter definition. FilterDefinitions Provides programmatic access to the filter definitions of a termbase. HitTerm Provides programmatic access to a particular hit term. HitTerms Provides programmatic access to the results of a search or browse operation. Homonym Provides programmatic access to a particular homonym in the termbase. Homonyms Provides programmatic access to the homonym entries of a particular termbase. ImportDefinition Provides programmatic access to a particular import definition. ImportDefinitions Provides programmatic access to the import definitions of a termbase. IncompleteEntries Provides access to all incomplete entries of a termbase. Index Provides programmatic access to a particular index of a termbase definition. Indexes Provides programmatic access to a particular index in the termbase definition. IndexesPermissions Provides programmatic access to the index permissions of the currently logged-in user. IndexPermissions Provides programmatic access to the permissions of a particular index. InputModelDefinition Provides access to a particular input model definition. InputModelDefinitions Provides programmatic access to the input model definitions of a termbase. LayoutDefinition Provides programmatic access to a particular layout definition. LayoutDefinitions Provides programmatic access to the layout definitions of a termbase. LockedEntries Provides programmatic access to all locked termbase entries. MtBrowseDirection Contains the possible direction values for browse operations. MtDatabaseType Contains the available database types. MtFieldLevel The levels of the entry structure a descriptive field applies to. MtFieldType Contains the possible descriptive field type values. MtIndexGuessing Contains the possible settings for guessing the search index. MtLockingState Contains the possible values for locking operations. MtSearchDirection Contains the direction options used for termbase searches. MtSearchType This enumerator contains the search types you can apply to a multiple termbase search. MtTaskType Contains the possible batch processing task type values. MtUserType The user privilege types used for termbase access. MultiSearch Provides programmatic access to multiple termbase search. PicklistValues Provides programmatic access to the picklist values of a picklist type descriptive field. SearchInfo Stores information on the search carried for particular termbases. SearchInfos Provides programmatic access to relevant information after having carried out a search. TermbaseAccessPermissions Provides programmatic access to the termbase access permissions of the currently logged-in user. TermbaseBrowser Provides access to the browse functionality for a termbase. Termbase Provides programmatic access to a particular termbase. TermbaseDefinition Provides programmatic access to the termbase definition. TermbaseInformation Provides programmatic access to a set of termbase information. TermbaseRepository Provides access to the termbase repositories. Termbases Provides programmatic access to a termbase collection. TermbaseSearch Provides programmatic access to the MultiTerm search functionality."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.Content.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.Content.html",
    "title": "Content property",
    "keywords": "Content property Name Sdl.MultiTerm.TMO.Interop.ImportDefinition.Content — Returns the content of a particular import definition. Type String (read) Index Parameters none Description Via this property you can retrieve the 'source code' of an import definition. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select import definition ImportDefinitions oImpDefs = oTb.ImportDefinitions; ImportDefinition oImpDef = oImpDefs[\"Default import definition\"]; Debug.Write(oImpDef.Content);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.Delete.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.Delete.html",
    "title": "Delete method",
    "keywords": "Delete method Name Sdl.MultiTerm.TMO.Interop.ImportDefinition.Delete — Removes the import definition from the collection. Returntype void Parameters none Description Applying this method removes the import definition physically from the collection of import definitions. This can only be done, if the currently logged-in user is allowed to delete the import definition in question. If the user does not have the right to delete the import definition, a corresponding error message will be thrown. Users usually can only delete import definitions created by themselves. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an import definition ImportDefinitions oImpDefs = oTb.ImportDefinitions; ImportDefinition oImpDef = oImpDefs[\"Default import definition\"]; oImpDef.Delete();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.Description.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.Description.html",
    "title": "",
    "keywords": "Description property Name Sdl.MultiTerm.TMO.Interop.ImportDefinition.Description — Returns the import definition description. Type String (read) Index Parameters none Description Each import definition can have an optional description to provide further information on it. Via this property you can output the import definition description string. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select import definition ImportDefinitions oImpDefs = oTb.ImportDefinitions; ImportDefinition oImpDef = oImpDefs[\"Default import definition\"]; Debug.Write(oImpDef.Description); Provide Feedback Make annotation"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.html",
    "title": "Sdl.MultiTerm.TMO.Interop.ImportDefinition class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.ImportDefinition class Name Sdl.MultiTerm.TMO.Interop.ImportDefinition — Provides programmatic access to a particular import definition. Description Import definitions are used to import the content from MultiTerm XML files into a termbase. Via this class you can retrieve information on a particular import definition, e.g. the description string or programmatically trigger the import process. Properties Content : Returns the content of a particular import definition in an XML format. Description : Returns the import definition description. Name : Returns the name of the import definition. Owner : Returns the owner name for a particular import definition. ReadOnly : Returns whether a particular import definition is read-only. Methods Delete : Removes the import definition from the collection. Load : Updates the selected import definition from an external import definition file. ProcessImport : Carries out the actual import process. Save : Saves the import definition to an external file. StartWizard : Calls up the import wizard for editing a particular import definition. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select import definition ImportDefinitions oImpDefs = oTb.ImportDefinitions; ImportDefinition oImpDef = oImpDefs[\"Default import definition\"]; Debug.Write(oImpDef.Description);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.Load.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.Load.html",
    "title": "Load method",
    "keywords": "Load method Name Sdl.MultiTerm.TMO.Interop.ImportDefinition.Load — Updates the selected import definition from an external import definition file. Returntype void Parameters FileName (String) Description By applying this method to an import definition you can update the import definition from the content of an import definition (*.xdi) file. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an import definition ImportDefinitions oImpDefs = oTb.ImportDefinitions; ImportDefinition oExpDef = oImpDefs[\"Default import definition\"]; oImpDef.Load(\"c:\\\\temp\\\\imp_def.xdi\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.Name.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.Name.html",
    "title": "Name property",
    "keywords": "Name property Name Sdl.MultiTerm.TMO.Interop.ImportDefinition.Name — Returns the name of the import definition. Type String (read) Index Parameters none Description Each import definition has a unique descriptive name. For example, this is the name that is listed in the import definition list of the Termbase Catalogue in MultiTerm Workstation. All import definitions can be referenced via this unique name. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select import definition ImportDefinitions oExpDefs = oTb.ImportDefinitions; ImportDefinition oExpDef; //return list of import definition names for(int i=0;i<oImpDefs.Count;i++) { oImpDef = oImpDefs[i]; Debug.WriteLine(oImpDef.Name); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.Owner.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.Owner.html",
    "title": "Owner property",
    "keywords": "Owner property Name Sdl.MultiTerm.TMO.Interop.ImportDefinition.Owner — Returns the owner name for a particular import definition. Type String (read) Index Parameters none Description Sample Sdl.MultiTerm.TMO.Interop.ImportDefinitions oImportDefs = myTermbase.ImportDefinitions; //return owner of first Import definition Debug.WriteLine(oImportDefs[0].Owner);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.ProcessImport.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.ProcessImport.html",
    "title": "ProcessImport method",
    "keywords": "ProcessImport method Name Sdl.MultiTerm.TMO.Interop.ImportDefinition.ProcessImport — Carries out the actual import process. Returntype void Parameters Value ( Sdl.MultiTerm.TMO.Interop.MtTaskType ) SourceIndex (String, optional, default is \"\" ) TargetIndex (String, optional, default is \"\" ) Description Applying this method to an import definition runs the import. It requires the task type as parameter, i.e. whether the import should be run in script mode (i.e. without the wizard) or using the import wizard. In addition you can provide the optional source/target index parameters. Note that import definitions can use the source/target index as logical fields. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an import definition ImportDefinitions oImpDefs = oTb.ImportDefinitions; ImportDefinition oExpDef = oImpDefs[\"Default import definition\"]; oImpDef.ProcessImport(Sdl.MultiTerm.TMO.Interop.MtTaskType.mtScript, \"English\", \"German\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.ReadOnly.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.ReadOnly.html",
    "title": "ReadOnly property",
    "keywords": "ReadOnly property Name Sdl.MultiTerm.TMO.Interop.ImportDefinition.ReadOnly — Returns whether a particular import definition is read-only. Type Boolean (read) Index Parameters none Description Import definitions may be read-only, e.g. when the termbase administrator provides a central import definition, which is not supposed to be altered by the end users. Via this property you can ascertain whether a particular import definition is read-only for the currently logged-in user. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an import definition ImportDefinitions oImpDefs = oTb.ImportDefinitions; ImportDefinition oImpDef = oImpDefs[\"Default import definition\"]; Debug.WriteLine(\"Is this import definition read-only for me? \" + oImpDef.ReadOnly);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.Save.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.Save.html",
    "title": "Save method",
    "keywords": "Save method Name Sdl.MultiTerm.TMO.Interop.ImportDefinition.Save — Saves the import definition to an external file. Returntype void Parameters FileName (String) Description Applying this method to a particular import definition saves the content of the import definition to an external file. Note that you need to provide the file path and name as well as the extension (*.xdi) as parameter. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an import definition ImportDefinitions oImpDefs = oTb.ImportDefinitions; ImportDefinition oImpDef = oImpDefs[\"Default import definition\"]; oImpDef.Save(\"c:\\\\temp\\\\import.xdi\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.StartWizard.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinition.StartWizard.html",
    "title": "StartWizard method",
    "keywords": "StartWizard method Name Sdl.MultiTerm.TMO.Interop.ImportDefinition.StartWizard — Calls up the import wizard for editing a particular import definition. Returntype void Parameters XMLFileName (String, optional ) SourceIndex (String, optional, default is \"\" ) TargetIndex (String, optional, default is \"\" ) Description Applying this method to an import definition, opens the import wizard, which allows for GUI-based editing of the import definition. This method takes the name and path of an external import definition (*.xdf) file as parameter. This means that you can provide an external import definition file to 'pre-fill' the wizard with information. In addition you can provide the source/target language string parameters, as import definitions may use the source/target index as logical fields. Note that the currently-logged in user needs to have permissions to edit the import definition in question, otherwise an error will be thrown. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select an import definition ImportDefinitions oImpDefs = oTb.ImportDefinitions; ImportDefinition oImpDef = oImpDefs[\"Default import definition\"]; oImpDef.StartWizard(\"c:\\\\temp\\\\import.xdi\", \"English\", \"German\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinitions.Add.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinitions.Add.html",
    "title": "Add method",
    "keywords": "Add method Name Sdl.MultiTerm.TMO.Interop.ImportDefinitions.Add — Adds a new import definition to the collection. Returntype Sdl.MultiTerm.TMO.Interop.ImportDefinition Parameters Name (String) Description (String) FileName (String) Description Applying this method to an export definition collection adds a new import definition from an import definition that was saved as an external *.xdi file. This method requires the name of the new import definition, an optional description and the full path and name of the import definition file. Sample Termbase oTb = oTbs[\"Termbase name\"]; ImportDefinitions oImpDefs = oTb.Import definition description\", \"c:\\\\temp\\\\imp_def.xdi\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinitions.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinitions.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.ImportDefinitions.Count — Returns the number of available import definitions. Type Long (read) Index Parameters none Description Via this property you can ascertain how many import definitions are associated with a particular termbase. Sample Termbase oTb = oTbs[\"Termbase name\"]; ExportDefinitions oImpDefs = oTb.ImportDefinitions; Debug.Write(\"Number of import definitions: +\" + oImpDefs.Count);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinitions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinitions.html",
    "title": "",
    "keywords": "Sdl.MultiTerm.TMO.Interop.ImportDefinitions class Name Sdl.MultiTerm.TMO.Interop.ImportDefinitions — Provides programmatic access to the import definitions of a termbase. Description Via this class you can access the import definitions associated with a particular termbase. You can use it to, for example, generate a list of available import definitions. Properties Count : Returns the number of available import definitions. Item : Provides access to a particular import definition. Methods Add : Adds a new import definition to the collection. Refresh : Updates the import definition collection. StartWizard : Starts the Import Definition wizard. Sample Termbase oTb = oTbs[\"Termbase name\"]; ExportDefinitions oImpDefs = oTb.ImportDefinitions; Debug.Write(\"Number of import definitions: +\" + oImpDefs.Count); for(int i=0;i<oImpDefs.Count;i++) { Debug.WritoImpDefsfs[i].Name); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinitions.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinitions.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.ImportDefinitions.Item — Provides access to a particular import definition. Type Sdl.MultiTerm.TMO.Interop.ImportDefinition (read) Index Parameters Index (Variant) Description To select a specific import definition you can either use the corresponding index number, e.g. Item(0), or the definition name, e.g. Item(\"Default import definition\"). Sample Termbase oTb = oTbs[\"Termbase name\"]; ImportDefinitions oImpDefs = oTb.ImportDefinitions; ImportDefinition oImpDef = oImpDefs[0];"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinitions.Refresh.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinitions.Refresh.html",
    "title": "Refresh method",
    "keywords": "Refresh method Name Sdl.MultiTerm.TMO.Interop.ImportDefinitions.Refresh — Updates the import definition collection. Returntype void Parameters none Description By applying this method you can make sure that MultiTerm client users always have access to the up-to-date import definition collection, which includes all definitions that have been added while the users were online. Sample Termbase oTb = oTbs[\"Termbase name\"]; ImportDefinitions oImpDefs = oTb.ImportDefinitions; oImpDefs.Refresh();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinitions.StartWizard.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.ImportDefinitions.StartWizard.html",
    "title": "StartWizard method",
    "keywords": "StartWizard method Name Sdl.MultiTerm.TMO.Interop.ImportDefinitions.StartWizard — Starts the Import Definition wizard. Returntype Sdl.MultiTerm.TMO.Interop.ImportDefinition Parameters none Description Applying this method opens the Import Definition wizard, which allows you to create a new import definition with the wizard GUI. Sample Termbase oTb = oTbs[\"Termbase name\"]; ImportDefinitions oExpDefs = oTb.ImportDefinitions; oImpDefs.StartWizard();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IncompleteEntries.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IncompleteEntries.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.IncompleteEntries.Count — Returns the number of incomplete entries contained in a termbase. Type Long (read) Index Parameters none Description Via this property you can ascertain the number of incomplete entries in your termbase. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //get incomplete entries IncompleteEntries oIncompletes = oTb.IncompleteEntries; Debug.WriteLine(\"Number of incomplete entries: \" + oIncompletes.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IncompleteEntries.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IncompleteEntries.html",
    "title": "Sdl.MultiTerm.TMO.Interop.IncompleteEntries class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.IncompleteEntries class Name Sdl.MultiTerm.TMO.Interop.IncompleteEntries — Provides access to all incomplete entries of a termbase. Description Incomplete entries are entries that lack one or more fields that are mandatory according to the termbase definition. For example, if the termbase definition imposes that the field \"Subject\" is mandatory and an entry does not have a \"Subject\" field, it is considered incomplete. In this case the corresponding XML data stored in the mtConcepts table of the database backend will be marked as incomplete, i.e. it will have the value '1' in the 'incomplete' column. When adding a new entry programmatically via the New method, you can flag it as incomplete by setting the incomplete parameter to true. This is, for example, the case for all entries that are added via the Quick Entry function from Word. Note that your client needs to implement the logic that decides whether an entry is incomplete or not. This is not done on the server side. You can use the IncompleteEntries class, for example, to compile a list of all termbase entries that are flagged as incomplete, which can be useful for maintenance purposes. Thus you can implement a feature similar to the Incomplete Search in MultiTerm Workstation. Properties Count : Returns the number of incomplete entries contained in a termbase. Item : Refers to a particular incomplete entry. Methods None Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //get incomplete entries IncompleteEntries oIncompletes = oTb.IncompleteEntries; Debug.WriteLine(\"Number of incomplete entries: \" + oIncompletes.Count.ToString()); for(int i=1;i==oIncompletes.Count;i++) { Debug.WriteLine(oIncompletes[i]); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IncompleteEntries.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IncompleteEntries.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.IncompleteEntries.Item — Refers to a particular incomplete entry. Type String (read) Index Parameters Index (Long) Description You can use this property, for example, to generate a list of all incomplete entries. Note that this property returns the unique id of the incomplete entry. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //get incomplete entries IncompleteEntries oIncompletes = oTb.IncompleteEntries; Debug.WriteLine(\"Number of incomplete entries: \" + oIncompletes.Count.ToString()); for(int i=1;i==oIncompletes.Count;i++) { Debug.WriteLine(oIncompletes[i]); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Index.Fields.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Index.Fields.html",
    "title": "Fields property",
    "keywords": "Fields property Name Sdl.MultiTerm.TMO.Interop.Index.Fields — Provides programmatic access to the entry-level descriptive fields. Type Sdl.MultiTerm.TMO.Interop.DescriptiveFields (read) Index Parameters none Description An index can have descriptive fields assigned to it, i.e. fields that refer to all terms belonging to a particular index, e.g. \"Definition.\" Via this property you can, for example, ascertain the number of such fields. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseDefinition oDef = oTb.Definition; Indexes oIndexes = oDef.Indexes; //select first index Index oIndex = oIndexes[0]; DescriptiveFields oFields = oIndex.Fields; Debug.WriteLine(\"Number of index-level descriptive fields: \" + oFields.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Index.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Index.html",
    "title": "Sdl.MultiTerm.TMO.Interop.Index class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.Index class Name Sdl.MultiTerm.TMO.Interop.Index — Provides programmatic access to a particular index of a termbase definition. Description This class allows you to retrieve, for example, the corresponding index label, the locale, etc. Properties Fields : Provides programmatic access to the entry-level descriptive fields. Label : Returns the label of a particular index. Language : Returns the name of the index language. Locale : Returns the locale of the index. TargetOnly : Flags whether the current index can be used only as target index. TermFields : Provides programmatic access to the term-level descriptive fields. Methods None Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseDefinition oDef = oTb.Definition; Indexes oIndexes = oDef.Indexes; //select first index Index oIndex = oIndexes[0]; Debug.WriteLine(oIndex.Label);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Index.Label.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Index.Label.html",
    "title": "Label property",
    "keywords": "Label property Name Sdl.MultiTerm.TMO.Interop.Index.Label — Returns the label of a particular index. Type String (read) Index Parameters none Description The label is the name of the index which is used to uniquely identify an index, i.e. a language, e.g. \"English.\" Labels are fully user-definable. Sample Termbase oTb = oTbs[\"Termbase1\"]; TermbaseDefinition oDef = oTb.Definition; Indexes oIndexes = oDef.Indexes; //select first index Index oIndex = oIndexes[0]; Debug.WriteLine(oIndex.Label);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Index.Language.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Index.Language.html",
    "title": "Language property",
    "keywords": "Language property Name Sdl.MultiTerm.TMO.Interop.Index.Language — Returns the English name of the index language. Type String (read) Index Parameters none Description See Label Sample Termbase oTb = oTbs[\"Termbase1\"]; TermbaseDefinition oDef = oTb.Definition; Indexes oIndexes = oDef.Indexes; //select first index Index oIndex = oIndexes[0]; Debug.WriteLine(oIndex.Language);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Index.Locale.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Index.Locale.html",
    "title": "Locale property",
    "keywords": "Locale property Name Sdl.MultiTerm.TMO.Interop.Index.Locale — Returns the locale of the index. Type String (read) Index Parameters none Description Each index is associated with a standard locale, e.g. \"EN\" or \"EN-US\", etc. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseDefinition oDef = oTb.Definition; Indexes oIndexes = oDef.Indexes; //select first index Index oIndex = oIndexes[0]; Debug.WriteLine(oIndex.Locale);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Index.TargetOnly.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Index.TargetOnly.html",
    "title": "TargetOnly property",
    "keywords": "TargetOnly property Name Sdl.MultiTerm.TMO.Interop.Index.TargetOnly — Flags whether the current index can be used only as target index. Type Boolean (read) Index Parameters none Description This property returns true if a particular index can be used only as target index, and not as source and target index. You can use this property, for example, to exclude all target-only indexes from exclusion in a selection list. Sample Sdl.MultiTerm.TMO.Interop.Indexes oIndexes; oIndexes = myTermbase.Definition.Indexes; //generate a list of indexes that can be source AND target foreach(Sdl.MultiTerm.TMO.Interop.Index oIndex in oIndexes) { if(oIndex.TargetOnly==false) Debug.WriteLine(oIndex.Label); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Index.TermFields.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Index.TermFields.html",
    "title": "TermFields property",
    "keywords": "TermFields property Name Sdl.MultiTerm.TMO.Interop.Index.TermFields — Provides programmatic access to the term-level descriptive fields. Type Sdl.MultiTerm.TMO.Interop.DescriptiveFields (read) Index Parameters none Description The termbase definition can contain descriptive fields that refer to a particular term, e.g. \"Grammar.\" You can use this property to retrieve information on such fields, e.g. the number of available term-level fields. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseDefinition oDef = oTb.Definition; Indexes oIndexes = oDef.Indexes; //select first index Index oIndex = oIndexes[0]; DescriptiveFields oFields = oIndex.TermFields; Debug.WriteLine(\"Number of term-level descriptive fields: \" + oFields.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Indexes.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Indexes.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.Indexes.Count — Returns the number of indexes (i.e. languages) contained in a termbase definition. Type Long (read) Index Parameters none Description Sample Termbase oTb = oTbs[\"Termbase1\"]; TermbaseDefinition oDef = oTb.Definition; Debug.WriteLine(\"Number of indexes: \" + oDef.Indexes.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Indexes.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Indexes.html",
    "title": "Sdl.MultiTerm.TMO.Interop.Indexes class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.Indexes class Name Sdl.MultiTerm.TMO.Interop.Indexes — Provides programmatic access to a particular index in the termbase definition. Description This class provides programmatic access to a specific index (i.e. language) contained in a termbase definition. You can use this class, for example, to generate a list of all languages contained in the definition of a particular termbase. Note that this class gives access to all languages contained in the termbase definition, not only to the languages that a user can access. If you want to generate a list that contains only the languages the currently logged-in user has access to, you should rather use the IndexesPermissions class. Properties Count : Returns the number of indexes (i.e. languages) contained in a termbase definition. Item : Provides access to a specific termbase index. Methods None Sample TermbaseDefinition tbDef = oTb.Definition; Indexes oIndexes = tbDef.Indexes; Debug.Write(\"Number of languages: \" + oIndexes.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Indexes.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Indexes.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.Indexes.Item — Provides access to a specific termbase index. Type Sdl.MultiTerm.TMO.Interop.Index (read) Index Parameters Index (Variant) Description Via this class you can access a particular index (language). You can either provide the index number, e.g. , of the actual index label, e.g. Item(\"English\"), as parameter. Sample TermbaseDefinition tbDef = oTb.Definition; Indexes oIndexes = tbDef.Indexes; Debug.Write(oIndexes[\"German\"].Locale);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexesPermissions.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexesPermissions.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.IndexesPermissions.Count — Returns the number of indexes that the currently logged-in user can access. Type Long (read) Index Parameters none Description Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; IndexesPermissions oIndexes = oPermissions.IndexesPermissions; Debug.WriteLine(\"Number of accessible indexes: \" + oIndexes.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexesPermissions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexesPermissions.html",
    "title": "Sdl.MultiTerm.TMO.Interop.IndexesPermissions class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.IndexesPermissions class Name Sdl.MultiTerm.TMO.Interop.IndexesPermissions — Provides programmatic access to the index permissions of the currently logged-in user. Description Via this class you can retrieve information on the indexes (i.e. languages) the currently logged-in user has access to. You can use it, for example, to generate a list of indexes that the user can access. Note that this list is not necessarily identical to the list of indexes specified in the termbase definition, as certain users may not be allowed to see particular indexes in the first place. Properties Count : Returns the number of indexes that the currently logged-in user can access. Item : Refers to a particular index permission. ReadIndexes : Returns all indexes that the currently logged-in user has read-access too. WriteIndexes : Returns all indexes the currently logged-in user has write access to. Methods None Sample Termbase oTb = oTbs[\"Termbase name\"]; IndexesPermissions oIndexes = oTb.AccessPermissions.IndexesPermissions; Debug.WriteLine(\"Number of indexes user can access: \" + oIndexes.Count.ToString()); //list indexes for(int i=0;i<oIndexes.Count;i++) { Debug.WriteLine(oIndexes[i].Label); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexesPermissions.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexesPermissions.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.IndexesPermissions.Item — Refers to a particular index permission. Type Sdl.MultiTerm.TMO.Interop.IndexPermissions (read) Index Parameters Index (Variant) Description You can use this property, for example, to return the label of a particular index the currently logged-in user has access to and see whether the user has read-only or read/write access to it. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; IndexesPermissions oIndexes = oPermissions.IndexesPermissions; for(int i=0;i<oIndexes.Count;i++) { IndexPermissions oIndex = oIndexes[i]; Debug.WriteLine(oIndex.Label); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexesPermissions.ReadIndexes.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexesPermissions.ReadIndexes.html",
    "title": "ReadIndexes property",
    "keywords": "ReadIndexes property Name Sdl.MultiTerm.TMO.Interop.IndexesPermissions.ReadIndexes — Returns all indexes that the currently logged-in user has read-access too. Type String (read) Index Parameters none Description Via this property you can return all read-only indexes as an XML stream. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; IndexesPermissions oIndexes = oPermissions.IndexesPermissions; Debug.WriteLine(oIndexes.ReadIndexes); Sample output: <indexes> <index> <name locale = 'DE'>German</name> </index> <index> <name locale = 'EN'>English</name> </index> </indexes>"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexesPermissions.WriteIndexes.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexesPermissions.WriteIndexes.html",
    "title": "WriteIndexes property",
    "keywords": "WriteIndexes property Name Sdl.MultiTerm.TMO.Interop.IndexesPermissions.WriteIndexes — Returns all indexes the currently logged-in user has write access to. Type String (read) Index Parameters none Description Via this property you can return all indexes with write permission as an XML stream. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; IndexesPermissions oIndexes = oPermissions.IndexesPermissions; Debug.WriteLine(oIndexes.WriteIndexes); Sample output: <indexes> <index> <name locale = 'DE'>German</name> </index> <index> <name locale = 'EN'>English</name> </index> </indexes>"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexPermissions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexPermissions.html",
    "title": "Sdl.MultiTerm.TMO.Interop.IndexPermissions class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.IndexPermissions class Name Sdl.MultiTerm.TMO.Interop.IndexPermissions — Provides programmatic access to the permissions of a particular index. Description Via this class you can determine, for example, the label of a particular index that the currently logged-in user is allowed to access and see whether the user has read-only or read/write access to it. Properties Label : Returns the label of a particular index the currently logged-in user can access. Read : Returns true if the user has read access to this index (will always be the case). Write : Returns true if the currently logged-in user has write access to a particular index, otherwise false. Methods None Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; IndexesPermissions oIndexes = oPermissions.IndexesPermissions; for(int i=0;i<oIndexes.Count;i++) { IndexPermissions oIndex = oIndexes[i]; Debug.WriteLine(oIndex.Label); Debug.WriteLine(\"Read access: \" + oIndex.Read); Debug.WriteLine(\"Write access: \" + oIndex.Write); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexPermissions.Label.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexPermissions.Label.html",
    "title": "Label property",
    "keywords": "Label property Name Sdl.MultiTerm.TMO.Interop.IndexPermissions.Label — Returns the label of a particular index the currently logged-in user can access. Type String (read) Index Parameters none Description Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; IndexesPermissions oIndexes = oPermissions.IndexesPermissions; for(int i=0;i<oIndexes.Count;i++) { IndexPermissions oIndex = oIndexes[i]; Debug.WriteLine(oIndex.Label); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexPermissions.Read.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexPermissions.Read.html",
    "title": "Read property",
    "keywords": "Read property Name Sdl.MultiTerm.TMO.Interop.IndexPermissions.Read — Returns true if the user has read access to this index (will always be the case). Type Boolean (read) Index Parameters none Description Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; IndexesPermissions oIndexes = oPermissions.IndexesPermissions; for(int i=0;i<oIndexes.Count;i++) { IndexPermissions oIndex = oIndexes[i]; Debug.WriteLine(\"Read access: \" + oIndex.Read); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexPermissions.Write.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.IndexPermissions.Write.html",
    "title": "Write property",
    "keywords": "Write property Name Sdl.MultiTerm.TMO.Interop.IndexPermissions.Write — Returns true if the currently logged-in user has write access to a particular index, otherwise false. Type Boolean (read) Index Parameters none Description Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; IndexesPermissions oIndexes = oPermissions.IndexesPermissions; for(int i=0;i<oIndexes.Count;i++) { IndexPermissions oIndex = oIndexes[i]; Debug.WriteLine(\"Write access: \" + oIndex.Write); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition._GetSchema.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition._GetSchema.html",
    "title": "_GetSchema method",
    "keywords": "_GetSchema method Name Sdl.MultiTerm.TMO.Interop.InputModelDefinition._GetSchema — Returns the full schema for a particular input model. Returntype String Parameters none Description An input model is technically speaking a schema, which defines the fields (elements) and the hierarchy in which they can occur in an entry. Applying this method returns the full schema for a particular input model."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Content.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Content.html",
    "title": "Content property",
    "keywords": "Content property Name Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Content — Returns the content of a particular input model definition. Type String (read) Index Parameters none Description Via this property you can retrieve the 'source code' of an input model definition. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select input model InputModelDefinitions oInputModels = oTb.InputModelDefinitions; InputModelDefinition oInputModel = oInputModels[\"Default input model\"]; Debug.WriteLine(oInputModel.Content);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Delete.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Delete.html",
    "title": "Delete method",
    "keywords": "Delete method Name Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Delete — Removes the input model definition from the collection. Returntype void Parameters none Description Applying this method removes the input model physically from the collection of input model definitions. This can only be done, if the currently logged-in user is allowed to delete the input model in question. If the user does not have the right to delete the input model, a corresponding error message will be thrown. Users usually can only delete input models created by themselves. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select input model InputModelDefinitions oInputModels = oTb.InputModelDefinitions; InputModelDefinition oInputModel = oInputModels[\"My own input model\"]; oInputModel.Delete();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Description.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Description.html",
    "title": "Description property",
    "keywords": "Description property Name Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Description — Returns the input model definition description. Type String (read) Index Parameters none Description Each input model definition can have an optional description to provide further information on it. Via this property you can output the input model definition description string. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select input model InputModelDefinitions oInputModels = oTb.InputModelDefinitions; InputModelDefinition oInputModel = oInputModels[\"Default input model\"]; Debug.WriteLine(oInputModel.Description);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.GetDummyEntry.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.GetDummyEntry.html",
    "title": "GetDummyEntry method",
    "keywords": "GetDummyEntry method Name Sdl.MultiTerm.TMO.Interop.InputModelDefinition.GetDummyEntry — [For internal use only.] Returntype String Parameters none"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.html",
    "title": "Sdl.MultiTerm.TMO.Interop.InputModelDefinition class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.InputModelDefinition class Name Sdl.MultiTerm.TMO.Interop.InputModelDefinition — Provides access to a particular input model definition. Description Input models are customizable input masks that facilitate the process of adding or editing entries via, e.g. MultiTerm Workstation or MultiTerm Online. Using this class you can retrieve information on a particular input model, e.g. the input model description string. In addition you can use this class to load an input model, save it to an external file, etc. Properties Content : Returns the content of a particular input model definition. Description : Returns the input model definition description. Name : Returns the name of the input model definition. Owner : Returns the owner name for a particular input model definition. ReadOnly : Returns whether a particular input model definition is read-only. Methods _GetSchema : Returns the full schema for a particular input model. Delete : Removes the input model definition from the collection. GetDummyEntry : [For internal use only.] Load : Updates the selected input model from an external input model definition file. Save : Saves the input model definition to an external file. StartWizard : Calls up the input model wizard for editing a particular input model. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select input model InputModelDefinitions oInputModels = oTb.InputModelDefinitions; InputModelDefinition oInputModel = oInputModels[\"Default input model\"]; Debug.WriteLine(oInputModel.Description);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Load.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Load.html",
    "title": "Load method",
    "keywords": "Load method Name Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Load — Updates the selected input model from an external input model definition file. Returntype void Parameters FileName (String) Description By applying this method to an input model you can update the input model definition from the content of an input model definition (*.xdm) file. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select input model InputModelDefinitions oInputModels = oTb.InputModelDefinitions; InputModelDefinition oInputModel = oInputModels[\"My own input model\"]; oInputModel.Load(\"c:\\\\temp\\\\input_model.xdm\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Name.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Name.html",
    "title": "Name property",
    "keywords": "Name property Name Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Name — Returns the name of the input model definition. Type String (read) Index Parameters none Description Each input model definition has a unique descriptive name. For example, this is the name that is listed in the input model list of MultiTerm Workstation. All input model definitions can be referenced via this unique name. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select input model InputModelDefinitions oInputModels = oTb.InputModelDefinitions; for(int i=0;i<oInputModels.Count;i++) { Debug.WriteLine(oInputModels[i].Name); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Owner.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Owner.html",
    "title": "Owner property",
    "keywords": "Owner property Name Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Owner — Returns the owner name for a particular input model definition. Type String (read) Index Parameters none Description Sample Sdl.MultiTerm.TMO.Interop.InputModelDefinitions oInputModels = myTermbase.InputModelDefinitions; //return owner of first Layout definition Debug.WriteLine(oInputModels[0].Owner);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.ReadOnly.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.ReadOnly.html",
    "title": "ReadOnly property",
    "keywords": "ReadOnly property Name Sdl.MultiTerm.TMO.Interop.InputModelDefinition.ReadOnly — Returns whether a particular input model definition is read-only. Type Boolean (read) Index Parameters none Description Input model definitions may be read-only, e.g. when the termbase administrator provides a central input model, which is not supposed to be altered by the end users. Via this property you can ascertain whether a particular input model is read-only for the currently logged-in user. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select input model InputModelDefinitions oInputModels = oTb.InputModelDefinitions; InputModelDefinition oInputModel = oInputModels[\"Default input model\"]; Debug.WriteLine(\"Is the input model read-only for me? \" + oInputModel.ReadOnly);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Save.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Save.html",
    "title": "Save method",
    "keywords": "Save method Name Sdl.MultiTerm.TMO.Interop.InputModelDefinition.Save — Saves the input model definition to an external file. Returntype void Parameters FileName (String) Description Applying this method to a particular input model saves the content of the input model definition to an external file. Note that you need to provide the file path and name as well as the extension (*.xdm) as parameter. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select input model InputModelDefinitions oInputModels = oTb.InputModelDefinitions; InputModelDefinition oInputModel = oInputModels[\"My own input model\"]; oInputModel.Save(\"c:\\\\temp\\\\input_model.xdm\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.StartWizard.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinition.StartWizard.html",
    "title": "StartWizard method",
    "keywords": "StartWizard method Name Sdl.MultiTerm.TMO.Interop.InputModelDefinition.StartWizard — Calls up the input model wizard for editing a particular input model. Returntype void Parameters XMLFileName (String, optional ) Description Applying this method to an input model, opens the input model wizard, which allows for GUI-based editing of the input model. This method takes the name and path of an external input model definition (*.xdm) file as parameter. This means that you can provide an external input model definition file to 'pre-fill' the wizard with some information. Note that the currently-logged in user needs to have permissions to edit the input model definition in question, otherwise an error will be thrown. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select input model InputModelDefinitions oInputModels = oTb.InputModelDefinitions; InputModelDefinition oInputModel = oInputModels[\"My own input model\"]; oInputModel.StartWizard(\"c:\\\\temp\\\\input_model.xdm\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.Add.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.Add.html",
    "title": "Add method",
    "keywords": "Add method Name Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.Add — Adds a new input model definition to the collection. Returntype Sdl.MultiTerm.TMO.Interop.InputModelDefinition Parameters Name (String) Description (String) FileName (String) Description Applying this method to an input model definition collection adds a new input model definition from an input model definition that was saved as an external *.xdm file. This method requires the name of the new input model definition, an optional description and the full path and name of the input model definition file. Sample Termbase oTb = oTbs[\"Termbase name\"]; InputModelDefinitions oModels = oTb.InputModelDefinitions; oModels.Add(\"Input model name\", \"Input model description\", \"c:\\\\temp\\\\def_model.xdm\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.Count — Returns the number of available input model definitions. Type Long (read) Index Parameters none Description Via this property you can ascertain how many input model definitions are associated with a particular termbase. Sample Termbase oTb = oTbs[\"Termbase name\"]; InputModelDefinitions oModels = oTb.InputModelDefinitions; Debug.Write(\"Number of input models: +\" + oModels.Count);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.html",
    "title": "Sdl.MultiTerm.TMO.Interop.InputModelDefinitions class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.InputModelDefinitions class Name Sdl.MultiTerm.TMO.Interop.InputModelDefinitions — Provides programmatic access to the input model definitions of a termbase. Description Via this class you can access the input model definitions associated with a particular termbase. You can use it to, for example, generate a list of available input models. Properties Count : Returns the number of available input model definitions. Item : Provides access to a particular input model definition. Methods Add : Adds a new input model definition to the collection. Refresh : Updates the input model definition collection. StartWizard : Starts the Input Model Definition wizard. Sample Termbase oTb = oTbs[\"Termbase name\"]; ExportDefinitions oModels = oTb.InputModelDefinitions; Debug.Write(\"Number of input models: +\" + oModels.Count); for(int i=0;i<oModels.Count;i++) { Debug.Write(oModels[i].Name); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.Item — Provides access to a particular input model definition. Type Sdl.MultiTerm.TMO.Interop.InputModelDefinition (read) Index Parameters Index (Variant) Description To select a specific input model definition you can either use the corresponding index number, e.g. Item(0), or the definition name, e.g. Item(\"Default input model\"). Sample Termbase oTb = oTbs[\"Termbase name\"]; InputModelDefinitions oModels = oTb.InputModelDefinitions; InputModelDefinition oModels = oModels[0];"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.Refresh.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.Refresh.html",
    "title": "Refresh method",
    "keywords": "Refresh method Name Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.Refresh — Updates the input model definition collection. Returntype void Parameters none Description By applying this method you can make sure that MultiTerm client users always have access to the up-to-date export definition collection, which includes all definitions that have been added while the users were online. Sample Termbase oTb = oTbs[\"Termbase name\"]; InputModelDefinitions oModels = oTb.InputModelDefinitions; oModels.Refresh();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.StartWizard.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.StartWizard.html",
    "title": "StartWizard method",
    "keywords": "StartWizard method Name Sdl.MultiTerm.TMO.Interop.InputModelDefinitions.StartWizard — Starts the Input Model Definition wizard. Returntype Sdl.MultiTerm.TMO.Interop.InputModelDefinition Parameters none Description Applying this method opens the Input Model Definition wizard, which allows you to create a new input model definition with the wizard GUI. Sample Termbase oTb = oTbs[\"Termbase name\"]; InputModelDefinitions oModels = oTb.InputModelDefinitions; oModels.StartWizard();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Content.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Content.html",
    "title": "Content property",
    "keywords": "Content property Name Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Content — Returns the layout definition content. Type String (read) Index Parameters none Description A layout contains an XSL stylesheet, which is used to render MultiTerm XML entry content as HTML. Via this property you can output the content, i.e. the 'source code' of the layout definition. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select layout LayoutDefinitions oLayouts = oTb.LayoutDefinitions; LayoutDefinition oLayout = oLayouts[\"Flags layout\"]; Debug.WriteLine(oLayout.Content);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Delete.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Delete.html",
    "title": "Delete method",
    "keywords": "Delete method Name Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Delete — Removes the layout from the collection. Returntype void Parameters none Description Applying this method removes the layout physically from the collection of layout definitions. This can only be done, if the currently logged-in user is allowed to delete the layout in question. If the user does not have the right to delete the layout, a corresponding error message will be thrown. Users usually can only delete layouts created by themselves. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select layout LayoutDefinitions oLayouts = oTb.LayoutDefinitions; LayoutDefinition oLayout=oLayouts[\"My own layout\"]; oLayout.Delete();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Description.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Description.html",
    "title": "Description property",
    "keywords": "Description property Name Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Description — Returns the layout description. Type String (read) Index Parameters none Description Each layout can have an optional description to provide further information on it. Via this property you can output the layout description string. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select layout LayoutDefinitions oLayouts = oTb.LayoutDefinitions; LayoutDefinition oLayout = oLayouts[\"Flags layout\"]; Debug.WriteLine(oLayout.Description);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.html",
    "title": "Sdl.MultiTerm.TMO.Interop.LayoutDefinition class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.LayoutDefinition class Name Sdl.MultiTerm.TMO.Interop.LayoutDefinition — Provides programmatic access to a particular layout definition. Description Layouts basically contain an XSL stylesheet, which renders MultiTerm entry XML as HTML. Via this class you can retrieve information on a particular layout, e.g. the layout description, the content (i.e. the layout 'source code'), etc. In addition you can also use this class to edit an existing layout using the layout wizard. Properties Content : Returns the layout definition content. Description : Returns the layout description. ID : Returns the unique id of the layout. Name : Returns the name of the layout. Owner : Returns the owner name for a particular layout definition. ReadOnly : Returns whether a particular layout is read-only. Methods Delete : Removes the layout from the collection. Load : Updates the selected layout from an external layout definition file. Save : Saves the layout definition to an external file. StartWizard : Calls up the layout definition wizard for editing a particular layout. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select layout LayoutDefinitions oLayouts = oTb.LayoutDefinitions; LayoutDefinition oLayout = oLayouts[\"Flags layout\"]; Debug.WriteLine(oLayout.Description);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.ID.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.ID.html",
    "title": "ID property",
    "keywords": "ID property Name Sdl.MultiTerm.TMO.Interop.LayoutDefinition.ID — Returns the unique id of the layout. Type Long (read) Index Parameters none Description Each layout is referenced in the database backend using a unique id, which the 'normal' user never gets to see. You can use this property to retrieve the corresponding id. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select layout LayoutDefinitions oLayouts = oTb.LayoutDefinitions; LayoutDefinition oLayout = oLayouts[\"Flags layout\"]; Debug.WriteLine(oLayout.ID);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Load.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Load.html",
    "title": "Load method",
    "keywords": "Load method Name Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Load — Updates the selected layout from an external layout definition file. Returntype void Parameters FileName (String) Description By applying this method to a layout you can update the layout from the content of an external layout definition (*.xdl) file. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select layout LayoutDefinitions oLayouts = oTb.LayoutDefinitions; LayoutDefinition oLayout=oLayouts[\"My own layout\"]; oLayout.Load(\"c:\\\\temp\\\\external_layout.xdl\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Name.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Name.html",
    "title": "Name property",
    "keywords": "Name property Name Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Name — Returns the name of the layout. Type String (read) Index Parameters none Description Each layout has a unique descriptive name. This is the name that end users usually get to see in a MultiTerm client application. For example, this is the name that is listed in the layout dropdown list of MultiTerm Workstation. Layouts can be referenced via this unique name. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select layout LayoutDefinitions oLayouts = oTb.LayoutDefinitions; LayoutDefinition oLayout; //return list of layout names for(int i=0;i<oLayouts.Count;i++) { oLayout = oLayouts[i]; Debug.WriteLine(oLayout.Name); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Owner.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Owner.html",
    "title": "Owner property",
    "keywords": "Owner property Name Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Owner — Returns the owner name for a particular layout definition. Type String (read) Index Parameters none Description Sample Sdl.MultiTerm.TMO.Interop.LayoutDefinitions oLayouts = myTermbase.LayoutDefinitions; //return owner of first Layout definition Debug.WriteLine(oLayouts[0].Owner);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.ReadOnly.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.ReadOnly.html",
    "title": "ReadOnly property",
    "keywords": "ReadOnly property Name Sdl.MultiTerm.TMO.Interop.LayoutDefinition.ReadOnly — Returns whether a particular layout is read-only. Type Boolean (read) Index Parameters none Description Layouts may be read-only, e.g. when the termbase administrator provides a central layout, which is not supposed to be altered by the end users. Via this property you can ascertain whether a particular layout is read-only for the currently logged-in user. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select layout LayoutDefinitions oLayouts = oTb.LayoutDefinitions; LayoutDefinition oLayout=oLayouts[\"Flags layout\"]; Debug.WriteLine(\"Is layout read-only? \" + oLayout.ReadOnly);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Save.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Save.html",
    "title": "Save method",
    "keywords": "Save method Name Sdl.MultiTerm.TMO.Interop.LayoutDefinition.Save — Saves the layout definition to an external file. Returntype void Parameters FileName (String) Description Applying this method to a particular layout definition saves the content of the layout definition to an external file. Note that you need to provide the file path and name as well as the extension (*.xdl) as parameter. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select layout LayoutDefinitions oLayouts = oTb.LayoutDefinitions; LayoutDefinition oLayout=oLayouts[\"Flags layout\"]; oLayout.Save(\"c:\\\\temp\\\\external_file\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.StartWizard.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinition.StartWizard.html",
    "title": "StartWizard method",
    "keywords": "StartWizard method Name Sdl.MultiTerm.TMO.Interop.LayoutDefinition.StartWizard — Calls up the layout definition wizard for editing a particular layout. Returntype void Parameters XMLFileName (String, optional ) Description Applying this method to a layout definition, opens the layout definition wizard, which allows for GUI-based editing of the layout. This method takes the name and path of an external layout definition (*.xdl) file as parameter. This means that you can provide an external layout definition file to 'pre-fill' the wizard with some information. Note that the currently-logged in user needs to have permissions to edit the layout in question, otherwise an error will be thrown. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //select layout LayoutDefinitions oLayouts = oTb.LayoutDefinitions; LayoutDefinition oLayout=oLayouts[\"My own layout\"]; oLayout.StartWizard(\"c:\\\\temp\\\\update_content.xdl\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.Add.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.Add.html",
    "title": "Add method",
    "keywords": "Add method Name Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.Add — Adds a new layout definition to the collection. Returntype Sdl.MultiTerm.TMO.Interop.LayoutDefinition Parameters Name (String) Description (String) FileName (String) Description Applying this method to an layout definition collection adds a new layout definition from a layout definition that was saved as an external *.xdl file. This method requires the name of the new layout definition, an optional description and the full path and name of the layout definition file. Sample Termbase oTb = oTbs[\"Termbase name\"]; LayoutDefinitions oLayouts = oTb.LayoutDefinitions; oLayouts.Add(\"Layout definition name\", \"Layout definition description\", \"c:\\\\temp\\\\layout_def.xdl\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.Count — Returns the number of available layout definitions. Type Long (read) Index Parameters none Description Via this property you can ascertain how many layout definitions are associated with a particular termbase. Sample Termbase oTb = oTbs[\"Termbase name\"]; LayoutDefinitions oLayouts = oTb.LayoutDefinitions; Debug.Write(\"Number of layout definitions: +\" + oLayouts.Count);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.html",
    "title": "Sdl.MultiTerm.TMO.Interop.LayoutDefinitions class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.LayoutDefinitions class Name Sdl.MultiTerm.TMO.Interop.LayoutDefinitions — Provides programmatic access to the layout definitions of a termbase. Description Via this class you can access the layout definitions associated with a particular termbase. You can use it to, for example, generate a list of available layouts. Properties Count : Returns the number of available layout definitions. Item : Provides access to a particular layout definition. Methods Add : Adds a new layout definition to the collection. Refresh : Updates the layout definition collection. StartWizard : Starts the Layout Definition wizard. Sample Termbase oTb = oTbs[\"Termbase name\"]; LayoutDefinitions oLayouts = oTb.LayoutDefinitions; Debug.Write(\"Number of layouts: +\" + oLayouts.Count); for(int i=0;i<oLayouts.Count;i++) { Debug.WritoLayouts[i].Name); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.Item — Provides access to a particular layout definition. Type Sdl.MultiTerm.TMO.Interop.LayoutDefinition (read) Index Parameters Index (Variant) Description To select a specific layout definition you can either use the corresponding index number, e.g. Item(0), or the definition name, e.g. Item(\"Flags Layout\"). Sample Termbase oTb = oTbs[\"Termbase name\"]; LayoutDefinitions oLayouts = oTb.LayoutDefinitions; LayoutDefinition oLayouts = oLayouts[0];"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.Refresh.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.Refresh.html",
    "title": "Refresh method",
    "keywords": "Refresh method Name Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.Refresh — Updates the layout definition collection. Returntype void Parameters none Description By applying this method you can make sure that MultiTerm client users always have access to the up-to-date layout definition collection, which includes all definitions that have been added while the users were online. Sample Termbase oTb = oTbs[\"Termbase name\"]; LayoutDefinitions oLayouts = oTb.LayoutDefinitions; oLayouts.Refresh();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.StartWizard.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.StartWizard.html",
    "title": "StartWizard method",
    "keywords": "StartWizard method Name Sdl.MultiTerm.TMO.Interop.LayoutDefinitions.StartWizard — Starts the Layout Definition wizard. Returntype Sdl.MultiTerm.TMO.Interop.LayoutDefinition Parameters none Description Applying this method opens the Layout Definition, which allows you to create a new layout definition with the wizard GUI. Sample Termbase oTb = oTbs[\"Termbase name\"]; LayoutDefinitions oLayouts = oTb.LayoutDefinitions; oLayouts.StartWizard();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LockedEntries.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LockedEntries.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.LockedEntries.Count — Returns the number of locked entries. Type Long (read) Index Parameters none Description You can use this property to ascertain how many entries (if any) are currently locked in the termbase. Sample Termbase oTb = oTbs[\"Termbase name\"]; LockedEntries oLocks = oTb.LockedEntries; Debug.Write(\"Number of locked entries: \" + oLocks.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LockedEntries.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LockedEntries.html",
    "title": "Sdl.MultiTerm.TMO.Interop.LockedEntries class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.LockedEntries class Name Sdl.MultiTerm.TMO.Interop.LockedEntries — Provides programmatic access to all locked termbase entries. Description Entry locking allows MultiTerm to ensure that only one user can edit an entry at any given point in time. While an entry is being edited it is locked and therefore read-only for all other users, regardless of their access privileges. As an administrative user you might want to know whether there are any locked entries in the first place, how long an entry has been locked and by whom. This class provides programmatic access to such information. Properties Count : Returns the number of locked entries. Item : Provides access to a particular locked entry. Methods None Sample Termbase oTb = oTbs[\"Termbase name\"]; LockedEntries oLocks = oTb.LockedEntries; Debug.Write(\"Number of locked entries: \" + oLocks.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LockedEntries.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.LockedEntries.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.LockedEntries.Item — Provides access to a particular locked entry. Type String (read) Index Parameters Index (Long) Description Via this property you can access a specific locked entry to retrieve further information such as the time the entry was locked and the name of the user by whom it was locked. Sample Termbase oTb = oTbs[\"Termbase name\"]; LockedEntries oLocks = oTb.LockedEntries; //select first locked entry LockedEntry oLock = oLocks[0];"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtBrowseDirection.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtBrowseDirection.html",
    "title": "Sdl.MultiTerm.TMO.Interop.MtBrowseDirection Enumeration",
    "keywords": "Sdl.MultiTerm.TMO.Interop.MtBrowseDirection Enumeration Name Sdl.MultiTerm.TMO.Interop.MtBrowseDirection — Contains the possible direction values for browse operations. Description Values mtBrowseDown mtBrowseUp"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtCommunicationType.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtCommunicationType.html",
    "title": "Sdl.MultiTerm.TMO.Interop.MtCommunicationType Enumeration",
    "keywords": "Sdl.MultiTerm.TMO.Interop.MtCommunicationType Enumeration Name Sdl.MultiTerm.TMO.Interop.MtCommunicationType — The protocol types that can be used to connect to a termbase server. Description Connections to a remote termbase server can be made through the DCOM protocol (LAN environments) or using the SOAP protocol (WAN scenarios). This enumerator contains the possible protocol type values used when providing the information required to connect to a termbase server. Values mtDCOM For connections via LAN. mtSOAP For connections via WAN."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtDatabaseType.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtDatabaseType.html",
    "title": "Sdl.MultiTerm.TMO.Interop.MtDatabaseType Enumeration",
    "keywords": "Sdl.MultiTerm.TMO.Interop.MtDatabaseType Enumeration Name Sdl.MultiTerm.TMO.Interop.MtDatabaseType — Contains the available database types. Description This enumerator contains the database backend types supported by MultiTerm, i.e.: Values mtJET Used for locally stored termbases, i.e. *.sdltb (or the older *.mdb) files. mtOracle Oracle backends. mtSQL Microsoft SQL Server backends."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtFieldLevel.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtFieldLevel.html",
    "title": "Sdl.MultiTerm.TMO.Interop.MtFieldLevel Enumeration",
    "keywords": "Sdl.MultiTerm.TMO.Interop.MtFieldLevel Enumeration Name Sdl.MultiTerm.TMO.Interop.MtFieldLevel — The levels of the entry structure a descriptive field applies to. Description Descriptive fields can be assigned to the entry-level (i.e. they describe or categorise the entire entry), to the index-level (i.e. they apply to all terms of a particular index), or to the term-level (i.e. they describe or categorise a specific term). This enumerator contains the possible field level values. Values mtEntryLevel Field applies to the whole entry, e.g. \"Subject.\" mtIndexLevel Field applies to all the terms listed under a particular index, e.g. \"Definition.\" mtTermLevel Field applies to a specific term, e.g. \"Context\", \"Usage example\", \"Gender\", etc."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtFieldType.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtFieldType.html",
    "title": "Sdl.MultiTerm.TMO.Interop.MtFieldType Enumeration",
    "keywords": "Sdl.MultiTerm.TMO.Interop.MtFieldType Enumeration Name Sdl.MultiTerm.TMO.Interop.MtFieldType — Contains the possible descriptive field type values. Description A descriptive field may be of the type text (i.e. the user is free to enter any kind of text information), picklist, number, date/time, multimedia file, or boolean. Values mtBoolean Field that allow only a yes or no value. mtDateTime Fields that allow only a date/time value. mtMultiMediaFile Fields that allow for multimedia content, e.g. JPG, MPEG, MP3, etc. mtNumber Fields that allow only a numeric value mtPickList Fields that allow for a selection from a pre-defined value list. mtString free text information"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtIndexGuessing.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtIndexGuessing.html",
    "title": "Sdl.MultiTerm.TMO.Interop.MtIndexGuessing Enumeration",
    "keywords": "Sdl.MultiTerm.TMO.Interop.MtIndexGuessing Enumeration Name Sdl.MultiTerm.TMO.Interop.MtIndexGuessing — Contains the possible settings for guessing the search index. Description Values mtGuessIndex Search (and target) index should be guessed based on the index selected for the first termbase. E.g. if the first termbase has \"English (UK)\" selected, and the second one doesn't have this exact index, also consider \"English\" or \"English US\". mtUseName No index guessing. The actual index name should be used."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtLockingState.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtLockingState.html",
    "title": "Sdl.MultiTerm.TMO.Interop.MtLockingState Enumeration",
    "keywords": "Sdl.MultiTerm.TMO.Interop.MtLockingState Enumeration Name Sdl.MultiTerm.TMO.Interop.MtLockingState — Contains the possible values for locking operations. Description Using the LockEntry you can lock or unlock entries, depending on which value you provide as parameter. Values mtLock Used for locking a particular entry, so that while the entry is being edited no other users can get write access to it. mtUnlock Releases the entry lock. Note that the entry lock is released automatically after applying the Update method, i.e. normally you won't have to release the lock explicitly."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtSearchDirection.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtSearchDirection.html",
    "title": "Sdl.MultiTerm.TMO.Interop.MtSearchDirection Enumeration",
    "keywords": "Sdl.MultiTerm.TMO.Interop.MtSearchDirection Enumeration Name Sdl.MultiTerm.TMO.Interop.MtSearchDirection — Contains the direction options used for termbase searches. Description When searching one or several termbases you can set the search direction to up or down. This enumerator contains the possible values for setting the search direction. Values mtSearchDown mtSearchUp"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtSearchType.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtSearchType.html",
    "title": "Sdl.MultiTerm.TMO.Interop.MtSearchType Enumeration",
    "keywords": "Sdl.MultiTerm.TMO.Interop.MtSearchType Enumeration Name Sdl.MultiTerm.TMO.Interop.MtSearchType — This enumerator contains the search types you can apply to a multiple termbase search. Description When cascading a search over more than one termbase, you can set choose among three options: Values mtHierarchial You can either configure the search to stop as soon as hits have been found in a termbase. E.g. when the search has yielded a result in the first termbase, the other termbases are not searched. As only one termbase is searched in this case, the search will be carried out faster. This is the default option. mtParallel Choose this option to 'enforce' a lookup in all termbases, but have the results listed in alphabetical order regardless of the termbase name they come from. mtSequential Select this option to 'enforce' a lookup in all termbases and have the results listed per termbase."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtTaskType.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtTaskType.html",
    "title": "Sdl.MultiTerm.TMO.Interop.MtTaskType Enumeration",
    "keywords": "Sdl.MultiTerm.TMO.Interop.MtTaskType Enumeration Name Sdl.MultiTerm.TMO.Interop.MtTaskType — Contains the possible batch processing task type values. Description Via the API you can perform batch processes such as termbase exports/imports either in a GUI-less fashion (i.e. without the import/export) wizard or using the corresponding wizard application. Whether a batch task is processed with our without the wizard being called up is determined by the task type parameter. Values mtScript Processing without wizard (i.e. GUI-less). mtWizard Wizard-based processing."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtUserType.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MtUserType.html",
    "title": "Sdl.MultiTerm.TMO.Interop.MtUserType Enumeration",
    "keywords": "Sdl.MultiTerm.TMO.Interop.MtUserType Enumeration Name Sdl.MultiTerm.TMO.Interop.MtUserType — The user privilege types used for termbase access. Description Basically, there are two different types of users: 'normal' users, i.e. those who access termbases via MultiTerm client applications such as the MultiTerm iX LAN client, MultiTerm Online or the MultiTerm Word interface. Then, there are the 'super' users (or administrative users). These users are allowed to create and administer server termbases, create user roles, etc. dedicated client applications such as MultiTerm Administrator. This enumerator contains the available user privilege type values. Values mtNormalUser Normal users with read and/or write access to termbases via clients such as the MultiTerm Workstation client or MultiTerm Online mtNotAuthorized Users without any access privileges. mtSuper Administrative user, who can create termbases, define user roles, etc. via MultiTerm Administrator."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.AddSearchTermbase.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.AddSearchTermbase.html",
    "title": "AddSearchTermbase method",
    "keywords": "AddSearchTermbase method Name Sdl.MultiTerm.TMO.Interop.MultiSearch.AddSearchTermbase — Adds a termbase to the MultiSearch. Returntype void Parameters pxo_termbase ( Sdl.MultiTerm.TMO.Interop.Termbase ) bstr_source (String) bstr_target (String) Description This method is used to add termbases to a multiple termbase search. It requires a termbase object as well as the source and target index for each termbase as parameters. Note that if you use GuessIndex the search behaves as follows: Suppose the source index for the first termbase is 'English'. In this case, the search in the second termbase will be carried out in the index that is 'guessed' to be the equivalent of the 'English' index in the first termbase, e.g. 'Englisch', 'ENG', etc. regardless of the source index that was provided as parameter for the second termbase. The same also applies to the target index. Note: It is recommended that you add the termbases AFTER configuring all the other settings, e.g. after setting the GuessIndex property. Sample //select termbases Termbase oTb1 = oTbs[\"Termbase1\"]; Termbase oTb2 = oTbs[\"Termbase2\"]; Termbase oTb3 = oTbs[\"Termbase3\"]; //create MultiSearch object MultiSearch oSearch = oMt.MultiSearch; //add termbases to multisearch oSearch.AddSearchTermbase(oTb1, \"English\", \"\"); oSearch.AddSearchTermbase(oTb2, \"Deutsch\", \"Englisch\"); oSearch.AddSearchTermbase(oTb3, \"DEU\", \"ENG\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.ClearSearchTermbases.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.ClearSearchTermbases.html",
    "title": "ClearSearchTermbases method",
    "keywords": "ClearSearchTermbases method Name Sdl.MultiTerm.TMO.Interop.MultiSearch.ClearSearchTermbases — Removes all termbases from the MultiSearch. Returntype void Parameters none Description You can apply this property, for example, to make sure that no termbases are associated with the MultiSearch before adding other termbases. It is recommended to apply this method before adding termbases to a multi search, also to make sure that any source/target language changes are taken over correctly. Sample //create MultiSearch object MultiSearch oSearch = oMt.MultiSearch; //remove any termbases associated with the MultiSearch first oSearch.ClearSearchTermbases(); //add termbases to multisearch oSearch.AddSearchTermbase(oTb1, \"English\", \"\"); oSearch.AddSearchTermbase(oTb2, \"Deutsch\", \"Englisch\"); oSearch.AddSearchTermbase(oTb3, \"DEU\", \"ENG\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.CurrentPosition.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.CurrentPosition.html",
    "title": "CurrentPosition event",
    "keywords": "CurrentPosition event Name Sdl.MultiTerm.TMO.Interop.MultiSearch.CurrentPosition — Returns update information on the progress of a filtered search. Event handler CurrentPosition(ByVal Hits as Long, ByVal EntriesFiltered as Long) Description You can use this event, for example, to drive a progress indicator while a filtered search is carried out. It returns the hits found as well as the total number of entries already filtered."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.Direction.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.Direction.html",
    "title": "Direction property",
    "keywords": "Direction property Name Sdl.MultiTerm.TMO.Interop.MultiSearch.Direction — Sets/returns the direction for the multiple termbase search. Type Sdl.MultiTerm.TMO.Interop.MtSearchDirection (read / write) Index Parameters none Description The search direction can be either up or down. The search direction value will usually be 'down', as a search is normally carried out from the start to and end of an index. Sample MultiSearch oSearch = oMt.MultiSearch; //define search properties oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown;"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.EndSearch.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.EndSearch.html",
    "title": "EndSearch event",
    "keywords": "EndSearch event Name Sdl.MultiTerm.TMO.Interop.MultiSearch.EndSearch — This event is triggered when a filtered search is completed. Event handler EndSearch() Description You can use this event, for example, to inform the user one a filtered search is completed."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.Execute.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.Execute.html",
    "title": "Execute method",
    "keywords": "Execute method Name Sdl.MultiTerm.TMO.Interop.MultiSearch.Execute — Executes the MultiSearch operation and stores the results in a HitTerms object. Returntype Sdl.MultiTerm.TMO.Interop.HitTerms Parameters none Description By applying the Execute method to a MultiSearch, the search is carried out in all termbases. This method is also used to create a HitTerms object, from which the search results (hit terms) can be retrieved. Sample //select termbases Termbase oTb1 = oTbs[\"Termbase1\"]; Termbase oTb2 = oTbs[\"Termbase2\"]; Termbase oTb3 = oTbs[\"Termbase3\"]; //create MultiSearch object MultiSearch oSearch = oMt.MultiSearch; //define search properties oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.SearchExpression=\"window\"; oSearch.FuzzySearch=true; oSearch.GuessIndex=Sdl.MultiTerm.TMO.Interop.MtIndexGuessing.mtGuessIndex; //add termbases to multisearch oSearch.AddSearchTermbase(oTb1, \"English\", \"\"); oSearch.AddSearchTermbase(oTb2, \"Englisch\", \"Deutsch\"); oSearch.AddSearchTermbase(oTb3, \"ENG\", \"DEU\"); //execute search and output hitterms HitTerms oHits = oSearch.Execute(); for(int i=0;i<oHits.Count;i++) { Debug.WriteLine(oHits[i].Text); Debug.WriteLine(oHits[i].Termbase); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.FullTextSearch.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.FullTextSearch.html",
    "title": "FullTextSearch property",
    "keywords": "FullTextSearch property Name Sdl.MultiTerm.TMO.Interop.MultiSearch.FullTextSearch — Turns on/off full text search. Type Boolean (read / write) Index Parameters none Description By setting this property to 'true', a full text search will be performed in the termbase(s). That is, not just the terms, but also the field values will be searched. The default value is 'false'. Setting this property to any value will automatically set FuzzySearch to 'false' and vice versa. Sample //create MultiSearch object MultiSearch oSearch = oMt.MultiSearch; //define search properties oSearch.FullTextSearch=true; oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.SearchExpression=\"window\"; //add termbases to multisearch oSearch.AddSearchTermbase(oTb1, \"English\", \"German\"); oSearch.AddSearchTermbase(oTb2, \"Englisch\", \"Deutsch\"); oSearch.AddSearchTermbase(oTb3, \"ENG\", \"DEU\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.FuzzySearch.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.FuzzySearch.html",
    "title": "FuzzySearch property",
    "keywords": "FuzzySearch property Name Sdl.MultiTerm.TMO.Interop.MultiSearch.FuzzySearch — Turns on/off fuzzy search. Type Boolean (read / write) Index Parameters none Description By setting this property to 'true', a fuzzy search will be performed in the termbase(s). The default value if 'false'. Setting this property to any value will automatically set FullTextSearch to 'false' and vice versa. Sample //create MultiSearch object MultiSearch oSearch = oMt.MultiSearch; //define search properties oSearch.FuzzySearch=true; oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.SearchExpression=\"window\"; //add termbases to multisearch oSearch.AddSearchTermbase(oTb1, \"English\", \"German\"); oSearch.AddSearchTermbase(oTb2, \"Englisch\", \"Deutsch\"); oSearch.AddSearchTermbase(oTb3, \"ENG\", \"DEU\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.GuessIndex.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.GuessIndex.html",
    "title": "GuessIndex property",
    "keywords": "GuessIndex property Name Sdl.MultiTerm.TMO.Interop.MultiSearch.GuessIndex — Specifies whether the index for the multiple termbase search should be guessed or not. Type Sdl.MultiTerm.TMO.Interop.MtIndexGuessing (read / write) Index Parameters none Description When performing a multiple termbase search you need to take into consideration that the search index used in the first termbase is named differently in the other termbases. For example, while the search index is called \"English\" in the first termbase, in the other termbases it may be called \"Englisch\", \"ENG\", etc. By setting this parameter you can make the search 'guess' the search index based on the search index selected for the first termbase. In this case even when, for example, \"Deutsch\" has been specified for the second termbase, the search will still be carried out in the English index. The determination is made by the search automatically based on the index locale. Note: We recommend that you configure this setting BEFORE adding the search termbases . Sample Termbases oTbs = oLocalRep.Termbases; Termbase oTb1 = oTbs[\"Termbase1\"]; Termbase oTb2 = oTbs[\"Termbase2\"]; Termbase oTb3 = oTbs[\"Termbase3\"]; MultiSearch oSearch = oMt.MultiSearch; //guess the search index based on the index of the first termbase oSearch.GuessIndex=Sdl.MultiTerm.TMO.Interop.MtIndexGuessing.mtGuessIndex; oSearch.SearchType = Sdl.MultiTerm.TMO.Interop.MtSearchType.mtSequential; oSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; //maximum hits per termbase oSearch.MaximumHits=10; //add termbases to search oSearch.AddSearchTermbase(oTb1, \"English\", \"German\"); oSearch.AddSearchTermbase(oTb2, \"Englisch\", \"Deutsch\"); oSearch.AddSearchTermbase(oTb3, \"ENG\", \"DEU\"); oSearch.SearchExpression = \"language\";"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.html",
    "title": "Sdl.MultiTerm.TMO.Interop.MultiSearch class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.MultiSearch class Name Sdl.MultiTerm.TMO.Interop.MultiSearch — Provides programmatic access to multiple termbase search. Description Rather than searching only in a single termbase, MultiTerm allows you to cascade searches over sevral termbases, which can both be local and remote server termbases. This is why the MultiSearch class is sub-ordinate to the MultiTerm client application class, as it is not limited to the local or server termbase repository. You can avail of this class to implement multiple termbase search functionality in your client application. Rather than carrying out a search on each termbase, you can add multiple termbases to one MultiSearch object, execute the search and then retrieve a consolidated hit list for all termbases. A search requires you to specify the search index for each termbase. Multiple termbase search can be tricky, if the search index label differs among the various termbases. Example: you would like to carry out a search for an English term in three termbases. Termbase#1 has an index called \"English\", Termbase#2 has an index called \"Englisch\", and Termbase#3 has an index called \"ENG\". To carry out a search in the English index of all three termbases you would have to find out which index label stands for the English language in each termbase. The MultiSearch class implements a GuessIndex property that allows you to have the search 'guess' the correct index. If, for example, the first termbase you add to the search has the index label \"English\", the search will automatically 'guess' what the English index is called in all the other termbases. As a criterion for 'guessing' the correct search index, the MultiSearch relies on the index locales. In the example below the second termbases added to the search in \"Deutsch\" (i.e. German). However, the search is configured to 'guess' the index, i.e. in the second and third termbase the search will be carried out in the indexes that are most likely to correspond to the \"English\" index of the first termbase. Properties Direction : Sets/returns the direction for the multiple termbase search. FuzzySearch : Turns on/off fuzzy search. Setting this property to any value will automatically set FullTextSearch to 'false' FullTextSearch : Turns on/off full text search. Setting this property to any value will automatically set FuzzySearch to 'false' GuessIndex : Specifies whether the index for the multiple termbase search should be guessed or not. MaximumHits : Sets/returns the maximum number of hits per termbase. SearchExpression : Sets/returns the expression to look up. SearchInfo : Provides programmatic access to the search information related to a particular termbase. SearchTermbases : Returns the names of the termbases used for a multi search in an XML stream. SearchType : Specifies the type of multiple termbase search to carry out. TargetRequired : Sets/returns whether only terms with one or more target terms should be taken into consideration. Methods AddSearchTermbase : Adds a termbase to the MultiSearch. ClearSearchTermbases : Removes all termbases from the MultiSearch. Execute : Executes the MultiSearch operation and stores the results in a HitTerms object. Sample Termbases oTbs = oLocalRep.Termbases; //select termbases Termbase oTb1 = oTbs[\"C:\\\\TestData\\\\Termbase1\"]; Termbase oTb2 = oTbs[\"C:\\\\TestData\\\\Termbase2\"]; Termbase oTb3 = oTbs[\"C:\\\\TestData\\\\Termbase3\"]; //create MultiSearch object MultiSearch oSearch = oMt.MultiSearch; //define further search properties oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.SearchExpression=\"window\"; oSearch.GuessIndex=Sdl.MultiTerm.TMO.Interop.MtIndexGuessing.mtGuessIndex; oSearch.SearchType=Sdl.MultiTerm.TMO.Interop.MtSearchType.mtParallel; //add termbases to multisearch oSearch.AddSearchTermbase(oTb1, \"English\", \"German\"); oSearch.AddSearchTermbase(oTb2, \"Englisch\", \"Deutsch\"); oSearch.AddSearchTermbase(oTb3, \"ENG\", \"DEU\"); //execute search and output hitterms HitTerms oHits = oSearch.Execute(); for(int i=0;i<oHits.Count;i++) { Debug.WriteLine(oHits[i].Text); Debug.WriteLine(oHits[i].Termbase); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.MaximumHits.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.MaximumHits.html",
    "title": "MaximumHits property",
    "keywords": "MaximumHits property Name Sdl.MultiTerm.TMO.Interop.MultiSearch.MaximumHits — Sets/returns the maximum number of hits per termbase. Type Long (read / write) Index Parameters none Description Settings this property, e.g. to 10 will list up to ten hits for each termbase, even if one or several termbases potentially contain more hit terms. Sample //create MultiSearch object MultiSearch oSearch = oMt.MultiSearch; //define search properties oSearch.MaximumHits=10; oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.SearchExpression=\"window\"; oSearch.FuzzySearch=true; //add termbases to multisearch oSearch.AddSearchTermbase(oTb1, \"English\", \"German\"); oSearch.AddSearchTermbase(oTb2, \"Deutsch\", \"Englisch\"); oSearch.AddSearchTermbase(oTb3, \"DEU\", \"ENG\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.SearchExpression.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.SearchExpression.html",
    "title": "SearchExpression property",
    "keywords": "SearchExpression property Name Sdl.MultiTerm.TMO.Interop.MultiSearch.SearchExpression — Sets/returns the expression to look up. Type String (read / write) Index Parameters none Description Via this property you provide the search term to look up in the termbase(s). If this parameter is left unspecified, a blank string (\"\") will be used, which means that any term will be retrieved from the termbase. Note: MultiTerm allows to use the asterisk (*) as a placeholder in search operations. Moreover, you can also carry out a character range search. To search for terms within a specific character ranges, use square brackets, e.g. \"[a-b]\". Sample //create MultiSearch object MultiSearch oSearch = oMt.MultiSearch; //define search properties oSearch.SearchExpression=\"star system\"; oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.FuzzySearch=true; //add termbases to multisearch oSearch.AddSearchTermbase(oTb1, \"English\", \"German\"); oSearch.AddSearchTermbase(oTb2, \"Englisch\", \"Deutsch\"); oSearch.AddSearchTermbase(oTb3, \"ENG\", \"DEU\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.SearchInfo.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.SearchInfo.html",
    "title": "SearchInfo property",
    "keywords": "SearchInfo property Name Sdl.MultiTerm.TMO.Interop.MultiSearch.SearchInfo — Provides programmatic access to the search information related to a particular termbase. Type Sdl.MultiTerm.TMO.Interop.SearchInfos (read) Index Parameters none"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.SearchTermbases.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.SearchTermbases.html",
    "title": "SearchTermbases property",
    "keywords": "SearchTermbases property Name Sdl.MultiTerm.TMO.Interop.MultiSearch.SearchTermbases — Returns the names of the termbases used for a multi search in an XML stream. Type String (read) Index Parameters none Description You can use this property to return an XML stream that contains the names of the termbases selected for a multi search. The XML stream also contains information on whether a termbase is local or not."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.SearchType.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.SearchType.html",
    "title": "SearchType property",
    "keywords": "SearchType property Name Sdl.MultiTerm.TMO.Interop.MultiSearch.SearchType — Specifies the type of multiple termbase search to carry out. Type Sdl.MultiTerm.TMO.Interop.MtSearchType (read / write) Index Parameters none Description Sample Termbases oTbs = oLocalRep.Termbases; Termbase oTb1 = oTbs[\"Termbase1\"]; Termbase oTb2 = oTbs[\"Termbase2\"]; Termbase oTb3 = oTbs[\"Termbase3\"]; MultiSearch oSearch = oMt.MultiSearch; oSearch.SearchType = Sdl.MultiTerm.TMO.Interop.MtSearchType.mtParallel; oSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; //guess the search index based on the index of the first termbase oSearch.GuessIndex=Sdl.MultiTerm.TMO.Interop.MtIndexGuessing.mtGuessIndex; //maximum hits per termbase oSearch.MaximumHits=10; //add termbases to search oSearch.AddSearchTermbase(oTb1, \"English\", \"German\"); oSearch.AddSearchTermbase(oTb2, \"Englisch\", \"Deutsch\"); oSearch.AddSearchTermbase(oTb3, \"ENG\", \"DEU\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.StartSearch.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.StartSearch.html",
    "title": "StartSearch event",
    "keywords": "StartSearch event Name Sdl.MultiTerm.TMO.Interop.MultiSearch.StartSearch — This event is triggered upon the start of a filtered search. Event handler StartSearch(ByVal TotalEntriesForFilter as Long, ByVal CurrentTermbase as Long, ByVal TotalTermbases as Long) Description You can use this event to provide information to the user upon starting a filtered search, i.e. the total number of termbases that need to be searched, the currently searched termbase, as well as the total number of entries to filter."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.TargetRequired.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.MultiSearch.TargetRequired.html",
    "title": "TargetRequired property",
    "keywords": "TargetRequired property Name Sdl.MultiTerm.TMO.Interop.MultiSearch.TargetRequired — Sets/returns whether only terms with one or more target terms should be taken into consideration. Type Boolean (read / write) Index Parameters none Description Set this property to true if you want the hit list to only contain terms with at least one corresponding target term. This property basically acts like a filter that singles out entries that have one or more target terms. The default value is false, i.e. usually also hit terms without a target term are taken into account. Sample //create MultiSearch object MultiSearch oSearch = oMt.MultiSearch; //define search properties oSearch.TargetRequired=true; oSearch.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.MaximumHits=10; oSearch.SearchExpression=\"window\"; oSearch.FuzzySearch=true; //add termbases to multisearch oSearch.AddSearchTermbase(oTb1, \"English\", \"German\"); oSearch.AddSearchTermbase(oTb2, \"Englisch\", \"Deutsch\"); oSearch.AddSearchTermbase(oTb3, \"ENG\", \"DEU\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.PicklistValues.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.PicklistValues.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.PicklistValues.Count — Returns the number of picklist values associated with a particular picklist field. Type Long (read) Index Parameters none Description This property is used to ascertain the number of picklist values associated with a particular picklist field. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //access termbase definition TermbaseDefinition oDef = oTb.Definition; //select first descriptive field DescriptiveField oField = oDef.Fields[0]; //generate list of picklist values PicklistValues oValues = oField.PicklistValues; Debug.WriteLine(\"Picklist field count: \" + oValues.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.PicklistValues.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.PicklistValues.html",
    "title": "Sdl.MultiTerm.TMO.Interop.PicklistValues class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.PicklistValues class Name Sdl.MultiTerm.TMO.Interop.PicklistValues — Provides programmatic access to the picklist values of a picklist type descriptive field. Description The termbase creators/administrators can define descriptive fields to be of the type picklist. Any such fields are associated with a list of values (at least one value is required), which are specified in the termbase definition. When adding or editing such fields later on, the user is required to select one (or several) pre-defined picklist values rather than entering free text information. This ensures consistency of the values for particular fields throughout the termbase. Examples for picklist fields are \"Subject\", \"Product type\", \"Department\", \"Gender\", \"Grammar information\", etc. An example application for this class is filling a drop-down list with the picklist values of a particular field. Properties Count : Returns the number of picklist values associated with a particular picklist field. Item : Refers to a specific value from the picklist of a specified picklist field. Methods None Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //access termbase definition TermbaseDefinition oDef = oTb.Definition; //select first descriptive field DescriptiveField oField = oDef.Fields[0]; //generate list of picklist values PicklistValues oValues = oField.PicklistValues; for(int i=0;i<oValues.Count;i++) { Debug.WriteLine(oValues[i]); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.PicklistValues.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.PicklistValues.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.PicklistValues.Item — Refers to a specific value from the picklist of a specified picklist field. Type String (read) Index Parameters Index (Long) Description This property is used to retrieve a specific value from a picklist field. You may use it, for example, to loop through a picklist and return each picklist value from the termbase definition. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //access termbase definition TermbaseDefinition oDef = oTb.Definition; //select first descriptive field DescriptiveField oField = oDef.Fields[0]; //generate list of picklist values PicklistValues oValues = oField.PicklistValues; Debug.WriteLine(\"First picklist value: \" + oValues[0]);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.ErrorCode.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.ErrorCode.html",
    "title": "ErrorCode property",
    "keywords": "ErrorCode property Name Sdl.MultiTerm.TMO.Interop.SearchInfo.ErrorCode — Returns the error code for the search in a particular termbase (if applicable). Type Long (read) Index Parameters none Description Sample //execute search HitTerms oHits = oSearch.Execute(); //retrieve information on search in the second termbase SearchInfo oInfo; oInfo = oSearch.SearchInfo[1]; Debug.WriteLine(\"Error code \" + oInfo.ErrorCode);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.ErrorMessage.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.ErrorMessage.html",
    "title": "ErrorMessage property",
    "keywords": "ErrorMessage property Name Sdl.MultiTerm.TMO.Interop.SearchInfo.ErrorMessage — Returns the error message for a search in a particular termbase (if applicable). Type String (read) Index Parameters none Description Sample //execute search HitTerms oHits = oSearch.Execute(); //retrieve information on search in the second termbase SearchInfo oInfo; oInfo = oSearch.SearchInfo[1]; Debug.WriteLine(\"Error message \" + oInfo.ErrorMessage);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.HitsFound.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.HitsFound.html",
    "title": "HitsFound property",
    "keywords": "HitsFound property Name Sdl.MultiTerm.TMO.Interop.SearchInfo.HitsFound — Returns true or false depending on whether any hits have been found in a particular termbase. Type Boolean (read) Index Parameters none Description Via this property you can ascertain whether a particular termbase has yielded any results in the first place. Sample //execute search HitTerms oHits = oSearch.Execute(); //retrieve information on search in the second termbase SearchInfo oInfo; oInfo = oSearch.SearchInfo[1]; Debug.WriteLine(\"Have any hits been found? \" + oInfo.HitsFound);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.html",
    "title": "Sdl.MultiTerm.TMO.Interop.SearchInfo class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.SearchInfo class Name Sdl.MultiTerm.TMO.Interop.SearchInfo — Stores information on the search carried for particular termbases. Description After a search has been carried out in multiple termbases you might want to know whether a particular termbases yielded any results, which source/target index has actually been used, etc. This class allows you to retrieve such information for each termbases included in the search. Properties ErrorCode : Returns the error code for the search in a particular termbase (if applicable). ErrorMessage : Returns the error message for a search in a particular termbase (if applicable). HitsFound : Returns true or false depending on whether any hits have been found in a particular termbase. SourceIndex : Returns the source index that was actually used when searching a particular termbase. SourceLocale : Returns the locale of the source index used when searching a particular termbase. TargetIndex : Returns the target index used when searching a particular termbase. TargetLocale : Returns the locale of the target index used when searching a particular termbase. TermbaseName : Returns the name of the termbase that the search info relates to. Methods None Sample Termbases oTbs = oLocalRep.Termbases; Termbase oTb1 = oTbs[\"Termbase1\"]; Termbase oTb2 = oTbs[\"Termbase2\"]; Termbase oTb3 = oTbs[\"Termbase3\"]; MultiSearch oSearch = oMt.MultiSearch; oSearch.SearchType = Sdl.MultiTerm.TMO.Interop.MtSearchType.mtSequential; oSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; //guess the search index based on the index of the first termbase oSearch.GuessIndex=Sdl.MultiTerm.TMO.Interop.MtIndexGuessing.mtGuessIndex; //maximum hits per termbase oSearch.MaximumHits=10; //add termbases to search oSearch.AddSearchTermbase(oTb1, \"English\", \"German\"); oSearch.AddSearchTermbase(oTb2, \"Englisch\", \"Deutsch\"); oSearch.AddSearchTermbase(oTb3, \"ENG\", \"DEU\"); oSearch.SearchExpression = \"search term\"; //execute search HitTerms oHits = oSearch.Execute(); //retrieve information on search in the second termbase SearchInfo oInfo; oInfo = oSearch.SearchInfo[1]; Debug.WriteLine(\"Any hits found in this termbase? \" + oInfo.HitsFound); Debug.WriteLine(\"Source index used: \" + oInfo.SourceIndex);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.SourceIndex.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.SourceIndex.html",
    "title": "SourceIndex property",
    "keywords": "SourceIndex property Name Sdl.MultiTerm.TMO.Interop.SearchInfo.SourceIndex — Returns the source index that was actually used when searching a particular termbase. Type String (read) Index Parameters none Description Sample //execute search HitTerms oHits = oSearch.Execute(); //retrieve information on search in the second termbase SearchInfo oInfo; oInfo = oSearch.SearchInfo[1]; Debug.WriteLine(\"Source index used \" + oInfo.SourceIndex);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.SourceLocale.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.SourceLocale.html",
    "title": "SourceLocale property",
    "keywords": "SourceLocale property Name Sdl.MultiTerm.TMO.Interop.SearchInfo.SourceLocale — Returns the locale of the source index used when searching a particular termbase. Type String (read) Index Parameters none Description Sample //execute search HitTerms oHits = oSearch.Execute(); //retrieve information on search in the second termbase SearchInfo oInfo; oInfo = oSearch.SearchInfo[1]; Debug.WriteLine(\"Source locale: \" + oInfo.SourceLocale);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.TargetIndex.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.TargetIndex.html",
    "title": "TargetIndex property",
    "keywords": "TargetIndex property Name Sdl.MultiTerm.TMO.Interop.SearchInfo.TargetIndex — Returns the target index used when searching a particular termbase. Type String (read) Index Parameters none Description Sample //execute search HitTerms oHits = oSearch.Execute(); //retrieve information on search in the second termbase SearchInfo oInfo; oInfo = oSearch.SearchInfo[1]; Debug.WriteLine(\"Target index used \" + oInfo.TargetIndex);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.TargetLocale.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.TargetLocale.html",
    "title": "TargetLocale property",
    "keywords": "TargetLocale property Name Sdl.MultiTerm.TMO.Interop.SearchInfo.TargetLocale — Returns the locale of the target index used when searching a particular termbase. Type String (read) Index Parameters none Description Sample //execute search HitTerms oHits = oSearch.Execute(); //retrieve information on search in the second termbase SearchInfo oInfo; oInfo = oSearch.SearchInfo[1]; Debug.WriteLine(\"Target locale: \" + oInfo.TargetLocale);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.TermbaseName.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfo.TermbaseName.html",
    "title": "TermbaseName property",
    "keywords": "TermbaseName property Name Sdl.MultiTerm.TMO.Interop.SearchInfo.TermbaseName — Returns the name of the termbase that the search info relates to. Type String (read) Index Parameters none Description Sample //execute search HitTerms oHits = oSearch.Execute(); //retrieve information on search in the second termbase SearchInfo oInfo; oInfo = oSearch.SearchInfo[1]; Debug.WriteLine(\"Target name: \" + oInfo.TermbaseName);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfos.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfos.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.SearchInfos.Count — Returns the number of search info sets available. Type Long (read) Index Parameters none Description Each search info set relates to a particular termbase. So, the value returned by this property will be equal to the number of termbases used during the search. Sample Sdl.MultiTerm.TMO.Interop.MultiSearch search = oMt.MultiSearch; search.MaximumHits=10; search.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; search.SearchExpression=\"\"; search.AddSearchTermbase(oTermbase1, \"English\", \"German\"); search.AddSearchTermbase(oTermbase1, \"ENG\", \"DEU\"); search.Execute(); Sdl.MultiTerm.TMO.Interop.SearchInfos infos = search.SearchInfo; Debug.WriteLine(\"Number of search info sets available: \" + infos.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfos.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfos.html",
    "title": "Sdl.MultiTerm.TMO.Interop.SearchInfos class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.SearchInfos class Name Sdl.MultiTerm.TMO.Interop.SearchInfos — Provides programmatic access to relevant information after having carried out a search. Description This class allows you to retrieve various information after a multiple termbase search has been carried out. For example, you might want to know whether the search in a particular termbase has yielded any results, which search index has been 'guesses', etc. Properties Count : Returns the number of search info sets available. Item : Refers to a particular set of search info, i.e. the search info related to a specific termbase. Methods None"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfos.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.SearchInfos.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.SearchInfos.Item — Refers to a particular set of search info, i.e. the search info related to a specific termbase. Type Sdl.MultiTerm.TMO.Interop.SearchInfo (read) Index Parameters Index (Variant) Description This property allows you, for example, to retrieve information such as the source/target index that was actually used when searching a particular termbase in a multi-termbase search. Sample Sdl.MultiTerm.TMO.Interop.MultiSearch search = oMt.MultiSearch; search.MaximumHits=10; search.Direction=Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; search.SearchExpression=\"\"; search.AddSearchTermbase(oTermbase1, \"English\", \"German\"); search.AddSearchTermbase(oTermbase1, \"ENG\", \"DEU\"); search.Execute(); Sdl.MultiTerm.TMO.Interop.SearchInfos infos = search.SearchInfo; Debug.WriteLine(\"Source index used for the first termbase: \" + infos[0].SourceIndex);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase._Cookie.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase._Cookie.html",
    "title": "_Cookie property",
    "keywords": "_Cookie property Name Sdl.MultiTerm.TMO.Interop.Termbase._Cookie — [For internal use only.] Type String (read) Index Parameters none"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase._DefaultEntryClassID.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase._DefaultEntryClassID.html",
    "title": "_DefaultEntryClassID property",
    "keywords": "_DefaultEntryClassID property Name Sdl.MultiTerm.TMO.Interop.Termbase._DefaultEntryClassID — Returns the default entry class id. Type Long (read) Index Parameters none Description This property can be used to retrieve the default entry class id number. In contrast to the DefaultEntryClass it does not return the entry class name, e.g. 'Internal', but the id to which the name is mapped."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase._IsLocal.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase._IsLocal.html",
    "title": "_IsLocal property",
    "keywords": "_IsLocal property Name Sdl.MultiTerm.TMO.Interop.Termbase._IsLocal — Flags whether a termbase is local or not. Type Boolean (read) Index Parameters none Description This property returns true if the current termbase is local, otherwise false."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase._Reorganise.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase._Reorganise.html",
    "title": "_Reorganise method",
    "keywords": "_Reorganise method Name Sdl.MultiTerm.TMO.Interop.Termbase._Reorganise — [For internal use only.] Returntype void Parameters vb_encrypt (Boolean) vb_markReadOnly (Boolean) l_expiryDate (Long)"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.AccessPermissions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.AccessPermissions.html",
    "title": "AccessPermissions property",
    "keywords": "AccessPermissions property Name Sdl.MultiTerm.TMO.Interop.Termbase.AccessPermissions — Provides programmatic access to the permissions the currently logged-in user has to a termbase. Type Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions (read) Index Parameters none Description Users usually have different permissions for using a termbase. For example, a particular user may have read-only permissions or may not be allowed to change entry class values. Via this class you can determine the respective user's access permissions and, e.g., output a message when the user tries to perform an action that he/she is not allowed to take such as changing an entry class value. Sample Termbase oTb = oTbs[\"01test\"]; TermbaseAccessPermissions oTbPermissions = oTb.AccessPermissions; Debug.Write(\"User can change entry class values: \" + oTbPermissions.CanChangeEntryClass);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.ActiveFilter.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.ActiveFilter.html",
    "title": "ActiveFilter property",
    "keywords": "ActiveFilter property Name Sdl.MultiTerm.TMO.Interop.Termbase.ActiveFilter — Returns the active filter for a termbase. Type Sdl.MultiTerm.TMO.Interop.FilterDefinition (read) Index Parameters none Description A filter allows you to search a termbase for a specific subset of entries, e.g. all entries that were created after a specified date. Filters are useful for search, import and export operations. If no filter is applied, a search or import/export operation will apply to all entries of a termbase. If a filter is used only entries that correspond to the filter will be processed. Sample Termbase oTb = oTbs[\"Termbase Name\"]; FilterDefinitions oFilters = oTb.FilterDefinitions; FilterDefinition oFilter = oFilters[\"Missing target\"]; oFilter.Active=true; Debug.Write(\"Currently active filter: \" + oTb.ActiveFilter.Name);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Browse.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Browse.html",
    "title": "Browse property",
    "keywords": "Browse property Name Sdl.MultiTerm.TMO.Interop.Termbase.Browse — Provides access to the browse functionality for a termbase. Type Sdl.MultiTerm.TMO.Interop.TermbaseBrowser (read) Index Parameters none Description Browsing a termbase involves navigating to the next or previous entry (or entries) starting from a particular position in the browse index (i.e. the currently selected source index)."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.ChangeDate.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.ChangeDate.html",
    "title": "ChangeDate property",
    "keywords": "ChangeDate property Name Sdl.MultiTerm.TMO.Interop.Termbase.ChangeDate — Returns the last termbase change date. Type Date (read) Index Parameters none Description Returns the date of the last change made to the specified termbase. Sample Termbase oTb = oTbs[\"Termbase name\"]; Debug.Write(\"Termbase change date: \" + oTb.ChangeDate);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Close.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Close.html",
    "title": "Close method",
    "keywords": "Close method Name Sdl.MultiTerm.TMO.Interop.Termbase.Close — Closes a specified termbase. Returntype void Parameters none Description Applying this method closes a termbase, thereby making it inaccessible for, e.g. further search operations. Sample Termbase oTb = oTbs[0]; oTb.Close();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.CopyrightText.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.CopyrightText.html",
    "title": "CopyrightText property",
    "keywords": "CopyrightText property Name Sdl.MultiTerm.TMO.Interop.Termbase.CopyrightText — Returns the copyright text for a particular termbase. Type String (read) Index Parameters none Description A termbase may have a copyright text string associated with it, which is especially useful when using MultiTerm to publish commercial dictionary content. Via this property you can return the copyright text (if available)."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.DefaultEntryClass.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.DefaultEntryClass.html",
    "title": "DefaultEntryClass property",
    "keywords": "DefaultEntryClass property Name Sdl.MultiTerm.TMO.Interop.Termbase.DefaultEntryClass — Returns the default entry class for a particular termbase. Type String (read) Index Parameters none Description Entry classes are a way of classifying entries. Using entry classes it is possible to restrict user access to certain entries. Entry classes are only available for server-based termbases. Each server-based termbase has a default entry class, which is automatically applied to every new entry unless another entry class has been specified. The default entry class is usually \"Unspecified\", however, the termbase administrator can also select a different entry class. This property is used to determine the default entry class of a particular termbase. Sample Termbase oTb = oTbs[\"Termbase Name\"]; Debug.Write(\"Default entry class name: \" + oTb.DefaultEntryClass);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Definition.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Definition.html",
    "title": "Definition property",
    "keywords": "Definition property Name Sdl.MultiTerm.TMO.Interop.Termbase.Definition — Provides programmatic access to a termbase definition. Type Sdl.MultiTerm.TMO.Interop.TermbaseDefinition (read) Index Parameters none Description A termbase definition contains the indexes (i.e. languages) and descriptive fields as well as information the entry structure (i.e. the field hierarchy). By applying the Definition property to a termbase object you can, for example, retrieve information such as the number of indexes and descriptive fields contained in the termbase definition, the field labels, etc. Sample Termbase oTb = oTbs[\"Termbase Name\"]; TermbaseDefinition oDef = oTb.Definition; Debug.Write(\"Number of languages in termbase definition: \" + oDef.Indexes.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Delete.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Delete.html",
    "title": "Delete method",
    "keywords": "Delete method Important: Method is no longer supported Name Sdl.MultiTerm.TMO.Interop.Termbase.Delete — Deletes a particular termbase. Returntype void Parameters none Description Applying this method to a termbase object will physically delete the termbase. In case of local termbases the corresponding *.mdb file will be deleted. In case of server termbases, only the reference to the termbase in the MtMaster database will be removed. The actual physical termbase will remain in the SQL Server or Oracle backend and can only be removed by the database backend administrator. Note that only administrative MultiTerm users can apply this method to a server termbase. Sample Termbase oTb = oTbs[0]; oTb.Delete();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.DownloadedCopyrightIcoPath.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.DownloadedCopyrightIcoPath.html",
    "title": "DownloadedCopyrightIcoPath property",
    "keywords": "DownloadedCopyrightIcoPath property Name Sdl.MultiTerm.TMO.Interop.Termbase.DownloadedCopyrightIcoPath — Returns the path and name of the termbase icon file. Type String (read) Index Parameters none Description A termbase can be associated with a 16x16 pixel bitmap, i.e. the termbase icon. This property returns the full path and file name of the icon bitmap (if available)."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.DownloadedCopyrightInfoPath.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.DownloadedCopyrightInfoPath.html",
    "title": "DownloadedCopyrightInfoPath property",
    "keywords": "DownloadedCopyrightInfoPath property Name Sdl.MultiTerm.TMO.Interop.Termbase.DownloadedCopyrightInfoPath — Returns the path and name of the termbase reference document. Type String (read) Index Parameters none Description A termbase can be associated with a reference document, which provides further information on the termbase, e.g. a PDF document. This property returns the full path and file name of the reference document (if available)."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.DownloadedCopyrightSplashPath.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.DownloadedCopyrightSplashPath.html",
    "title": "DownloadedCopyrightSplashPath property",
    "keywords": "DownloadedCopyrightSplashPath property Name Sdl.MultiTerm.TMO.Interop.Termbase.DownloadedCopyrightSplashPath — Returns the path and name of the termbase splash screen image. Type String (read) Index Parameters none Description A termbase can be associated with splash screen image, which can be viewed in the \"About Termbase\" dialog. This dialog is accessible via the \"Help\" menu of the MultiTerm client application. This property returns the full path and file name of the splash screen image file (if available)."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Entries.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Entries.html",
    "title": "Entries property",
    "keywords": "Entries property Name Sdl.MultiTerm.TMO.Interop.Termbase.Entries — Provides programmatic access to the entries of a termbase. Type Sdl.MultiTerm.TMO.Interop.Entries (read) Index Parameters none Description A termbase contains a number of entries (i.e. concepts). Applying the Entries property to a Termbase object provides programmatic access to all entries of that particular termbase. You may, for example, add new entries to the specified termbase. Sample Termbase oTb = oTbs[\"Termbase Name\"]; Entries oEntries = oTb.Entries; Debug.Write(\"Total number of entries in termbase: \" + oEntries.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.ExpiryDate.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.ExpiryDate.html",
    "title": "ExpiryDate property",
    "keywords": "ExpiryDate property Name Sdl.MultiTerm.TMO.Interop.Termbase.ExpiryDate — Returns the expiry date of the termbase. Type Date (read) Index Parameters none Description A termbase can have an expiry date after which it cannot be used any longer. This is a useful facility, e.g. for commercial dictionary content, which is updated on a regular basis. Via this property you can, for example, check whether the current termbase has reached the expiry date and then deny access to it."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.ExportDefinitions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.ExportDefinitions.html",
    "title": "ExportDefinitions property",
    "keywords": "ExportDefinitions property Name Sdl.MultiTerm.TMO.Interop.Termbase.ExportDefinitions — Provides programmatic access to the export definitions of a termbase. Type Sdl.MultiTerm.TMO.Interop.ExportDefinitions (read) Index Parameters none Description Export definitions are used to export termbase content to an external file. Depending on the export definition the output file may be in MultiTerm XML or in a different format (e.g. HTML). After creation, each termbase is automatically assigned 5 default export definitions. Administrative users (in the case of server-based termbases) can add further export definitions to suit special requirement. Export definitions are physically stored in in the termbase. Via this property you can, for example, return the number of available export definitions, generate a list containing the names of available export definitions, etc. Sample Termbase oTb = oTbs[\"Termbase Name\"]; ExportDefinitions oExpDefs = oTb.ExportDefinitions; Debug.Write(\"Total number of export definitions in termbase: \" + oExpDefs.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.ExtractToFile.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.ExtractToFile.html",
    "title": "ExtractToFile method",
    "keywords": "ExtractToFile method This method is no longer supported Name Sdl.MultiTerm.TMO.Interop.Termbase.ExtractToFile — Saves the a termbase to an *.sdltb file. Returntype void Parameters bstr_localFile (String) Description Applying this method to a local termbase saves it to a particular file on the user's hard disk. The actual termbase will still remain in the local termbase repository. This method requires the full name and path of the *.mdb file to which the local termbase should be copied. This method is useful when you want to have a physical termbase copy to forward to another user. Sample Sdl.MultiTerm.TMO.Interop.ApplicationClass mt = new Sdl.MultiTerm.TMO.Interop.ApplicationClass(); mt.LocalRepository.Connect(\"\",\"\"); Termbase myTermbase = mt.LocalRepository.Termbases[\"Termbase Name\"]; myTermbase.ExtractToFile(\"c:\\\\temp\\\\extracted.mdb\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.FilterDefinitions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.FilterDefinitions.html",
    "title": "FilterDefinitions property",
    "keywords": "FilterDefinitions property Name Sdl.MultiTerm.TMO.Interop.Termbase.FilterDefinitions — Provides programmatic access to the filter definitions of a termbase. Type Sdl.MultiTerm.TMO.Interop.FilterDefinitions (read) Index Parameters none Description Filters are used to search for a specific subset of entries that match a specified criteria (e.g. all entries that were created after a certain date, that contain or do not contain a particular field, etc.). After creation, each termbase is automatically assigned one default filter. Users can add further filters as required. The filter definitions are physically stored in in the termbase. Via this property you can, for example, return the number of available filter definitions, generate a list containing the names of available filters, etc. Sample Termbase oTb = oTbs[\"Termbase Name\"]; FilterDefinitions oFilterDefs = oTb.FilterDefinitions; Debug.Write(\"Total number of filter definitions in termbase: \" + oFilterDefs.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.GetHomonyms.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.GetHomonyms.html",
    "title": "GetHomonyms method",
    "keywords": "GetHomonyms method Name Sdl.MultiTerm.TMO.Interop.Termbase.GetHomonyms — Retrieves all homonym entries of a particular termbase. Returntype Sdl.MultiTerm.TMO.Interop.Homonyms Parameters Index (String) Source (String) Target (String) Description Homonyms are duplicate terms. Those can be actual duplicates, i.e. redundant terms, but it can also be the same term expressing different concepts, e.g. \"book\" (book for reading) and \"book\" (to book a flight). Via this class you can access all homonyms (if any) contained in a termbase. As parameter you need to provide the index that should be searched for homonyms. The Source and Target parameters are only used if you have set an active filter for the termbase, and the filter is using \"Source\" or \"Target\" in a condition instead of actual index name. If you don't use such a filter you can set these parameters to \"\" (empty string). Sample Termbase oTb = oTbs[\"Termbase Name\"]; Sdl.MultiTerm.TMO.Interop.Homonyms oDoubles = oTb.GetHomonyms(\"English\", \"English\", \"German\"); Debug.Write(\"Homonym count in English index: \" + oDoubles.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.html",
    "title": "Sdl.MultiTerm.TMO.Interop.Termbase class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.Termbase class Name Sdl.MultiTerm.TMO.Interop.Termbase — Provides programmatic access to a particular termbase. Description A termbase is a database that is physically stored in a JET, SQL Server or Oracle backend. A termbase contains a number of entries (i.e. concepts), a set of so-called termbase or catalog objects (e.g. filter and layout definitions, etc.) and possibly also multimedia blobs. The Termbase class allows you to retrieve various information on a specified termbase, e.g. the termbase name, location, the entry count, the number of indexes in the termbase definition, etc. Apart from that you can also configure a number of settings for a selected termbase, e.g. the source and target index, the active filter, etc. To select a termbase from a termbase repository you can either use the termbase path (for local termbases), the termbase name (for server termbases) or the index number, e.g.: oTb = oTbs[\"C:\\Testdata\\Sample Termbase.sdltb\"] or oTb = oTbs[\"Sample Termbase\"] or oTb = oTbs[0] Properties _Cookie : [For internal use only.] _DefaultEntryClassID : Returns the default entry class id. _IsLocal : Flags whether a termbase is local or not. AccessPermissions : Provides programmatic access to the permissions the currently logged-in user has to a termbase. ActiveFilter : Returns the active filter for a termbase. Browse : Provides access to the browse functionality for a termbase. ChangeDate : Returns the last termbase change date. CopyrightText : Returns the copyright text for a particular termbase. DefaultEntryClass : Returns the default entry class for a particular termbase. Definition : Provides programmatic access to a termbase definition. DownloadedCopyrightIcoPath : Returns the path and name of the termbase icon file. DownloadedCopyrightInfoPath : Returns the path and name of the termbase reference document. DownloadedCopyrightSplashPath : Returns the path and name of the termbase splash screen image. Entries : Provides programmatic access to the entries of a termbase. ExpiryDate : Returns the expiry date of the termbase. ExportDefinitions : Provides programmatic access to the export definitions of a termbase. FilterDefinitions : Provides programmatic access to the filter definitions of a termbase. ImportDefinitions : Provides programmatic access to the filter definitions of a termbase. IncompleteEntries : Provides programmatic access to the incomplete entries of a termbase. Information : Provides programmatic access to the termbase information. InputModelDefinitions : Provides programmatic access to the input model definitions of a termbase. IsReadOnly : Returns True or False depending on whether a termbase is read-only or not. LayoutDefinitions : Provides programmatic access to the layout definitions of a termbase. LockedEntries : Provides programmatic access to the locked entries of a termbase. Name : Returns the name of a termbase. Search : Provides programmatic access to the search functionality for a particular termbase. Methods _Reorganise : [For internal use only.] Close : Closes a specified termbase. Delete : Deletes a particular termbase. ExtractToFile : Saves the a termbase to an *.mdb file. GetHomonyms : Retrieves all homonym entries of a particular termbase. Reorganise : Reorganises a specified termbase. Sample Termbases oTbs = oLocalRep.Termbases; Termbase oTb = oTbs[\"Termbase Path\"]; Debug.Write(\"Total number of termbase entries: \" + oTb.Information.TotalNumberOfEntries.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.ImportDefinitions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.ImportDefinitions.html",
    "title": "ImportDefinitions property",
    "keywords": "ImportDefinitions property Name Sdl.MultiTerm.TMO.Interop.Termbase.ImportDefinitions — Provides programmatic access to the filter definitions of a termbase. Type Sdl.MultiTerm.TMO.Interop.ImportDefinitions (read) Index Parameters none Description Import definitions are used to import the content of external files (which are in MultiTerm XML format) into a selected termbase. Import definitions specify a number of import parameters, e.g. whether existing entries should be overwritten, merged, etc. After creation, each termbase is automatically assigned one default import definition. Administrative users (in the case of server-based termbases) can add further import definitions to suit special requirement. The import definitions are physically stored in in the termbase. Via this property you can, for example, return the number of available import definitions, generate a list containing the names of the available import definitions, etc. Sample Termbase oTb = oTbs[\"Termbase Name\"]; ImportDefinitions oImpDefs = oTb.ImportDefinitions; Debug.Write(\"Total number of import definitions in termbase: \" + oImpDefs.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.IncompleteEntries.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.IncompleteEntries.html",
    "title": "IncompleteEntries property",
    "keywords": "IncompleteEntries property Name Sdl.MultiTerm.TMO.Interop.Termbase.IncompleteEntries — Provides programmatic access to the incomplete entries of a termbase. Type Sdl.MultiTerm.TMO.Interop.IncompleteEntries (read) Index Parameters none Description Incomplete entries are those entries that lack a field which is mandatory as per the respective termbase definition. For example, if the termbase definition imposes \"Subject\" as a mandatory field and this field is missing in an entry, it is considered incomplete. You may use this class to, e.g. ascertain the total number of incomplete entries of a termbase. Sample Termbase oTb = oTbs[\"Termbase Name\"]; IncompleteEntries oIncompletes = oTb.IncompleteEntries; Debug.Write(\"Total number of incomplete entries in termbase: \" + oIncompletes.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Information.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Information.html",
    "title": "Information property",
    "keywords": "Information property Name Sdl.MultiTerm.TMO.Interop.Termbase.Information — Provides programmatic access to the termbase information. Type Sdl.MultiTerm.TMO.Interop.TermbaseInformation (read) Index Parameters none Description Applying this property to a termbase object allows you to retrieve various information on the specified termbase such as the termbase creation date, the total number of entries, the physical size of the termbase, the full termbase name, which includes the termbase name as well as the location (i.e. name of the machine on which it is hosted), etc. Sample Termbase oTb = oTbs[\"Termbase Name\"]; TermbaseInformation oInfo = oTb.Information; Debug.Write(\"Termbase creation date: \" + oInfo.CreationDate);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.InputModelDefinitions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.InputModelDefinitions.html",
    "title": "InputModelDefinitions property",
    "keywords": "InputModelDefinitions property Name Sdl.MultiTerm.TMO.Interop.Termbase.InputModelDefinitions — Provides programmatic access to the input model definitions of a termbase. Type Sdl.MultiTerm.TMO.Interop.InputModelDefinitions (read) Index Parameters none Description Input models are a kind of template for creating new entries. Input models offer a way of structuring the input of data into a termbase to facilitate editing and to ensure a consistent entry structure throughout the termbase. After creation, each termbase is automatically assigned one default input model definition. Users can add further input models as required. The input model definitions are physically stored in in the termbase. Via the InputModelDefinitions property you can, for example, return the number of available input model definitions, generate a list that contains the names of the available input model definitions, etc. Sample Termbase oTb = oTbs[\"Termbase Name\"]; InputModelDefinitions oModels = oTb.InputModelDefinitions; Debug.Write(\"Total number of input models in termbase: \" + oModels.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.IsReadOnly.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.IsReadOnly.html",
    "title": "IsReadOnly property",
    "keywords": "IsReadOnly property Name Sdl.MultiTerm.TMO.Interop.Termbase.IsReadOnly — Returns True or False depending on whether a termbase is read-only or not. Type Boolean (read) Index Parameters none Description Termbases can be read-only, i.e. not even an administrative user can get write access, export entries, etc. This is the case for termbases provided by publishing houses such as Langenscheidt. Using this property you can ascertain whether a particular termbase is read-only. If this is the case, you can, for example, disable edit commands of your client application. Sample Termbase oTb = oTbs[\"Termbase Name\"]; bool bReadOnly = oTb.IsReadOnly; if(bReadOnly) { //disable edit button }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.LayoutDefinitions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.LayoutDefinitions.html",
    "title": "LayoutDefinitions property",
    "keywords": "LayoutDefinitions property Name Sdl.MultiTerm.TMO.Interop.Termbase.LayoutDefinitions — Provides programmatic access to the layout definitions of a termbase. Type Sdl.MultiTerm.TMO.Interop.LayoutDefinitions (read) Index Parameters none Description Layout definitions specify the entry layout, i.e. which fields to display, the field order and field formatting. After creation, each termbase is automatically assigned 5 default layout definitions. Users can add further layout definitions to suit special requirement (e.g. adapt the layout to an organisation's corporate identity). The layout definitions are physically stored in in the termbase. Via this property you can, for example, return the number of available layout definitions, generate a list with the names of the available layout definitions, etc. Sample Termbase oTb = oTbs[\"Termbase Name\"]; LayoutDefinitions oLayouts = oTb.LayoutDefinitions; Debug.Write(\"Total number of layout definitions in termbase: \" + oLayouts.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.LockedEntries.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.LockedEntries.html",
    "title": "LockedEntries property",
    "keywords": "LockedEntries property Name Sdl.MultiTerm.TMO.Interop.Termbase.LockedEntries — Provides programmatic access to the locked entries of a termbase. Type Sdl.MultiTerm.TMO.Interop.LockedEntries (read) Index Parameters none Description An entry is locked when a user is in the process of editing it. This is to prevent other users from gaining write-access to the same entry and trying to edit it as well. Via this property you can gain programmatic access to all locked termbase entries, e.g. to retrieve a list of all locked entries. Sample Termbase oTb = oTbs[\"Termbase Name\"]; LockedEntries oLockedEntries = oTb.LockedEntries; Debug.Write(\"Total number of locked entries in termbase: \" + oLockedEntries.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Name.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Name.html",
    "title": "Name property",
    "keywords": "Name property Name Sdl.MultiTerm.TMO.Interop.Termbase.Name — Returns the name of a termbase. Type String (read) Index Parameters none Description This property can be used to return the 'nice' name of a particular termbase. Sample Termbases oTbs = oLocalRep.Termbases; Termbase oTb = oTbs[0]; Debug.Write(\"Termbase nice name: \" + oTb.Name);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Reorganise.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Reorganise.html",
    "title": "Reorganise method",
    "keywords": "Reorganise method Name Sdl.MultiTerm.TMO.Interop.Termbase.Reorganise — Reorganises a specified termbase. Returntype void Parameters none Description To ensure optimum termbase performance termbases need to be reorganised from time to time. During a termbase reorganisation the fuzzy index is updated. The fuzzy index is created automatically by MultiTerm. It makes sure that the best approximation to your search expression is found, even if the search term is misspelled. Termbases are reorganised by default every time you import data. However, you should reorganise your termbase data on a regular basis whether you are carrying out imports or not. Local termbases can be reorganised by the respective user. Server termbases need to be reorganised by the termbase administrator, since exclusive access is required for this operation. A termbase is reorganised by applying the Reorganise method to the corresponding Termbase object. Sample Termbase oTb = oTbs[0]; oTb.Reorganise();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Search.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbase.Search.html",
    "title": "Search property",
    "keywords": "Search property Name Sdl.MultiTerm.TMO.Interop.Termbase.Search — Provides programmatic access to the search functionality for a particular termbase. Type Sdl.MultiTerm.TMO.Interop.TermbaseSearch (read) Index Parameters none Description Searching a termbase involves looking up a search expression in a selected index (i.e. the source index). By applying the Search property to a termbase you can create a search object, which you can then configure and execute to retrieve the search term from the source index. Sample Termbase oTb = oTbs[0]; TermbaseSearch oSearch = oTb.Search; //configure search operation oSearch.MaximumHits=25; oSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; oSearch.SearchExpression=\"starship\"; oSearch.SourceIndex=\"English\"; oSearch.FuzzySearch=true; HitTerms oHits = oSearch.Execute; Debug.Write(\"Number of hits: \" + oHits.Count);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.CanChangeEntryClass.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.CanChangeEntryClass.html",
    "title": "CanChangeEntryClass property",
    "keywords": "CanChangeEntryClass property Name Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.CanChangeEntryClass — Returns whether the currently-logged in user can change entry class values. Type Boolean (read) Index Parameters none Description Via this property you can ascertain whether a user has the permission to change the values of entry classes, e.g. from 'Unspecified' to 'Confidential'. It returns true if the user is allowed to change entry class values, false if not. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; Debug.WriteLine(oPermissions.CanChangeEntryClass);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.CanExport.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.CanExport.html",
    "title": "CanExport property",
    "keywords": "CanExport property Name Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.CanExport — Returns true or false depending on whether the current user has export privileges or not. Type Boolean (read) Index Parameters none Description Via this property you can ascertain whether the currently logged-in user has the right to export entries or not and block any export functionality on the client side if required."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.CanImport.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.CanImport.html",
    "title": "CanImport property",
    "keywords": "CanImport property Name Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.CanImport — Returns true or false depending on whether the current user has import privileges or not. Type Boolean (read) Index Parameters none Description Via this property you can ascertain whether the currently logged-in user has the right to import entries or not and block any export functionality on the client side if required."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.EntryClasses.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.EntryClasses.html",
    "title": "EntryClasses property",
    "keywords": "EntryClasses property Name Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.EntryClasses — Provides programmatic access to the entry classes the currently logged-in user has access to. Type Sdl.MultiTerm.TMO.Interop.EntryClassesPermissions (read) Index Parameters none Description Access to entries can be restricted using entry classes. Via this property you can determine to which entry classes the currently logged-in user has access. Sample //select termbase Termbase oTb = oTbs[\"TRADOS\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; EntryClassesPermissions oClasses = oPermissions.EntryClasses; Debug.WriteLine(\"Number of accessible entry classes: \" + oClasses.Count.ToString()); oServerRep.Disconnect();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.EntryLevelRead.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.EntryLevelRead.html",
    "title": "EntryLevelRead property",
    "keywords": "EntryLevelRead property Name Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.EntryLevelRead — Returns true if the currently logged-in user has read access to entry-level fields. Type Boolean (read) Index Parameters none Description Via this property you can ascertain whether the currently logged-in user has read access to entry-level descriptive fields, i.e. fields that are not associated with a particular index. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; Debug.WriteLine(\"User has read access to entry-level descriptive fields: \" + oPermissions.EntryLevelRead);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.EntryLevelWrite.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.EntryLevelWrite.html",
    "title": "EntryLevelWrite property",
    "keywords": "EntryLevelWrite property Name Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.EntryLevelWrite — Returns true if the currently logged-in user has write access to entry-level fields. Type Boolean (read) Index Parameters none Description Via this property you can ascertain whether the currently logged-in user has write access to entry-level descriptive fields, i.e. fields that are not associated with a particular index. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; Debug.WriteLine(\"User has write access to entry-level descriptive fields: \" + oPermissions.EntryLevelWrite);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.html",
    "title": "Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions class Name Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions — Provides programmatic access to the termbase access permissions of the currently logged-in user. Description Via this class you can, for example, determine whether the currently logged-in user is allowed to change the value of entry classes, ascertain which indexes the user can access etc. One possible application is the generation of a list that contains only the indexes that a user has access to. Properties CanChangeEntryClass : Returns whether the currently-logged in user can change entry class values. CanExport : Returns true or false depending on whether the current user has export privileges or not. CanImport : Returns true or false depending on whether the current user has import privileges or not. EntryClasses : Provides programmatic access to the entry classes the currently logged-in user has access to. EntryLevelRead : Returns true if the currently logged-in user has read access to entry-level fields. EntryLevelWrite : Returns true if the currently logged-in user has write access to entry-level fields. IndexesPermissions : Provides access to the indexes that the currently logged-in user can access. Methods None Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; Debug.WriteLine(oPermissions.CanChangeEntryClass); Debug.WriteLine(\"Number of indexes the user can access: \" + oPermissions.IndexesPermissions.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.IndexesPermissions.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.IndexesPermissions.html",
    "title": "IndexesPermissions property",
    "keywords": "IndexesPermissions property Name Sdl.MultiTerm.TMO.Interop.TermbaseAccessPermissions.IndexesPermissions — Provides access to the indexes that the currently logged-in user can access. Type Sdl.MultiTerm.TMO.Interop.IndexesPermissions (read) Index Parameters none Description Via this class you can, for example, generate a list of all indexes that the currently logged-in user can access. In addition, you can also ascertain whether the user has read/write access to a particular index. Sample //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //retrieve the termbase access permissions of the currently logged-in user TermbaseAccessPermissions oPermissions = oTb.AccessPermissions; IndexesPermissions oIndexes = oPermissions.IndexesPermissions; for(int i=0;i<oIndexes.Count;i++) { Debug.WriteLine(oIndexes[i].Label); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.Direction.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.Direction.html",
    "title": "Direction property",
    "keywords": "Direction property Name Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.Direction — Sets/returns the direction for a browse operation. Type Sdl.MultiTerm.TMO.Interop.MtBrowseDirection (read / write) Index Parameters none Description A browse operation can either be performed in the up or down direction. Usually, a browse operation is done from the first term of an index towards the last term, i.e. normally you will set this parameter to down. Sample TermbaseBrowser tbBrowse = oTb.Browse; tbBrowse.Direction = Sdl.MultiTerm.TMO.Interop.MtBrowseDirection.mtBrowseDown; tbBrowse.MaximumTermCount=1; tbBrowse.SourceIndex=\"English\"; tbBrowse.StartTerm=\"\";"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.EntryID.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.EntryID.html",
    "title": "EntryID property",
    "keywords": "EntryID property Name Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.EntryID — Sets/returns the starting entry id of the browse operation. Type Long (read / write) Index Parameters none"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.Execute.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.Execute.html",
    "title": "Execute method",
    "keywords": "Execute method Name Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.Execute — Executes the browse operation. Returntype Sdl.MultiTerm.TMO.Interop.HitTerms Parameters none Description This method is applied to the Browse object to actually carry out the browse operation. The results of the browse operation (if any) are stored in a HitTerms object, from which the hit term(s) can subsequently be retrieved. You need to set the SourceIndex and MaximumTermCount properties before calling Execute(). Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseBrowser oBrowser = oTb.Browse; oBrowser.Direction = Sdl.MultiTerm.TMO.Interop.MtBrowseDirection.mtBrowseDown; oBrowser.MaximumTermCount = 1; oBrowser.StartTerm=\"\"; oBrowser.SourceIndex=\"English\"; HitTerms oHits = oBrowser.Execute(); Debug.Write(oHits[0].Text);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.html",
    "title": "Sdl.MultiTerm.TMO.Interop.TermbaseBrowser class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.TermbaseBrowser class Name Sdl.MultiTerm.TMO.Interop.TermbaseBrowser — Provides access to the browse functionality for a termbase. Description Browsing a termbase involves navigating to the next or previous entry (or entries) starting from a particular position in the browse index (i.e. the currently selected source index). This class allows you to implement browse functionality for your MultiTerm client application. A browse operation requires various parameters, such as the browse direction (up/down), the browse index (language), the maximum number of terms to retrieve with a browse operation, etc. Properties Direction : Sets/returns the direction for a browse operation. EntryID : Sets/returns the starting entry id of the browse operation. MaximumTermCount : Sets/returns the maximum hits allowed for a browse operation. SourceIndex : Sets/returns the browse index. StartTerm : Sets/returns the start term for the browse operation. Methods Execute : Executes the browse operation. Sample TermbaseBrowser tbBrowse = oTb.Browse; tbBrowse.Direction = Sdl.MultiTerm.TMO.Interop.MtBrowseDirection.mtBrowseDown; tbBrowse.SourceIndex=\"English\"; tbBrowse.StartTerm=\"\"; tbBrowse.MaximumTermCount=1; HitTerms oHits = tbBrowse.Execute(); Debug.Write(\"Browse hit: \" + oHits[0].Text);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.MaximumTermCount.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.MaximumTermCount.html",
    "title": "MaximumTermCount property",
    "keywords": "MaximumTermCount property Name Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.MaximumTermCount — Sets/returns the maximum hits allowed for a browse operation. Type Long (read / write) Index Parameters none Description This property is used to determine the maximum number of hits for a browse operation. To browse to the next or previous term you would set this parameter to 1. If you want to retrieve a number of terms from the current position, you would set this parameter to the corresponding number. For example, to retrieve the next 5 terms you would set this property to 5. Sample TermbaseBrowser tbBrowse = oTb.Browse; tbBrowse.MaximumTermCount=1; tbBrowse.Direction = Sdl.MultiTerm.TMO.Interop.MtBrowseDirection.mtBrowseDown; tbBrowse.SourceIndex=\"English\"; tbBrowse.StartTerm=\"\";"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.SourceIndex.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.SourceIndex.html",
    "title": "SourceIndex property",
    "keywords": "SourceIndex property Name Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.SourceIndex — Sets/returns the browse index. Type String (read / write) Index Parameters none Description A browse operation is always performed in a particular index (language). Use this property to set the browse index to the required language, e.g. 'English'. Sample TermbaseBrowser tbBrowse = oTb.Browse; tbBrowse.SourceIndex=\"English\"; tbBrowse.Direction = Sdl.MultiTerm.TMO.Interop.MtBrowseDirection.mtBrowseDown; tbBrowse.StartTerm=\"\"; tbBrowse.MaximumTermCount=1;"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.StartTerm.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.StartTerm.html",
    "title": "StartTerm property",
    "keywords": "StartTerm property Name Sdl.MultiTerm.TMO.Interop.TermbaseBrowser.StartTerm — Sets/returns the start term for the browse operation. Type String (read / write) Index Parameters none Description A browse operation is executed in a specified termbase index (i.e. language) starting from a particular term. For example, if the start term is \"apple\", the following term that is retrieved through the browse operation might be \"apricot\" or \"banana\". If \"network\" has been specified as the start term, the browse operation might retrieve the term \"ODBC\", etc. Via the StartTerm property you determine the position of the index (i.e. the term) from which the browse operation should take place. Instead of an entire term you may also specify only part of a term or just a letter, e.g. \"a\". If this parameter is not specified an empty value (\"\") will be used by default. This means that the browse operation will start from the very beginning of the index. If the specified term does not exist in the termbase, the alphabetically nearest term is used as a starting point instead. Sample TermbaseBrowser tbBrowse = oTb.Browse; tbBrowse.StartTerm=\"\"; tbBrowse.Direction = Sdl.MultiTerm.TMO.Interop.MtBrowseDirection.mtBrowseDown; tbBrowse.SourceIndex=\"English\"; tbBrowse.MaximumTermCount=1;"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseDefinition._Schema.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseDefinition._Schema.html",
    "title": "_Schema property",
    "keywords": "_Schema property Name Sdl.MultiTerm.TMO.Interop.TermbaseDefinition._Schema — Returns the schema for a termbase definition. Type String (read) Index Parameters none Description A termbase definition is basically a schema, in which the fields (i.e. the elements) and the hierarchy of the field is specified. Via this property you can retrieve the schema for a particular termbase definition. Sample Sdl.MultiTerm.TMO.Interop.TermbaseDefinition oDefinition = myTermbase.Definition; Debug.WriteLine(oDefinition._Schema);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.Fields.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.Fields.html",
    "title": "Fields property",
    "keywords": "Fields property Name Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.Fields — Provides access to entry-level fields. Type Sdl.MultiTerm.TMO.Interop.DescriptiveFields (read) Index Parameters none Description Entry-level fields refer to the whole entry as such. Typically those are fields like \"Subject\", \"Project\", \"Department\", etc. Via this class you can programmatically access entry-level fields defined in the termbase definition. Sample Termbases oTbs = oLocalRep.Termbases; Termbase oTb = oTbs[\"Termbase name\"]; TermbaseDefinition tbDef = oTb.Definition; Debug.Write(\"Number of entry-level fields in definition: \" + tbDef.Fields.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.html",
    "title": "Sdl.MultiTerm.TMO.Interop.TermbaseDefinition class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.TermbaseDefinition class Name Sdl.MultiTerm.TMO.Interop.TermbaseDefinition — Provides programmatic access to the termbase definition. Description A termbase definition contains the indexes (i.e. languages) and descriptive fields of a termbase as well as information on the entry structure (i.e. the field hierarchy). The TermbaseDefinition class provides programmatic access to the definition of a particular termbase. Via this class you can, for example, retrieve information such as the number of indexes and descriptive fields contained in the termbase definition, the field labels, etc. The sample below shows how to loop through all indexes in a termbase definition and how to output the index label and locale. Moreover, the sample script loops through all descriptive fields (entry-level, index-level, and term-level fields) and returns the respective field labels. Properties _Schema : Returns the schema for a termbase definition. Fields : Provides access to entry-level fields. Indexes : Provides programmatic access to the indexes of a termbase definition. Methods Save : Saves the selected termbase definition to an external file. StartWizard : Calls the Termbase Definition Wizard. Sample Termbases oTbs = oLocalRep.Termbases; Termbase oTb = oTbs[\"Termbase Name\"]; TermbaseDefinition tbDef = oTb.Definition; Debug.Write(\"Number of entry-level fields in definition: \" + tbDef.Fields.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.Indexes.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.Indexes.html",
    "title": "Indexes property",
    "keywords": "Indexes property Name Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.Indexes — Provides programmatic access to the indexes of a termbase definition. Type Sdl.MultiTerm.TMO.Interop.Indexes (read) Index Parameters none Description Each termbase definition contains at least one index (i.e. a language). The termbase creator/administrator adds the indexes from a list of available languages when setting up (or editing) the termbase definition. Each index is automatically assigned a locale (e.g. \"EN-US\"). The termbase creator/administrator can assign a custom label to each index, by which it is uniquely identified. Via this class you can, for example, you can retrieve index labels and locales. Sample Termbases oTbs = oLocalRep.Termbases; Termbase oTb = oTbs[0]; TermbaseDefinition tbDef = oTb.Definition; Debug.Write(\"Number of index fields in definition: \" + tbDef.Indexes.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.Save.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.Save.html",
    "title": "Save method",
    "keywords": "Save method Name Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.Save — Saves the selected termbase definition to an external file. Returntype void Parameters FileName (String) Description Applying this method to a TermbaseDefinition object saves the definition of the currently selected termbase to an external (*.xdt) file. The *.xdt file can then be used as a template to create another termbase. This method requires the full name and path of the external definition file as string parameters. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseDefinition tbDef = oTb.Definition; tbDef.Save(\"c:\\\\temp\\\\tb_def.xdt\"); Debug.Write(\"Termbase definition saved successfully.\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.StartWizard.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.StartWizard.html",
    "title": "StartWizard method",
    "keywords": "StartWizard method Name Sdl.MultiTerm.TMO.Interop.TermbaseDefinition.StartWizard — Calls the Termbase Definition Wizard. Returntype void Parameters none Description Applying this method to a TermbaseDefinition object will call up the Termbase Definition Wizard, which allows you to modify the selected termbase definition in the wizard GUI. Note that for server termbases, administrator access is required to edit a termbase definition. Sample Termbase oTb = oTbs[0]; TermbaseDefinition tbDef = oTb.Definition; tbDef.StartWizard();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.CreationDate.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.CreationDate.html",
    "title": "CreationDate property",
    "keywords": "CreationDate property Name Sdl.MultiTerm.TMO.Interop.TermbaseInformation.CreationDate — Returns the termbase creation date. Type String (read) Index Parameters none Description This property is used to retrieve the creation date of a specified termbase. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseInformation tbInfo = oTb.Information; Debug.Write(\"Termbase creation date: \" + tbInfo.CreationDate);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.Description.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.Description.html",
    "title": "Description property",
    "keywords": "Description property Name Sdl.MultiTerm.TMO.Interop.TermbaseInformation.Description — Returns the termbase description. Type String (read) Index Parameters none Description The termbase creator/administrator can enter an optional descriptive string when setting up a termbase to provide further information for the termbase user. This property is used to return the termbase description (if any)."
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.html",
    "title": "Sdl.MultiTerm.TMO.Interop.TermbaseInformation class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.TermbaseInformation class Name Sdl.MultiTerm.TMO.Interop.TermbaseInformation — Provides programmatic access to a set of termbase information. Description This class allows you to retrieve various items of information on a particular termbase, e.g. the termbase size, full name, total number of entries, etc. You can use this class, for example, to display all relevant termbase information in a termbase information frame whenever a user selects a termbase name from a list. Properties CreationDate : Returns the termbase creation date. Description : Returns the termbase description. Name : Returns the (nice) name of a termbase. NumberOfEntriesInIndex : Returns the number of terms contained in a specified index. Size : Returns the size of the termbase in MB. TotalNumberOfEntries : Returns the total entry count for the specified termbase. Methods Refresh : Updates the termbase information. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseInformation tbInfo = oTb.Information; Debug.Write(\"Termbase description: \" + tbInfo.Description);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.Name.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.Name.html",
    "title": "Name property",
    "keywords": "Name property Name Sdl.MultiTerm.TMO.Interop.TermbaseInformation.Name — Returns the (nice) name of a termbase. Type String (read) Index Parameters none Description This property is used to retrieve the name of the termbase. Sample Termbase oTb = oTbs[0]; TermbaseInformation tbInfo = oTb.Information; Debug.Write(\"Termbase name: \" + tbInfo.Name);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.NumberOfEntriesInIndex.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.NumberOfEntriesInIndex.html",
    "title": "NumberOfEntriesInIndex property",
    "keywords": "NumberOfEntriesInIndex property Name Sdl.MultiTerm.TMO.Interop.TermbaseInformation.NumberOfEntriesInIndex — Returns the number of terms contained in a specified index. Type Long (read) Index Parameters Index (String) Description This property allows you to ascertain the number of terms of a particular index. Note that the term count of an index can be bigger than the total termbase entry count, as indexes can contain a number of synonyms. The index name has to be provided as string parameter. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseInformation tbInfo = oTb.Information; Debug.Write(\"Number of terms in the English index: \" + tbInfo.get_NumberOfEntriesInIndex(\"English\"));"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.Refresh.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.Refresh.html",
    "title": "Refresh method",
    "keywords": "Refresh method Name Sdl.MultiTerm.TMO.Interop.TermbaseInformation.Refresh — Updates the termbase information. Returntype void Parameters none Description This method is useful to make sure that the user always sees the most up-to-date termbase information, e.g. to make any additions to the termbase reflect in the total termbase entry count. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseInformation tbInfo = oTb.Information; tbInfo.Refresh();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.Size.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.Size.html",
    "title": "Size property",
    "keywords": "Size property Name Sdl.MultiTerm.TMO.Interop.TermbaseInformation.Size — Returns the size of the termbase in MB. Type String (read) Index Parameters none Description This property is used to retrieve the termbase size, i.e. the amount of physical hard disk space occupied by the termbase. Note: This property does not apply to termbases hosted on Oracle backends. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseInformation tbInfo = oTb.Information; Debug.Write(\"Termbase size in MB: \" + tbInfo.Size.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.TotalNumberOfEntries.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseInformation.TotalNumberOfEntries.html",
    "title": "TotalNumberOfEntries property",
    "keywords": "TotalNumberOfEntries property Name Sdl.MultiTerm.TMO.Interop.TermbaseInformation.TotalNumberOfEntries — Returns the total entry count for the specified termbase. Type Long (read) Index Parameters none Description This property is used to retrieve the total number of entries contained in a specific termbase. Sample Termbase oTb = oTbs[\"Termbase name\"]; TermbaseInformation tbInfo = oTb.Information; Debug.Write(\"Total number of termbase entries: \" + tbInfo.TotalNumberOfEntries.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.ChangePassword.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.ChangePassword.html",
    "title": "ChangePassword method",
    "keywords": "ChangePassword method Name Sdl.MultiTerm.TMO.Interop.TermbaseRepository.ChangePassword — Changes the password of the currently logged-in user. Returntype void Parameters NewPassword (String) OldPassword (String, optional ) Description Applying this method will change the password for the currently logged-in user. It requires the old password and the new password as string parameters. You would use this method if you wanted to implement a function in your client application that allows users to change their password themselves rather than having to contact the MultiTerm administrator to do this for them. Passwords are stored in the database backend in encrypted format. Sample oServRep.Connect(\"username\", \"oldpassword\"); oServRep.ChangePassword(\"oldpassword\", \"newpassword\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Connect.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Connect.html",
    "title": "Connect method",
    "keywords": "Connect method Name Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Connect — Connects to a MultiTerm Server. Returntype Sdl.MultiTerm.TMO.Interop.MtUserType Parameters UserId (String) Password (String) Description Applying this method to a termbase repository will establish a connection to the corresponding repository, allowing you to gain access to the termbases that you are allowed to see with your current login. This method requires the user name and password as string parameters. To access file based termbases, through the local repository, set user and password to \"\" (empty string). Sample Sdl.MultiTerm.TMO.Interop.Application oMt = new Sdl.MultiTerm.TMO.Interop.ApplicationClass(); TermbaseRepository oServRep = oMt.ServerRepository; oServRep.Location = \"http://localhost\"; oServRep.Connect(\"username\", \"password\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.DatabaseType.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.DatabaseType.html",
    "title": "DatabaseType property",
    "keywords": "DatabaseType property Name Sdl.MultiTerm.TMO.Interop.TermbaseRepository.DatabaseType — Returns the database backend type for the current connection. Type Sdl.MultiTerm.TMO.Interop.MtDatabaseType (read / write) Index Parameters none Description This property returns mtJET if a local termbase repository is used, mtSQL for Microsoft SQL Server backends and mtOracle for Oracle backends. Sample MessageBox.Show(oServRep.DatabaseType.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Disconnect.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Disconnect.html",
    "title": "Disconnect method",
    "keywords": "Disconnect method Name Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Disconnect — Disconnects from a MultiTerm Server. Returntype void Parameters none Description Applying this method to a termbase repository will disconnect the current user from the MultiTerm Server. This method requires no parameters. It should be called, e.g. when closing the client application. The corresponding login will then be deleted on the MultiTerm server. Sample Sdl.MultiTerm.TMO.Interop.Application oMt = new Sdl.MultiTerm.TMO.Interop.ApplicationClass(); TermbaseRepository oServRep = oMt.ServerRepository; oServRep.Location = \"http://localhost\"; oServRep.Connect(\"guest\", \"guest\"); oServRep.Disconnect();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.html",
    "title": "Sdl.MultiTerm.TMO.Interop.TermbaseRepository class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.TermbaseRepository class Name Sdl.MultiTerm.TMO.Interop.TermbaseRepository — Provides access to the termbase repositories. Description A MultiTerm client application has access to two termbase repositories: a local repository (your hard disk) and a (remote) server repository. The local repository provides access to all termbases stored locally in *.sdltb format, whereas the server repository contains termbases hosted on a remote server in Oracle or SQL Server database format. You can access the list of termbases in a server repository once you connected to it. The local repository, on the other hand, is initially empty and you have to add termbases to work with them. It will not remember a list of previoulsly used *.sdltb files, that's the responsibility of the application using the API. Properties DatabaseType : Returns the database backend type for the current connection. IsConnected : Indicates whether a connection has been established successfully. IsRemote : Returns whether a connection is remote. Location : Sets/returns the location of a termbase server. Termbases : Provides access to the termbases contained in a local or server repository. Methods ChangePassword : Changes the password of the currently logged-in user. Connect : Connects to a MultiTerm Server. Disconnect : Disconnects from a MultiTerm Server. Sample Sdl.MultiTerm.TMO.Interop.Application oMt = new Sdl.MultiTerm.TMO.Interop.ApplicationClass(); TermbaseRepository oLocalRep = oMt.LocalRepository; TermbaseRepository oServerRep = oMt.ServerRepository;"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.IsConnected.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.IsConnected.html",
    "title": "IsConnected property",
    "keywords": "IsConnected property Name Sdl.MultiTerm.TMO.Interop.TermbaseRepository.IsConnected — Indicates whether a connection has been established successfully. Type Boolean (read) Index Parameters none Description This property returns True or False depending on whether a connection to a termbase server has been established successfully or not. You can use this property to ascertain whether the login was successful and output a corresponding message if this is not the case. Sample if(oServRep.IsConnected) { MessageBox.Show(\"Login successful\"); } else { MessageBox.Show(\"Login failed.\"); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.IsRemote.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.IsRemote.html",
    "title": "IsRemote property",
    "keywords": "IsRemote property Name Sdl.MultiTerm.TMO.Interop.TermbaseRepository.IsRemote — Returns whether a connection is remote. Type Boolean (read) Index Parameters none Description This property is used to check whether a connection is remote or not. For connections to a local termbase repository this property will return the value False. You can use this property, for example, to check whether a user name and password is required for a connection, which is not the case for local connections. Sample MessageBox.Show(\"Is remote: \" + oTbRep.IsRemote);"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Location.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Location.html",
    "title": "Location property",
    "keywords": "Location property Name Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Location — Sets/returns the location of a termbase server. Type String (read / write) Index Parameters none Description The location of a MultiTerm server corresponds to the name (or IP address) of the server machine. This parameter is required, so that the client application 'knows' to which server a connection should be established. Examples: .Location = \"http://serv0234\" or .Location = \"http://www.multiterm.com\" or .Location = \"http://216.116.51.53\" For the local repository, this property contains the name of the local machine and is not used internally. Sample TermbaseRepository oServRep = oMt.ServerRepository; oServRep.Location = \"http://ServerName\"; oServRep.Connect(\"username\", \"password\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Protocol.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Protocol.html",
    "title": "Protocol property",
    "keywords": "Protocol property Name Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Protocol — Provides access to the protocol types that can be used to connect to a MultiTerm server. Type Sdl.MultiTerm.TMO.Interop.MtCommunicationType (read / write) Index Parameters none Description Connections to a remote termbase server can be made through the DCOM protocol (LAN environments) or using the SOAP protocol (WAN scenarios). This enumerator contains the possible protocol type values used when providing the information required to connect to a termbase server. Sample TermbaseRepository oServRep = oMt.ServerRepository; oServRep.Location =\"ServerName\"; oServRep.Protocol = Sdl.MultiTerm.TMO.Interop.MtCommunicationType.mtDCOM; oServRep.Connect(\"username\", \"password\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Termbases.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Termbases.html",
    "title": "Termbases property",
    "keywords": "Termbases property Name Sdl.MultiTerm.TMO.Interop.TermbaseRepository.Termbases — Provides access to the termbases contained in a local or server repository. Type Sdl.MultiTerm.TMO.Interop.Termbases (read) Index Parameters none Description You can use this class, e.g. to generate a list of available termbases, so that the client user can choose one or several termbases to access. Sample Termbases oTbs = oServRep.Termbases; for(int i=0;i<oTbs.Count;i++) { Debug.WriteLine(\"Termbase name: \" + oTbs[i].Name); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbases.Add.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbases.Add.html",
    "title": "Add method",
    "keywords": "Add method Name Sdl.MultiTerm.TMO.Interop.Termbases.Add — Allows you to access local termbases programmatically. Returntype void Parameters Path (String) Name (String) - deprecated (for legacy reasons only) Description (String) - deprecated (for legacy reasons only) Description This method can only be applied to a local termbase repository. It is the programmatic equivalent of the \"Open\" command in MultiTerm. It is used to provide access to local termbases stored in JET format (*.sdltb) via the local termbase repository. This method requires the full path of the *.sdltb file. It is then available within the Termbases collection, and can be access via its full path as its name. Sample TermbaseRepository oLocalRep = oMt.LocalRepository; oLocalRep.Connect(\"\", \"\"); Termbases oTbs = oLocalRep.Termbases; oTbs.Add(\"C:\\\\temp\\\\mytermbase.sdltb\", \"\", \"\"); oTB = oTbs.Item(\"C:\\\\temp\\\\mytermbase.sdltb\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbases.Count.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbases.Count.html",
    "title": "Count property",
    "keywords": "Count property Name Sdl.MultiTerm.TMO.Interop.Termbases.Count — Returns the number of available termbases. Type Long (read) Index Parameters none Description This property is used to determine the number of termbases available in either the local or the server termbase repository. Note that for server termbases it will only return the number of termbases you have access to with your current login. Sample Termbases oTbs = oServRep.Termbases; MessageBox.Show(oTbs.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbases.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbases.html",
    "title": "Sdl.MultiTerm.TMO.Interop.Termbases class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.Termbases class Name Sdl.MultiTerm.TMO.Interop.Termbases — Provides programmatic access to a termbase collection. Description This class allows you to retrieve all termbases of your local termbase repository or the termbases from the server repository that you are allowed to gain access to with your login. You can use this class to, for example, generate a list of all termbases available in a particular repository. Properties Count : Returns the number of available termbases. Item : Provides programmatic access to a specific termbase. Methods Add : Allows you to add existing file based termbases to the local repository programmatically. New : Creates a new termbase programmatically. Refresh : Refreshes a termbase collection. Remove : Removes a termbase from a local termbase collection. Sample Termbases oTbs = oServRep.Termbases; for(int i=0;i<oTbs.Count;i++) { Debug.WriteLine(\"Termbase name: \" + oTbs[i].Name); }"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbases.Item.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbases.Item.html",
    "title": "Item property",
    "keywords": "Item property Name Sdl.MultiTerm.TMO.Interop.Termbases.Item — Provides programmatic access to a specific termbase. Type Sdl.MultiTerm.TMO.Interop.Termbase (read) Index Parameters Index (Variant) Description This property allows you to gain access to a particular termbase from the repository. There are three possible value types for the parameter The full path for a file based termbase from the local repository: tb[\"C:\\TestData\\Sample.sdltb\"] The name for a termbase from the server repository: tb[\"SampleTermbase\"] The position in the list for either: tb[0]"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbases.New.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbases.New.html",
    "title": "New method",
    "keywords": "New method Name Sdl.MultiTerm.TMO.Interop.Termbases.New — Creates a new termbase programmatically. Returntype Sdl.MultiTerm.TMO.Interop.Termbase Parameters TermbaseName (String, optional ) Description (String, optional ) TermbaseDefinitionFile (String, optional ) TermbaseDestinationFile (String, optional ) Description Applying this method to a (local or server) repository creates a new termbase. This method requires the name of the new termbase, an optional description as well as the path and name of the termbase definition file (*.xdt) as parameters. In addition, local termbases require the path to the created .sdltb file. If you do not specify an xdt file, or an empty string, an interactive wizard is started to collect the details. Note that for creating server termbases an administrative login is required. Sample TermbaseRepository oLocalRep = oMt.LocalRepository; oLocalRep.Connect(\"\", \"\"); Termbases oTbs = oLocalRep.Termbases; oTbs.New(\"New Termbase File Name\", \"Optional Description\", \"c:\\\\temp\\\\test.xdt\",\"c:\\\\temp\\\\test.sdltb\"); MessageBox.Show(\"Termbase created successfully.\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbases.Refresh.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbases.Refresh.html",
    "title": "Refresh method",
    "keywords": "Refresh method Name Sdl.MultiTerm.TMO.Interop.Termbases.Refresh — Refreshes a termbase collection. Returntype void Parameters none Description This method clears the termbases cache. For example, it may be useful to call this method after a new termbase has been added to update the corresponding termbase list on the client side. Sample Termbases oTbs = oLocalRep.Termbases; oTbs.Refresh();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbases.Remove.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.Termbases.Remove.html",
    "title": "Remove method",
    "keywords": "Remove method This method is no longer supported. Name Sdl.MultiTerm.TMO.Interop.Termbases.Remove — Removes a termbase from a local termbase collection. Returntype void Parameters Termbase ( Sdl.MultiTerm.TMO.Interop.Termbase ) DestinationPath (String) Description Applying this method removes a specified termbase from a local termbase collection without however deleting the physical termbase (*.mdb) file. It is the programmatic equivalent of the \"Detach\" command in MultiTerm Workstation. The method requires the termbase object to remove and the path to which a copy (i.e. an*. mdb file) of the removed termbase should be saved Sample TermbaseRepository oLocalRep = oMt.LocalRepository; oLocalRep.Connect(\"\", \"\"); Termbases oTbs = oLocalRep.Termbases; Termbase oTb = oTbs[\"New Termbase Name\"]; oTbs.Remove(oTb, \"c:\\\\temp\\\\\"); MessageBox.Show(\"Termbase removed successfully.\");"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.Advise.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.Advise.html",
    "title": "Advise method",
    "keywords": "Advise method Name Sdl.MultiTerm.TMO.Interop.TermbaseSearch.Advise — [For internal use only.] Returntype void Parameters AdvancedSearchObject ( Sdl.MultiTerm.TMO.Interop.MultiSearch )"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.CancelSearch.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.CancelSearch.html",
    "title": "CancelSearch method",
    "keywords": "CancelSearch method Name Sdl.MultiTerm.TMO.Interop.TermbaseSearch.CancelSearch — Cancels the search operation. Returntype void Parameters none Description Sample TermbaseSearch tbSearch = oTb.Search; tbSearch.SourceIndex=\"English\"; tbSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; tbSearch.SearchExpression=\"window\"; tbSearch.MaximumHits=10; tbSearch.CancelSearch();"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.Direction.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.Direction.html",
    "title": "Direction property",
    "keywords": "Direction property Name Sdl.MultiTerm.TMO.Interop.TermbaseSearch.Direction — Sets/returns the search direction. Type Sdl.MultiTerm.TMO.Interop.MtSearchDirection (read / write) Index Parameters none Description The search direction can be either up or down. The search direction value will usually be 'down', as a search is normally carried out from the start to and end of an index. Sample TermbaseSearch tbSearch = oTb.Search; tbSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; tbSearch.SearchExpression=\"window\"; tbSearch.MaximumHits=10; tbSearch.SourceIndex=\"English\";"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.Execute.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.Execute.html",
    "title": "Execute method",
    "keywords": "Execute method Name Sdl.MultiTerm.TMO.Interop.TermbaseSearch.Execute — Executes a search operation and stores the results in a HitTerms object. Returntype Sdl.MultiTerm.TMO.Interop.HitTerms Parameters none Description By applying the Execute method to a termbase search object, the search is actually carried out. This method is also used to create a HitTerms object, from which the search results (hit terms) can be retrieved. You have to specify at least the source index and the search expression. Sample TermbaseSearch tbSearch = oTb.Search; tbSearch.SourceIndex=\"English\"; tbSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; tbSearch.SearchExpression=\"Abla�schraube\"; tbSearch.MaximumHits=10; HitTerms oHits = tbSearch.Execute(); Debug.Write(\"Number of hits found: \" + oHits.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.FuzzySearch.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.FuzzySearch.html",
    "title": "FuzzySearch property",
    "keywords": "FuzzySearch property Name Sdl.MultiTerm.TMO.Interop.TermbaseSearch.FuzzySearch — Sets/returns whether the termbase search should be a fuzzy search. Type Boolean (read / write) Index Parameters none Description Set this property to true, if you want to do a fuzzy search. The default value if false, i.e. by default no fuzzy search is performed. Note: You could also put a hash sign '#' in front of the search expression to trigger a fuzzy search. This is a legacy from the old MultiTerm 5, in which a hash sign was used to indicate whether a search operation should be carried out as a fuzzy search. Sample TermbaseSearch tbSearch = oTb.Search; tbSearch.FuzzySearch=true; tbSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; tbSearch.SearchExpression=\"window\"; tbSearch.MaximumHits=10; tbSearch.SourceIndex=\"English\";"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.html",
    "title": "Sdl.MultiTerm.TMO.Interop.TermbaseSearch class",
    "keywords": "Sdl.MultiTerm.TMO.Interop.TermbaseSearch class Name Sdl.MultiTerm.TMO.Interop.TermbaseSearch — Provides programmatic access to the MultiTerm search functionality. Description Searching a termbase involves retrieving one or more hit terms from the search index (i.e. the currently selected source index of a particular termbase). The search result yields terms from this index only. The search expression can be a full term, e.g. \"windows\", it can be part of an existing term, e.g. \"win\", or it could be a search string with wildcards, e.g. \"*window*\". MultiTerm also supports different types of search, such as an exact search to look up an exact search term and the so-called fuzzy search, which returns the best approximation(s) to a search term. When doing a termbase search you need to provide various parameters such as the search term, the maximum number of hit terms, the search index, and the search direction (up or down). The result of a search needs to be stored in a HitTerms object. This object is created by applying the Execute method to the termbase search. From the HitTerms object you can then retrieve various information such as the number of hits found, the hit terms themselves, etc. Properties Direction : Sets/returns the search direction. FuzzySearch : Sets/returns whether the termbase search should be a fuzzy search. LastTerm : Sets the last term from which a search operation should be started. MaximumHits : Sets/returns the maximum hit number. SearchExistTarget : Sets/returns whether only terms with one or more target terms should be taken into consideration. SearchExpression : Sets/returns the search expression. SourceIndex : Sets/returns the search index. StartingEntryID : Sets/returns the entry id from which the search should be started. TargetIndex : Sets/returns the search target index. Methods Advise : [For internal use only.] CancelSearch : Cancels the search operation. Execute : Executes a search operation and stores the results in a HitTerms object. Unadvise : [For internal use only] Sample TermbaseSearch tbSearch = oTb.Search; tbSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; tbSearch.SearchExpression=\"a*\"; tbSearch.MaximumHits=10; tbSearch.SourceIndex=\"English\"; HitTerms oHits = tbSearch.Execute(); Debug.Write(\"Number of hits found: \" + oHits.Count.ToString());"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.LastTerm.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.LastTerm.html",
    "title": "LastTerm property",
    "keywords": "LastTerm property Name Sdl.MultiTerm.TMO.Interop.TermbaseSearch.LastTerm — Sets the last term from which a search operation should be started. Type String (write) Index Parameters none Description Suppose you would like to search for the term 'window'. Afterwards you would like to search for all terms beginning with window that come after the term 'window' itself. In this case you can use this property to set 'window' as the last term from which the search should be started. Sample TermbaseSearch tbSearch = oTb.Search; tbSearch.LastTerm = \"window\"; tbSearch.SearchExpression=\"window*\"; tbSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; tbSearch.MaximumHits=10; tbSearch.SourceIndex=\"English\";"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.MaximumHits.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.MaximumHits.html",
    "title": "MaximumHits property",
    "keywords": "MaximumHits property Name Sdl.MultiTerm.TMO.Interop.TermbaseSearch.MaximumHits — Sets/returns the maximum hit number. Type Long (read / write) Index Parameters none Description This property is used to limit the amount of hit terms returned by a search operation. If, for example, there are 10 matching entries in the termbase, but this property has been set to 5, only the first 5 hits will be returned. Sample TermbaseSearch tbSearch = oTb.Search; tbSearch.MaximumHits=10; tbSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; tbSearch.SearchExpression=\"window\"; tbSearch.SourceIndex=\"English\";"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.SearchExistTarget.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.SearchExistTarget.html",
    "title": "SearchExistTarget property",
    "keywords": "SearchExistTarget property Name Sdl.MultiTerm.TMO.Interop.TermbaseSearch.SearchExistTarget — Sets/returns whether only terms with one or more target terms should be taken into consideration. Type Boolean (read / write) Index Parameters none Description Set this property to true if you want the hit list to only contain terms with at least one corresponding target term. This property basically acts like a filter that singles out entries that have one or more target terms. The default value is false, i.e. usually also hit terms without a target term are taken into account. Sample TermbaseSearch tbSearch = oTb.Search; tbSearch.SearchExistTarget=true; tbSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; tbSearch.SearchExpression=\"window\"; tbSearch.MaximumHits=10; tbSearch.SourceIndex=\"English\";"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.SearchExpression.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.SearchExpression.html",
    "title": "SearchExpression property",
    "keywords": "SearchExpression property Name Sdl.MultiTerm.TMO.Interop.TermbaseSearch.SearchExpression — Sets/returns the search expression. Type String (read / write) Index Parameters none Description This property sets the search terms used for a search operation. If this parameter is left unspecified, a blank string (\"\") will be used, which means that any term will be retrieved from the termbase. Note: MultiTerm allows to use the asterisk (*) as a placeholder in search operations. Moreover, you can also carry out a character range search. To search for terms within a specific character ranges, use square brackets, e.g. \"[a-b]\". Sample TermbaseSearch tbSearch = oTb.Search; tbSearch.SearchExpression=\"window\"; tbSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; tbSearch.MaximumHits=10; tbSearch.SourceIndex=\"English\";"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.SourceIndex.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.SourceIndex.html",
    "title": "SourceIndex property",
    "keywords": "SourceIndex property Name Sdl.MultiTerm.TMO.Interop.TermbaseSearch.SourceIndex — Sets/returns the search index. Type String (read / write) Index Parameters none Description A termbase search is carried out in a particular index. Via this property you can determine the index (language) in which the search should be performed, e.g. 'English'. Sample TermbaseSearch tbSearch = oTb.Search; tbSearch.SourceIndex=\"English\"; tbSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; tbSearch.SearchExpression=\"window\"; tbSearch.MaximumHits=10;"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.StartingEntryID.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.StartingEntryID.html",
    "title": "StartingEntryID property",
    "keywords": "StartingEntryID property Name Sdl.MultiTerm.TMO.Interop.TermbaseSearch.StartingEntryID — Sets/returns the entry id from which the search should be started. Type Long (read / write) Index Parameters none Description Suppose you would like the termbase search to start from the entry with the id '100'. In this case, set this property to the value 100. Sample TermbaseSearch tbSearch = oTb.Search; tbSearch.StartingEntryID=100; tbSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; tbSearch.SearchExpression=\"Abla�schraube\"; tbSearch.MaximumHits=10; tbSearch.SourceIndex=\"English\";"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.TargetIndex.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.TargetIndex.html",
    "title": "TargetIndex property",
    "keywords": "TargetIndex property Name Sdl.MultiTerm.TMO.Interop.TermbaseSearch.TargetIndex — Sets/returns the search target index. Type String (read / write) Index Parameters none Description This property can be used to set the target index for a search operation. This parameter is optional, it only plays a role when the SearchExistTarget property is set to true. To retrieve the target term for a (source) hit term, you need to go inside the XML stream of the entry content and retrieve the target index from there. Sample TermbaseSearch tbSearch = oTb.Search; tbSearch.TargetIndex =\"German\"; tbSearch.SourceIndex=\"English\"; tbSearch.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; tbSearch.SearchExpression=\"window\"; tbSearch.MaximumHits=10;"
  },
  "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.Unadvise.html": {
    "href": "apiconcepts/Sdk/Sdl.MultiTerm.TMO.Interop.TermbaseSearch.Unadvise.html",
    "title": "Unadvise method",
    "keywords": "Unadvise method Name Sdl.MultiTerm.TMO.Interop.TermbaseSearch.Unadvise — [For internal use only] Returntype void Parameters none"
  },
  "apiconcepts/searching.html": {
    "href": "apiconcepts/searching.html",
    "title": "Searching a Termbase",
    "keywords": "Searching a Termbase The TermbaseSearch class allows you to programmatically perform a search in a particular termbase. When searching a termbase you need to provide a number of parameters such as the search term, the search index, the maximum number of terms that the search should yield, etc. Below you find a sample code that shows you how to set the required parameters for a fuzzy search: //select termbase Termbase oTb = oTbs[\"Termbase name\"]; //set search parameters TermbaseSearch search = oTb.Search; search.Direction = Sdl.MultiTerm.TMO.Interop.MtSearchDirection.mtSearchDown; search.MaximumHits = 10; search.FuzzySearch = true; search.SearchExpression = \"search term\"; search.SourceIndex = \"English\"; To carry out the search operation you need to apply the **Execute **method to the search, which returns a **HitTerms **object. This object can then be used to retrieve the hits found (if any). That way you can fill, e.g. a list control with the hits found during the search. The sample code below shows you how to carry out the search and how to output the search results: HitTerms oHits = search.Execute(); Debug.WriteLine(\"Total hit count: \" + oHits.ToString()); foreach(HitTerm oHit in oHits) { Debug.WriteLine(oHit.Text); }"
  },
  "apiconcepts/termbase.html": {
    "href": "apiconcepts/termbase.html",
    "title": "Selecting a Termbase",
    "keywords": "Selecting a Termbase Once you have connected to a termbase repository you can select one or more termbases. To refer to a specific termbase you can either use its index number or the actual (nice) name used to uniquely identify a termbase, e.g.: Termbases oTbs = oServerRep.Termbases; Termbase oTb = oTbs[\"Termbase name\"]; From this point onwards you can perform further operations such as searching the termbase or accessing the termbase entries. The following line, for example, returns the total number of entries contained in a termbase: Debug.WriteLine(\"Total number of entries in termbase: \" + oTb.Entries.Count.ToString()); When implementing a MultiTerm client you will usually want to offer a termbase selection to the users, e.g. a list control filled with the respective termbase names. The sample code below lists the names of all termbases available in a repository: Termbases oTbs = oServerRep.Termbases; foreach (Termbase oTb in oTbs) { Debug.WriteLine(oTb.Name); }"
  },
  "apiconcepts/userguide.html": {
    "href": "apiconcepts/userguide.html",
    "title": "User Guide",
    "keywords": "User Guide The MultiTerm Object Model The top-level object in the object hierarchy of MultiTerm is the MultiTerm client application. When accessing MultiTerm client functionality programmatically, you first need to create a MultiTerm Client instance. MultiTerm Convert"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Welcome to the MultiTerm API documentation.",
    "keywords": "Welcome to the MultiTerm API documentation. Here you’ll find all the information you need to get started developing your own MultiTerm plugin. Discover quick guides explaining how to build, develop and deploy your app, plus hints and tips to help you make the most of our APIs. Should you have any ideas as to how we can improve this documentation, any new topics you think we should include or hints and tips you would like to share with the developer community, please let us know. To let us know what your suggested improvements are you can do this by using the \" Improve this Doc \" link on the top right of every page. You will need your own github account for this because this action will create a fork of the repository in your account where you can make the changes and then submit a pull request for us to review and accept. Good luck and happy developing!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Access the MultiTerm APIs",
    "keywords": "Access the MultiTerm APIs Learn more about MultiTerm 2022 APIs Learn more about the APIs and what you can achieve with them. Articles Read articles on how to get more out of MultiTerm. RWS"
  },
  "README.html": {
    "href": "README.html",
    "title": "multiterm-api-docs",
    "keywords": "multiterm-api-docs What is it? This the main repository for the MultiTerm Public API documentation. Can I contribute? Anyone is welcome to contribute to the public MultiTerm API documentation by making a pull request into the master repository. The documentation is split into the following sections: Articles This section hosts a series of usefull article on: how to get started with writing plug-ins for MultiTerm how to best use the public APIs how to troubleshoot common issues API Concepts This section hosts the main guidelines on using the Public API along with the API References Getting started with your contribution The documentation is built using a static documentation generator called DocFX . The documentation content is saved in Markdown files and then built into a website using DocFX . The table of content is saved into separate toc.yml files. In order for you to make a contribution directly please follow the next steps: Create a local branch from the main repository Add your changes by modifying existing Markdown files or by adding new Markdown files Adding new files will require updating the toc.yml files. Use the guideline provided by DocFX to learn more. You can use tools such as Notepad++ or Visual Studio Code to edit the content Create a Pull Request with your changes. This pull request will be reviewed for correctness by one of our technical writers Once your pull request has been approved and committed into the main branch, an automatic pipeline will be triggered which will push your changes to the live documentation site if you wish to test your changes locally you can follow the DOCFX Installation guideline and build the entire solution locally Our documentation automatically fills in the product name and other details so you don't have to make the changes manually if we decide to update the product name. Use the '<var:VariableName>' construct to tell our documentation engine to fill in the info for you. Here are the constructs available at this point: <var:ProductName> - The product name, for example MultiTerm <var:ProductNameWithEdition> - The official product release name including the edition, for example 'MultiTerm 2022'"
  }
}