### YamlMime:ManagedReference
items:
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  commentId: T:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  id: ITermbaseRepository
  parent: Sdl.MultiTerm.TMO.Interop
  children:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword(System.String,System.String)
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect(System.String,System.String)
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection(System.Object,System.String)
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.DatabaseType
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsConnected
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsRemote
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Location
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Protocol
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ServerVersion
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Termbases
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.TerminologyConnectorCOM
  langs:
  - csharp
  - vb
  name: ITermbaseRepository
  nameWithType: ITermbaseRepository
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  type: Interface
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: >-
      [Guid("86D5591A-B497-41BB-ADFD-FAE3CF814D8B")]

      public interface ITermbaseRepository
    content.vb: >-
      <Guid("86D5591A-B497-41BB-ADFD-FAE3CF814D8B")>

      Public Interface ITermbaseRepository
  attributes:
  - type: System.Runtime.InteropServices.GuidAttribute
    ctor: System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: 86D5591A-B497-41BB-ADFD-FAE3CF814D8B
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect(System.String,System.String)
  commentId: M:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect(System.String,System.String)
  id: Connect(System.String,System.String)
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  langs:
  - csharp
  - vb
  name: Connect(String, String)
  nameWithType: ITermbaseRepository.Connect(String, String)
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect(System.String, System.String)
  type: Method
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: MtUserType Connect(string UserId, string Password)
    parameters:
    - id: UserId
      type: System.String
    - id: Password
      type: System.String
    return:
      type: Sdl.MultiTerm.TMO.Interop.MtUserType
    content.vb: Function Connect(UserId As String, Password As String) As MtUserType
  overload: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect*
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect
  commentId: M:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect
  id: Disconnect
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  langs:
  - csharp
  - vb
  name: Disconnect()
  nameWithType: ITermbaseRepository.Disconnect()
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect()
  type: Method
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: void Disconnect()
    content.vb: Sub Disconnect
  overload: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect*
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword(System.String,System.String)
  commentId: M:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword(System.String,System.String)
  id: ChangePassword(System.String,System.String)
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  langs:
  - csharp
  - vb
  name: ChangePassword(String, String)
  nameWithType: ITermbaseRepository.ChangePassword(String, String)
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword(System.String, System.String)
  type: Method
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: void ChangePassword(string NewPassword, string OldPassword)
    parameters:
    - id: NewPassword
      type: System.String
    - id: OldPassword
      type: System.String
    content.vb: Sub ChangePassword(NewPassword As String, OldPassword As String)
  overload: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword*
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection(System.Object,System.String)
  commentId: M:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection(System.Object,System.String)
  id: ConnectWithAuthServerConnection(System.Object,System.String)
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  langs:
  - csharp
  - vb
  name: ConnectWithAuthServerConnection(Object, String)
  nameWithType: ITermbaseRepository.ConnectWithAuthServerConnection(Object, String)
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection(System.Object, System.String)
  type: Method
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: MtUserType ConnectWithAuthServerConnection(object pxo_ServerConnection, string UserId)
    parameters:
    - id: pxo_ServerConnection
      type: System.Object
    - id: UserId
      type: System.String
    return:
      type: Sdl.MultiTerm.TMO.Interop.MtUserType
    content.vb: Function ConnectWithAuthServerConnection(pxo_ServerConnection As Object, UserId As String) As MtUserType
  overload: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection*
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  commentId: M:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  id: ConnectEx(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  langs:
  - csharp
  - vb
  name: ConnectEx(String, String, CredentialsPersistOption)
  nameWithType: ITermbaseRepository.ConnectEx(String, String, CredentialsPersistOption)
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx(System.String, System.String, Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  type: Method
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: MtUserType ConnectEx(string UserId, string Password, CredentialsPersistOption CredentialsPersistOption)
    parameters:
    - id: UserId
      type: System.String
    - id: Password
      type: System.String
    - id: CredentialsPersistOption
      type: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
    return:
      type: Sdl.MultiTerm.TMO.Interop.MtUserType
    content.vb: Function ConnectEx(UserId As String, Password As String, CredentialsPersistOption As CredentialsPersistOption) As MtUserType
  overload: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx*
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  commentId: M:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  id: ConnectSso(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  langs:
  - csharp
  - vb
  name: ConnectSso(String, String, CredentialsPersistOption)
  nameWithType: ITermbaseRepository.ConnectSso(String, String, CredentialsPersistOption)
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso(System.String, System.String, Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  type: Method
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: MtUserType ConnectSso(string UserId, string SamlToken, CredentialsPersistOption CredentialsPersistOption)
    parameters:
    - id: UserId
      type: System.String
    - id: SamlToken
      type: System.String
    - id: CredentialsPersistOption
      type: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
    return:
      type: Sdl.MultiTerm.TMO.Interop.MtUserType
    content.vb: Function ConnectSso(UserId As String, SamlToken As String, CredentialsPersistOption As CredentialsPersistOption) As MtUserType
  overload: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso*
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Location
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Location
  id: Location
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: ITermbaseRepository.Location
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Location
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: string Location { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property Location As String
  overload: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Location*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Protocol
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Protocol
  id: Protocol
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  langs:
  - csharp
  - vb
  name: Protocol
  nameWithType: ITermbaseRepository.Protocol
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Protocol
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: MtCommunicationType Protocol { get; set; }
    parameters: []
    return:
      type: Sdl.MultiTerm.TMO.Interop.MtCommunicationType
    content.vb: Property Protocol As MtCommunicationType
  overload: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Protocol*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Termbases
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Termbases
  id: Termbases
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  langs:
  - csharp
  - vb
  name: Termbases
  nameWithType: ITermbaseRepository.Termbases
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Termbases
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: Termbases Termbases { get; }
    parameters: []
    return:
      type: Sdl.MultiTerm.TMO.Interop.Termbases
    content.vb: ReadOnly Property Termbases As Termbases
  overload: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Termbases*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsRemote
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsRemote
  id: IsRemote
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  langs:
  - csharp
  - vb
  name: IsRemote
  nameWithType: ITermbaseRepository.IsRemote
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsRemote
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: bool IsRemote { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsRemote As Boolean
  overload: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsRemote*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsConnected
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsConnected
  id: IsConnected
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  langs:
  - csharp
  - vb
  name: IsConnected
  nameWithType: ITermbaseRepository.IsConnected
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsConnected
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: bool IsConnected { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsConnected As Boolean
  overload: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsConnected*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.DatabaseType
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.DatabaseType
  id: DatabaseType
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  langs:
  - csharp
  - vb
  name: DatabaseType
  nameWithType: ITermbaseRepository.DatabaseType
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.DatabaseType
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: MtDatabaseType DatabaseType { get; set; }
    parameters: []
    return:
      type: Sdl.MultiTerm.TMO.Interop.MtDatabaseType
    content.vb: Property DatabaseType As MtDatabaseType
  overload: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.DatabaseType*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ServerVersion
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ServerVersion
  id: ServerVersion
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  langs:
  - csharp
  - vb
  name: ServerVersion
  nameWithType: ITermbaseRepository.ServerVersion
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ServerVersion
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: int ServerVersion { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property ServerVersion As Integer
  overload: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ServerVersion*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.TerminologyConnectorCOM
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.TerminologyConnectorCOM
  id: TerminologyConnectorCOM
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  langs:
  - csharp
  - vb
  name: TerminologyConnectorCOM
  nameWithType: ITermbaseRepository.TerminologyConnectorCOM
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.TerminologyConnectorCOM
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: object TerminologyConnectorCOM { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly Property TerminologyConnectorCOM As Object
  overload: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.TerminologyConnectorCOM*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.MultiTerm.TMO.Interop
  commentId: N:Sdl.MultiTerm.TMO.Interop
  isExternal: true
  name: Sdl.MultiTerm.TMO.Interop
  nameWithType: Sdl.MultiTerm.TMO.Interop
  fullName: Sdl.MultiTerm.TMO.Interop
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect
  isExternal: true
  name: Connect
  nameWithType: ITermbaseRepository.Connect
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.MultiTerm.TMO.Interop.MtUserType
  commentId: T:Sdl.MultiTerm.TMO.Interop.MtUserType
  parent: Sdl.MultiTerm.TMO.Interop
  isExternal: true
  name: MtUserType
  nameWithType: MtUserType
  fullName: Sdl.MultiTerm.TMO.Interop.MtUserType
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect
  isExternal: true
  name: Disconnect
  nameWithType: ITermbaseRepository.Disconnect
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword
  isExternal: true
  name: ChangePassword
  nameWithType: ITermbaseRepository.ChangePassword
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection
  isExternal: true
  name: ConnectWithAuthServerConnection
  nameWithType: ITermbaseRepository.ConnectWithAuthServerConnection
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx
  isExternal: true
  name: ConnectEx
  nameWithType: ITermbaseRepository.ConnectEx
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx
- uid: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
  commentId: T:Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
  parent: Sdl.MultiTerm.TMO.Interop
  isExternal: true
  name: CredentialsPersistOption
  nameWithType: CredentialsPersistOption
  fullName: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso
  isExternal: true
  name: ConnectSso
  nameWithType: ITermbaseRepository.ConnectSso
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Location*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Location
  isExternal: true
  name: Location
  nameWithType: ITermbaseRepository.Location
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Location
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Protocol*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Protocol
  isExternal: true
  name: Protocol
  nameWithType: ITermbaseRepository.Protocol
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Protocol
- uid: Sdl.MultiTerm.TMO.Interop.MtCommunicationType
  commentId: T:Sdl.MultiTerm.TMO.Interop.MtCommunicationType
  parent: Sdl.MultiTerm.TMO.Interop
  isExternal: true
  name: MtCommunicationType
  nameWithType: MtCommunicationType
  fullName: Sdl.MultiTerm.TMO.Interop.MtCommunicationType
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Termbases*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Termbases
  isExternal: true
  name: Termbases
  nameWithType: ITermbaseRepository.Termbases
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Termbases
- uid: Sdl.MultiTerm.TMO.Interop.Termbases
  commentId: T:Sdl.MultiTerm.TMO.Interop.Termbases
  parent: Sdl.MultiTerm.TMO.Interop
  isExternal: true
  name: Termbases
  nameWithType: Termbases
  fullName: Sdl.MultiTerm.TMO.Interop.Termbases
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsRemote*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsRemote
  isExternal: true
  name: IsRemote
  nameWithType: ITermbaseRepository.IsRemote
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsRemote
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsConnected*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsConnected
  isExternal: true
  name: IsConnected
  nameWithType: ITermbaseRepository.IsConnected
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsConnected
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.DatabaseType*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.DatabaseType
  isExternal: true
  name: DatabaseType
  nameWithType: ITermbaseRepository.DatabaseType
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.DatabaseType
- uid: Sdl.MultiTerm.TMO.Interop.MtDatabaseType
  commentId: T:Sdl.MultiTerm.TMO.Interop.MtDatabaseType
  parent: Sdl.MultiTerm.TMO.Interop
  isExternal: true
  name: MtDatabaseType
  nameWithType: MtDatabaseType
  fullName: Sdl.MultiTerm.TMO.Interop.MtDatabaseType
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ServerVersion*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ServerVersion
  isExternal: true
  name: ServerVersion
  nameWithType: ITermbaseRepository.ServerVersion
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ServerVersion
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.TerminologyConnectorCOM*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.TerminologyConnectorCOM
  isExternal: true
  name: TerminologyConnectorCOM
  nameWithType: ITermbaseRepository.TerminologyConnectorCOM
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.TerminologyConnectorCOM
