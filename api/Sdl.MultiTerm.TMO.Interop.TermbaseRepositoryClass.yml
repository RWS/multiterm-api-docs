### YamlMime:ManagedReference
items:
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  commentId: T:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  id: TermbaseRepositoryClass
  parent: Sdl.MultiTerm.TMO.Interop
  children:
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ChangePassword(System.String,System.String)
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Connect(System.String,System.String)
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectEx(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectSso(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectWithAuthServerConnection(System.Object,System.String)
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.DatabaseType
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Disconnect
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsConnected
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsRemote
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Location
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Protocol
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ServerVersion
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Termbases
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.TerminologyConnectorCOM
  langs:
  - csharp
  - vb
  name: TermbaseRepositoryClass
  nameWithType: TermbaseRepositoryClass
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  type: Class
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: >-
      [Guid("3C0080CE-F43D-413B-8F11-DB1304247A61")]

      [ClassInterface(ClassInterfaceType.None)]

      public class TermbaseRepositoryClass : TermbaseRepository, ITermbaseRepository
    content.vb: >-
      <Guid("3C0080CE-F43D-413B-8F11-DB1304247A61")>

      <ClassInterface(ClassInterfaceType.None)>

      Public Class TermbaseRepositoryClass
          Implements TermbaseRepository, ITermbaseRepository
  inheritance:
  - System.Object
  implements:
  - Sdl.MultiTerm.TMO.Interop.TermbaseRepository
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Runtime.InteropServices.GuidAttribute
    ctor: System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: 3C0080CE-F43D-413B-8F11-DB1304247A61
  - type: System.Runtime.InteropServices.ClassInterfaceAttribute
    ctor: System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)
    arguments:
    - type: System.Runtime.InteropServices.ClassInterfaceType
      value: 0
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Connect(System.String,System.String)
  commentId: M:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Connect(System.String,System.String)
  id: Connect(System.String,System.String)
  isEii: true
  parent: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  langs:
  - csharp
  - vb
  name: ITermbaseRepository.Connect(String, String)
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.Connect(String, String)
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect(System.String, System.String)
  type: Method
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: public virtual MtUserType ITermbaseRepository.Connect(string UserId, string Password)
    parameters:
    - id: UserId
      type: System.String
    - id: Password
      type: System.String
    return:
      type: Sdl.MultiTerm.TMO.Interop.MtUserType
    content.vb: Public Overridable Function Connect(UserId As String, Password As String) As MtUserType Implements ITermbaseRepository.Connect
  overload: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Connect*
  implements:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect(System.String,System.String)
  nameWithType.vb: TermbaseRepositoryClass.Connect(String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Connect(System.String, System.String)
  name.vb: Connect(String, String)
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Disconnect
  commentId: M:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Disconnect
  id: Disconnect
  isEii: true
  parent: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  langs:
  - csharp
  - vb
  name: ITermbaseRepository.Disconnect()
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.Disconnect()
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect()
  type: Method
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: public virtual void ITermbaseRepository.Disconnect()
    content.vb: Public Overridable Sub Disconnect Implements ITermbaseRepository.Disconnect
  overload: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Disconnect*
  implements:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect
  nameWithType.vb: TermbaseRepositoryClass.Disconnect()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Disconnect()
  name.vb: Disconnect()
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ChangePassword(System.String,System.String)
  commentId: M:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ChangePassword(System.String,System.String)
  id: ChangePassword(System.String,System.String)
  isEii: true
  parent: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  langs:
  - csharp
  - vb
  name: ITermbaseRepository.ChangePassword(String, String)
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.ChangePassword(String, String)
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword(System.String, System.String)
  type: Method
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: public virtual void ITermbaseRepository.ChangePassword(string NewPassword, string OldPassword)
    parameters:
    - id: NewPassword
      type: System.String
    - id: OldPassword
      type: System.String
    content.vb: Public Overridable Sub ChangePassword(NewPassword As String, OldPassword As String) Implements ITermbaseRepository.ChangePassword
  overload: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ChangePassword*
  implements:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword(System.String,System.String)
  nameWithType.vb: TermbaseRepositoryClass.ChangePassword(String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ChangePassword(System.String, System.String)
  name.vb: ChangePassword(String, String)
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectWithAuthServerConnection(System.Object,System.String)
  commentId: M:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectWithAuthServerConnection(System.Object,System.String)
  id: ConnectWithAuthServerConnection(System.Object,System.String)
  isEii: true
  parent: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  langs:
  - csharp
  - vb
  name: ITermbaseRepository.ConnectWithAuthServerConnection(Object, String)
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.ConnectWithAuthServerConnection(Object, String)
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection(System.Object, System.String)
  type: Method
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: public virtual MtUserType ITermbaseRepository.ConnectWithAuthServerConnection(object pxo_ServerConnection, string UserId)
    parameters:
    - id: pxo_ServerConnection
      type: System.Object
    - id: UserId
      type: System.String
    return:
      type: Sdl.MultiTerm.TMO.Interop.MtUserType
    content.vb: Public Overridable Function ConnectWithAuthServerConnection(pxo_ServerConnection As Object, UserId As String) As MtUserType Implements ITermbaseRepository.ConnectWithAuthServerConnection
  overload: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectWithAuthServerConnection*
  implements:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection(System.Object,System.String)
  nameWithType.vb: TermbaseRepositoryClass.ConnectWithAuthServerConnection(Object, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectWithAuthServerConnection(System.Object, System.String)
  name.vb: ConnectWithAuthServerConnection(Object, String)
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectEx(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  commentId: M:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectEx(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  id: ConnectEx(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  isEii: true
  parent: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  langs:
  - csharp
  - vb
  name: ITermbaseRepository.ConnectEx(String, String, CredentialsPersistOption)
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.ConnectEx(String, String, CredentialsPersistOption)
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx(System.String, System.String, Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  type: Method
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: public virtual MtUserType ITermbaseRepository.ConnectEx(string UserId, string Password, CredentialsPersistOption CredentialsPersistOption)
    parameters:
    - id: UserId
      type: System.String
    - id: Password
      type: System.String
    - id: CredentialsPersistOption
      type: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
    return:
      type: Sdl.MultiTerm.TMO.Interop.MtUserType
    content.vb: Public Overridable Function ConnectEx(UserId As String, Password As String, CredentialsPersistOption As CredentialsPersistOption) As MtUserType Implements ITermbaseRepository.ConnectEx
  overload: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectEx*
  implements:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  nameWithType.vb: TermbaseRepositoryClass.ConnectEx(String, String, CredentialsPersistOption)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectEx(System.String, System.String, Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  name.vb: ConnectEx(String, String, CredentialsPersistOption)
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectSso(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  commentId: M:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectSso(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  id: ConnectSso(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  isEii: true
  parent: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  langs:
  - csharp
  - vb
  name: ITermbaseRepository.ConnectSso(String, String, CredentialsPersistOption)
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.ConnectSso(String, String, CredentialsPersistOption)
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso(System.String, System.String, Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  type: Method
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: public virtual MtUserType ITermbaseRepository.ConnectSso(string UserId, string SamlToken, CredentialsPersistOption CredentialsPersistOption)
    parameters:
    - id: UserId
      type: System.String
    - id: SamlToken
      type: System.String
    - id: CredentialsPersistOption
      type: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
    return:
      type: Sdl.MultiTerm.TMO.Interop.MtUserType
    content.vb: Public Overridable Function ConnectSso(UserId As String, SamlToken As String, CredentialsPersistOption As CredentialsPersistOption) As MtUserType Implements ITermbaseRepository.ConnectSso
  overload: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectSso*
  implements:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  nameWithType.vb: TermbaseRepositoryClass.ConnectSso(String, String, CredentialsPersistOption)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectSso(System.String, System.String, Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  name.vb: ConnectSso(String, String, CredentialsPersistOption)
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Location
  commentId: P:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Location
  id: Location
  isEii: true
  parent: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  langs:
  - csharp
  - vb
  name: ITermbaseRepository.Location
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.Location
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Location
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: public virtual string ITermbaseRepository.Location { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property Location As String Implements ITermbaseRepository.Location
  overload: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Location*
  implements:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Location
  nameWithType.vb: TermbaseRepositoryClass.Location
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Location
  name.vb: Location
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Protocol
  commentId: P:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Protocol
  id: Protocol
  isEii: true
  parent: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  langs:
  - csharp
  - vb
  name: ITermbaseRepository.Protocol
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.Protocol
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Protocol
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: public virtual MtCommunicationType ITermbaseRepository.Protocol { get; set; }
    parameters: []
    return:
      type: Sdl.MultiTerm.TMO.Interop.MtCommunicationType
    content.vb: Public Overridable Property Protocol As MtCommunicationType Implements ITermbaseRepository.Protocol
  overload: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Protocol*
  implements:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Protocol
  nameWithType.vb: TermbaseRepositoryClass.Protocol
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Protocol
  name.vb: Protocol
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Termbases
  commentId: P:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Termbases
  id: Termbases
  isEii: true
  parent: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  langs:
  - csharp
  - vb
  name: ITermbaseRepository.Termbases
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.Termbases
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Termbases
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: public virtual Termbases ITermbaseRepository.Termbases { get; }
    parameters: []
    return:
      type: Sdl.MultiTerm.TMO.Interop.Termbases
    content.vb: Public Overridable ReadOnly Property Termbases As Termbases Implements ITermbaseRepository.Termbases
  overload: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Termbases*
  implements:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Termbases
  nameWithType.vb: TermbaseRepositoryClass.Termbases
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Termbases
  name.vb: Termbases
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsRemote
  commentId: P:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsRemote
  id: IsRemote
  isEii: true
  parent: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  langs:
  - csharp
  - vb
  name: ITermbaseRepository.IsRemote
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.IsRemote
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsRemote
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: public virtual bool ITermbaseRepository.IsRemote { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsRemote As Boolean Implements ITermbaseRepository.IsRemote
  overload: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsRemote*
  implements:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsRemote
  nameWithType.vb: TermbaseRepositoryClass.IsRemote
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsRemote
  name.vb: IsRemote
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsConnected
  commentId: P:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsConnected
  id: IsConnected
  isEii: true
  parent: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  langs:
  - csharp
  - vb
  name: ITermbaseRepository.IsConnected
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.IsConnected
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsConnected
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: public virtual bool ITermbaseRepository.IsConnected { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsConnected As Boolean Implements ITermbaseRepository.IsConnected
  overload: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsConnected*
  implements:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsConnected
  nameWithType.vb: TermbaseRepositoryClass.IsConnected
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsConnected
  name.vb: IsConnected
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.DatabaseType
  commentId: P:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.DatabaseType
  id: DatabaseType
  isEii: true
  parent: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  langs:
  - csharp
  - vb
  name: ITermbaseRepository.DatabaseType
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.DatabaseType
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.DatabaseType
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: public virtual MtDatabaseType ITermbaseRepository.DatabaseType { get; set; }
    parameters: []
    return:
      type: Sdl.MultiTerm.TMO.Interop.MtDatabaseType
    content.vb: Public Overridable Property DatabaseType As MtDatabaseType Implements ITermbaseRepository.DatabaseType
  overload: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.DatabaseType*
  implements:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.DatabaseType
  nameWithType.vb: TermbaseRepositoryClass.DatabaseType
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.DatabaseType
  name.vb: DatabaseType
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ServerVersion
  commentId: P:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ServerVersion
  id: ServerVersion
  isEii: true
  parent: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  langs:
  - csharp
  - vb
  name: ITermbaseRepository.ServerVersion
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.ServerVersion
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ServerVersion
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: public virtual int ITermbaseRepository.ServerVersion { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable ReadOnly Property ServerVersion As Integer Implements ITermbaseRepository.ServerVersion
  overload: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ServerVersion*
  implements:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ServerVersion
  nameWithType.vb: TermbaseRepositoryClass.ServerVersion
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ServerVersion
  name.vb: ServerVersion
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.TerminologyConnectorCOM
  commentId: P:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.TerminologyConnectorCOM
  id: TerminologyConnectorCOM
  isEii: true
  parent: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass
  langs:
  - csharp
  - vb
  name: ITermbaseRepository.TerminologyConnectorCOM
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.TerminologyConnectorCOM
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.TerminologyConnectorCOM
  type: Property
  source:
    path: Sdl.MultiTerm.TMO.Interop
    isExternal: true
  assemblies:
  - Sdl.MultiTerm.TMO.Interop
  namespace: Sdl.MultiTerm.TMO.Interop
  syntax:
    content: public virtual object ITermbaseRepository.TerminologyConnectorCOM { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public Overridable ReadOnly Property TerminologyConnectorCOM As Object Implements ITermbaseRepository.TerminologyConnectorCOM
  overload: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.TerminologyConnectorCOM*
  implements:
  - Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.TerminologyConnectorCOM
  nameWithType.vb: TermbaseRepositoryClass.TerminologyConnectorCOM
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.TerminologyConnectorCOM
  name.vb: TerminologyConnectorCOM
references:
- uid: Sdl.MultiTerm.TMO.Interop
  commentId: N:Sdl.MultiTerm.TMO.Interop
  isExternal: true
  name: Sdl.MultiTerm.TMO.Interop
  nameWithType: Sdl.MultiTerm.TMO.Interop
  fullName: Sdl.MultiTerm.TMO.Interop
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepository
  commentId: T:Sdl.MultiTerm.TMO.Interop.TermbaseRepository
  parent: Sdl.MultiTerm.TMO.Interop
  isExternal: true
  name: TermbaseRepository
  nameWithType: TermbaseRepository
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepository
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  commentId: T:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  parent: Sdl.MultiTerm.TMO.Interop
  isExternal: true
  name: ITermbaseRepository
  nameWithType: ITermbaseRepository
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Connect*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Connect
  isExternal: true
  name: ITermbaseRepository.Connect
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.Connect
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect
  nameWithType.vb: TermbaseRepositoryClass.Connect
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Connect
  name.vb: Connect
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect(System.String,System.String)
  commentId: M:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect(System.String,System.String)
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  isExternal: true
  name: Connect(String, String)
  nameWithType: ITermbaseRepository.Connect(String, String)
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect(System.String, System.String)
  spec.csharp:
  - uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect(System.String,System.String)
    name: Connect
    nameWithType: ITermbaseRepository.Connect
    fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect(System.String,System.String)
    name: Connect
    nameWithType: ITermbaseRepository.Connect
    fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Connect
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.MultiTerm.TMO.Interop.MtUserType
  commentId: T:Sdl.MultiTerm.TMO.Interop.MtUserType
  parent: Sdl.MultiTerm.TMO.Interop
  isExternal: true
  name: MtUserType
  nameWithType: MtUserType
  fullName: Sdl.MultiTerm.TMO.Interop.MtUserType
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Disconnect*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Disconnect
  isExternal: true
  name: ITermbaseRepository.Disconnect
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.Disconnect
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect
  nameWithType.vb: TermbaseRepositoryClass.Disconnect
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Disconnect
  name.vb: Disconnect
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect
  commentId: M:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  isExternal: true
  name: Disconnect()
  nameWithType: ITermbaseRepository.Disconnect()
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect()
  spec.csharp:
  - uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect
    name: Disconnect
    nameWithType: ITermbaseRepository.Disconnect
    fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect
    name: Disconnect
    nameWithType: ITermbaseRepository.Disconnect
    fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Disconnect
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ChangePassword*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ChangePassword
  isExternal: true
  name: ITermbaseRepository.ChangePassword
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.ChangePassword
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword
  nameWithType.vb: TermbaseRepositoryClass.ChangePassword
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ChangePassword
  name.vb: ChangePassword
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword(System.String,System.String)
  commentId: M:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword(System.String,System.String)
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  isExternal: true
  name: ChangePassword(String, String)
  nameWithType: ITermbaseRepository.ChangePassword(String, String)
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword(System.String, System.String)
  spec.csharp:
  - uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword(System.String,System.String)
    name: ChangePassword
    nameWithType: ITermbaseRepository.ChangePassword
    fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword(System.String,System.String)
    name: ChangePassword
    nameWithType: ITermbaseRepository.ChangePassword
    fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ChangePassword
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectWithAuthServerConnection*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectWithAuthServerConnection
  isExternal: true
  name: ITermbaseRepository.ConnectWithAuthServerConnection
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.ConnectWithAuthServerConnection
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection
  nameWithType.vb: TermbaseRepositoryClass.ConnectWithAuthServerConnection
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectWithAuthServerConnection
  name.vb: ConnectWithAuthServerConnection
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection(System.Object,System.String)
  commentId: M:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection(System.Object,System.String)
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  isExternal: true
  name: ConnectWithAuthServerConnection(Object, String)
  nameWithType: ITermbaseRepository.ConnectWithAuthServerConnection(Object, String)
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection(System.Object, System.String)
  spec.csharp:
  - uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection(System.Object,System.String)
    name: ConnectWithAuthServerConnection
    nameWithType: ITermbaseRepository.ConnectWithAuthServerConnection
    fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection(System.Object,System.String)
    name: ConnectWithAuthServerConnection
    nameWithType: ITermbaseRepository.ConnectWithAuthServerConnection
    fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectWithAuthServerConnection
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectEx*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectEx
  isExternal: true
  name: ITermbaseRepository.ConnectEx
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.ConnectEx
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx
  nameWithType.vb: TermbaseRepositoryClass.ConnectEx
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectEx
  name.vb: ConnectEx
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  commentId: M:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  isExternal: true
  name: ConnectEx(String, String, CredentialsPersistOption)
  nameWithType: ITermbaseRepository.ConnectEx(String, String, CredentialsPersistOption)
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx(System.String, System.String, Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  spec.csharp:
  - uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
    name: ConnectEx
    nameWithType: ITermbaseRepository.ConnectEx
    fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
    name: CredentialsPersistOption
    nameWithType: CredentialsPersistOption
    fullName: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
    name: ConnectEx
    nameWithType: ITermbaseRepository.ConnectEx
    fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectEx
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
    name: CredentialsPersistOption
    nameWithType: CredentialsPersistOption
    fullName: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
  commentId: T:Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
  parent: Sdl.MultiTerm.TMO.Interop
  isExternal: true
  name: CredentialsPersistOption
  nameWithType: CredentialsPersistOption
  fullName: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectSso*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectSso
  isExternal: true
  name: ITermbaseRepository.ConnectSso
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.ConnectSso
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso
  nameWithType.vb: TermbaseRepositoryClass.ConnectSso
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ConnectSso
  name.vb: ConnectSso
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  commentId: M:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  isExternal: true
  name: ConnectSso(String, String, CredentialsPersistOption)
  nameWithType: ITermbaseRepository.ConnectSso(String, String, CredentialsPersistOption)
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso(System.String, System.String, Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
  spec.csharp:
  - uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
    name: ConnectSso
    nameWithType: ITermbaseRepository.ConnectSso
    fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
    name: CredentialsPersistOption
    nameWithType: CredentialsPersistOption
    fullName: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso(System.String,System.String,Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption)
    name: ConnectSso
    nameWithType: ITermbaseRepository.ConnectSso
    fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ConnectSso
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
    name: CredentialsPersistOption
    nameWithType: CredentialsPersistOption
    fullName: Sdl.MultiTerm.TMO.Interop.CredentialsPersistOption
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Location*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Location
  isExternal: true
  name: ITermbaseRepository.Location
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.Location
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Location
  nameWithType.vb: TermbaseRepositoryClass.Location
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Location
  name.vb: Location
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Location
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Location
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  isExternal: true
  name: Location
  nameWithType: ITermbaseRepository.Location
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Location
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Protocol*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Protocol
  isExternal: true
  name: ITermbaseRepository.Protocol
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.Protocol
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Protocol
  nameWithType.vb: TermbaseRepositoryClass.Protocol
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Protocol
  name.vb: Protocol
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Protocol
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Protocol
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  isExternal: true
  name: Protocol
  nameWithType: ITermbaseRepository.Protocol
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Protocol
- uid: Sdl.MultiTerm.TMO.Interop.MtCommunicationType
  commentId: T:Sdl.MultiTerm.TMO.Interop.MtCommunicationType
  parent: Sdl.MultiTerm.TMO.Interop
  isExternal: true
  name: MtCommunicationType
  nameWithType: MtCommunicationType
  fullName: Sdl.MultiTerm.TMO.Interop.MtCommunicationType
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Termbases*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Termbases
  isExternal: true
  name: ITermbaseRepository.Termbases
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.Termbases
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Termbases
  nameWithType.vb: TermbaseRepositoryClass.Termbases
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Termbases
  name.vb: Termbases
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Termbases
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Termbases
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  isExternal: true
  name: Termbases
  nameWithType: ITermbaseRepository.Termbases
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.Termbases
- uid: Sdl.MultiTerm.TMO.Interop.Termbases
  commentId: T:Sdl.MultiTerm.TMO.Interop.Termbases
  parent: Sdl.MultiTerm.TMO.Interop
  isExternal: true
  name: Termbases
  nameWithType: Termbases
  fullName: Sdl.MultiTerm.TMO.Interop.Termbases
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsRemote*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsRemote
  isExternal: true
  name: ITermbaseRepository.IsRemote
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.IsRemote
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsRemote
  nameWithType.vb: TermbaseRepositoryClass.IsRemote
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsRemote
  name.vb: IsRemote
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsRemote
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsRemote
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  isExternal: true
  name: IsRemote
  nameWithType: ITermbaseRepository.IsRemote
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsRemote
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsConnected*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsConnected
  isExternal: true
  name: ITermbaseRepository.IsConnected
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.IsConnected
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsConnected
  nameWithType.vb: TermbaseRepositoryClass.IsConnected
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.IsConnected
  name.vb: IsConnected
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsConnected
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsConnected
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  isExternal: true
  name: IsConnected
  nameWithType: ITermbaseRepository.IsConnected
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.IsConnected
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.DatabaseType*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.DatabaseType
  isExternal: true
  name: ITermbaseRepository.DatabaseType
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.DatabaseType
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.DatabaseType
  nameWithType.vb: TermbaseRepositoryClass.DatabaseType
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.DatabaseType
  name.vb: DatabaseType
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.DatabaseType
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.DatabaseType
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  isExternal: true
  name: DatabaseType
  nameWithType: ITermbaseRepository.DatabaseType
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.DatabaseType
- uid: Sdl.MultiTerm.TMO.Interop.MtDatabaseType
  commentId: T:Sdl.MultiTerm.TMO.Interop.MtDatabaseType
  parent: Sdl.MultiTerm.TMO.Interop
  isExternal: true
  name: MtDatabaseType
  nameWithType: MtDatabaseType
  fullName: Sdl.MultiTerm.TMO.Interop.MtDatabaseType
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ServerVersion*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ServerVersion
  isExternal: true
  name: ITermbaseRepository.ServerVersion
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.ServerVersion
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ServerVersion
  nameWithType.vb: TermbaseRepositoryClass.ServerVersion
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.ServerVersion
  name.vb: ServerVersion
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ServerVersion
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ServerVersion
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  isExternal: true
  name: ServerVersion
  nameWithType: ITermbaseRepository.ServerVersion
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.ServerVersion
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.TerminologyConnectorCOM*
  commentId: Overload:Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.TerminologyConnectorCOM
  isExternal: true
  name: ITermbaseRepository.TerminologyConnectorCOM
  nameWithType: TermbaseRepositoryClass.ITermbaseRepository.TerminologyConnectorCOM
  fullName: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.TerminologyConnectorCOM
  nameWithType.vb: TermbaseRepositoryClass.TerminologyConnectorCOM
  fullName.vb: Sdl.MultiTerm.TMO.Interop.TermbaseRepositoryClass.TerminologyConnectorCOM
  name.vb: TerminologyConnectorCOM
- uid: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.TerminologyConnectorCOM
  commentId: P:Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.TerminologyConnectorCOM
  parent: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository
  isExternal: true
  name: TerminologyConnectorCOM
  nameWithType: ITermbaseRepository.TerminologyConnectorCOM
  fullName: Sdl.MultiTerm.TMO.Interop.ITermbaseRepository.TerminologyConnectorCOM
